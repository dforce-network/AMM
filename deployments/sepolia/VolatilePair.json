{
  "address": "0x577160f26cE8f137bdA345c313F2C0f0e93E521d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "ClaimFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAdminFeeRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFeeRate",
          "type": "uint256"
        }
      ],
      "name": "SetAdminFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapFeeRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFeeRate",
          "type": "uint256"
        }
      ],
      "name": "SetSwapFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0In",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1In",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0Out",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1Out",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "swapFees",
          "type": "uint256[]"
        }
      ],
      "name": "SwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "reserve0",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "reserve1",
          "type": "uint112"
        }
      ],
      "name": "Sync",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ADMIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_LIQUIDITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAIR_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFees",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_adminFees",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRealBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_adminFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setAdminFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setSwapFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount0Out",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1Out",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAdminFee0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAdminFee1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa135f9ca5293791ad6250729bad19efad977bf18f8ea91d3afc9a23053511cf5",
  "receipt": {
    "to": null,
    "from": "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "contractAddress": "0x577160f26cE8f137bdA345c313F2C0f0e93E521d",
    "transactionIndex": 24,
    "gasUsed": "2844211",
    "logsBloom": "0x
    "blockHash": "0x358ea0ee986465621bd0cfa3f44c7e81a8bda2b8295c504ae9a09ed1a4187a8c",
    "transactionHash": "0xa135f9ca5293791ad6250729bad19efad977bf18f8ea91d3afc9a23053511cf5",
    "logs": [],
    "blockNumber": 3370277,
    "cumulativeGasUsed": "5722908",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "91a6f7d256e589938d50623d3d4bbee9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"ClaimFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAdminFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFeeRate\",\"type\":\"uint256\"}],\"name\":\"SetAdminFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFeeRate\",\"type\":\"uint256\"}],\"name\":\"SetSwapFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFees\",\"type\":\"uint256[]\"}],\"name\":\"SwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAIR_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_adminFees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRealBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminFeeRate\",\"type\":\"uint256\"}],\"name\":\"setAdminFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFeeRate\",\"type\":\"uint256\"}],\"name\":\"setSwapFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAdminFee0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAdminFee1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract implements the VolatilePair interface and inherits from the PairERC20 contract. It also uses the Initializable contract from the OpenZeppelin library.\",\"events\":{\"Burn(address,uint256,uint256,address)\":{\"details\":\"Emitted when liquidity is removed from the pool\",\"params\":{\"amount0\":\"The amount of token0 removed\",\"amount1\":\"The amount of token1 removed\",\"sender\":\"The address of the sender\",\"to\":\"The address that receives the tokens\"}},\"ClaimFees(address,address,uint256,uint256)\":{\"details\":\"Emitted when admin fees are claimed\",\"params\":{\"amount0\":\"The amount of token0 claimed\",\"amount1\":\"The amount of token1 claimed\",\"token0\":\"The address of token0\",\"token1\":\"The address of token1\"}},\"Mint(address,uint256,uint256)\":{\"details\":\"Emitted when liquidity is added to the pool\",\"params\":{\"amount0\":\"The amount of token0 added\",\"amount1\":\"The amount of token1 added\",\"sender\":\"The address of the sender\"}},\"SetAdminFeeRate(uint256,uint256)\":{\"details\":\"Emitted when the admin fee rate is updated\",\"params\":{\"newAdminFeeRate\":\"The new admin fee rate\",\"oldAdminFeeRate\":\"The old admin fee rate\"}},\"SetSwapFeeRate(uint256,uint256)\":{\"details\":\"Emitted when the swap fee rate is updated\",\"params\":{\"newSwapFeeRate\":\"The new swap fee rate\",\"oldSwapFeeRate\":\"The old swap fee rate\"}},\"Swap(address,uint256,uint256,uint256,uint256,address)\":{\"details\":\"Emitted when a swap occurs\",\"params\":{\"amount0In\":\"The amount of token0 being swapped in\",\"amount0Out\":\"The amount of token0 being swapped out\",\"amount1In\":\"The amount of token1 being swapped in\",\"amount1Out\":\"The amount of token1 being swapped out\",\"sender\":\"The address of the sender\",\"to\":\"The address that receives the swapped tokens\"}},\"SwapFee(address[],uint256[])\":{\"details\":\"Emitted when the swap fee rate is updated\",\"params\":{\"swapFees\":\"The new swap fee rates for each token\",\"tokens\":\"The addresses of the tokens in the pair\"}},\"Sync(uint112,uint112)\":{\"details\":\"Emitted when the reserves are synced\",\"params\":{\"reserve0\":\"The reserve of token0\",\"reserve1\":\"The reserve of token1\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves a spender to transfer tokens on behalf of the owner.\",\"params\":{\"spender\":\"The address of the spender to be approved.\",\"value\":\"The amount of tokens to be approved for transfer.\"},\"returns\":{\"_0\":\"A boolean indicating whether the approval was successful or not.\"}},\"burn(address)\":{\"details\":\"Burn liquidity tokens from the caller and remove corresponding reserves\",\"params\":{\"_to\":\"The address to send the tokens to\"},\"returns\":{\"_amount0\":\"The amount of token0 burned\",\"_amount1\":\"The amount of token1 burned\"}},\"claimFees()\":{\"details\":\"Claim admin fees\",\"returns\":{\"_adminFees\":\"An array of admin fees\"}},\"getAmountOut(address,address,uint256)\":{\"details\":\"Returns the amount of output tokens given an input amount of a token\",\"params\":{\"_amount\":\"The input amount of the token\",\"_from\":\"The address of the input token\",\"_to\":\"The address of the output token\"}},\"getRealBalanceOf()\":{\"details\":\"Returns the real balance of each token in the pair, excluding the admin fee\"},\"getReserves()\":{\"details\":\"Returns the reserves and the timestamp of the last block when they were updated\"},\"initialize(address[],bytes)\":{\"details\":\"Initializes the VolatilePair contract\",\"params\":{\"_data\":\"The encoded swap fee rate and admin fee rate\",\"_tokens\":\"The addresses of the tokens in the pair\"}},\"mint(address)\":{\"details\":\"Mint liquidity tokens to the caller and add corresponding reserves\",\"params\":{\"_to\":\"The address to mint liquidity tokens to\"},\"returns\":{\"_liquidity\":\"The amount of liquidity tokens minted\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Approves a spender to transfer tokens on behalf of the owner, using a permit signature.\",\"params\":{\"deadline\":\"The deadline by which the permit must be used.\",\"owner\":\"The address of the owner of the tokens.\",\"r\":\"The R component of the permit signature.\",\"s\":\"The S component of the permit signature.\",\"spender\":\"The address of the spender to be approved.\",\"v\":\"The recovery byte of the permit signature.\",\"value\":\"The amount of tokens to be approved for transfer.\"}},\"setAdminFeeRate(uint256)\":{\"details\":\"Set admin fee rate\",\"params\":{\"_adminFeeRate\":\"The new admin fee rate\"}},\"setSwapFeeRate(uint256)\":{\"details\":\"Set swap fee rate\",\"params\":{\"_swapFeeRate\":\"The new swap fee rate\"}},\"skim(address)\":{\"details\":\"Skim the excess tokens from the contract and send them to the specified address\",\"params\":{\"_to\":\"The address to send the excess tokens to\"}},\"swap(uint256,uint256,address,bytes)\":{\"details\":\"Low-level function for swapping tokens\",\"params\":{\"_amount0Out\":\"The amount of token0 to receive\",\"_amount1Out\":\"The amount of token1 to receive\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_to\":\"The address to send the tokens to\"}},\"sync()\":{\"details\":\"Update reserves to match balances\"},\"tokens()\":{\"details\":\"Returns the tokens in the pair\"},\"transfer(address,uint256)\":{\"details\":\"Transfers tokens from the caller's address to another address.\",\"params\":{\"to\":\"The address to which the tokens will be transferred.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean indicating whether the transfer was successful or not.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers tokens from one address to another, on behalf of the owner.\",\"params\":{\"from\":\"The address from which the tokens will be transferred.\",\"to\":\"The address to which the tokens will be transferred.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean indicating whether the transfer was successful or not.\"}}},\"title\":\"VolatilePair\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VolatilePair.sol\":\"VolatilePair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/VolatilePair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/PairERC20.sol\\\";\\nimport { IVolatilePair } from \\\"./interface/IPair.sol\\\";\\n\\nimport \\\"./utils/UQ112x112.sol\\\";\\nimport \\\"./utils/ERC20Call.sol\\\";\\nimport \\\"./utils/Math.sol\\\";\\n\\nimport \\\"./interface/IPairCallee.sol\\\";\\nimport \\\"./interface/IPairFactory.sol\\\";\\n\\n/**\\n * @title VolatilePair\\n * @dev This contract implements the VolatilePair interface and inherits from the PairERC20 contract.\\n * It also uses the Initializable contract from the OpenZeppelin library.\\n */\\ncontract VolatilePair is Initializable, PairERC20, IVolatilePair {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n    using ERC20Call for address;\\n\\n    // Minimum liquidity required to add to the pool\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    // Selector for transfer function\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    // Address of the factory that created the pair\\n    address public factory;\\n    // Address of token0\\n    address public override token0;\\n    // Address of token1\\n    address public override token1;\\n\\n    // Reserve of token0\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    // Reserve of token1\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    // Block timestamp of the last liquidity event\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    // This variable is used to prevent reentrancy attacks\\n    uint256 private unlocked;\\n\\n    // The type of the pair, 1 for volatile pair\\n    uint8 public constant override PAIR_TYPE = 1;\\n\\n    // Whether or not the pair requires authorization\\n    bool public constant override AUTH = false;\\n\\n    // The denominator used for calculating fees\\n    uint256 public constant FEE_DENOMINATOR = 10**10;\\n\\n    // The maximum swap fee rate\\n    uint256 public constant MAX_SWAP_FEE = 10**8;\\n\\n    // The maximum admin fee rate\\n    uint256 public constant MAX_ADMIN_FEE = 10**10;\\n\\n    // The current swap fee rate\\n    uint256 public swapFeeRate;\\n\\n    // The current admin fee rate\\n    uint256 public adminFeeRate;\\n\\n    // The total admin fee for token0\\n    uint256 public totalAdminFee0;\\n\\n    // The total admin fee for token1\\n    uint256 public totalAdminFee1;\\n\\n    /**\\n     * @dev Emitted when liquidity is added to the pool\\n     * @param sender The address of the sender\\n     * @param amount0 The amount of token0 added\\n     * @param amount1 The amount of token1 added\\n     */\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\n    /**\\n     * @dev Emitted when liquidity is removed from the pool\\n     * @param sender The address of the sender\\n     * @param amount0 The amount of token0 removed\\n     * @param amount1 The amount of token1 removed\\n     * @param to The address that receives the tokens\\n     */\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\n    /**\\n     * @dev Emitted when a swap occurs\\n     * @param sender The address of the sender\\n     * @param amount0In The amount of token0 being swapped in\\n     * @param amount1In The amount of token1 being swapped in\\n     * @param amount0Out The amount of token0 being swapped out\\n     * @param amount1Out The amount of token1 being swapped out\\n     * @param to The address that receives the swapped tokens\\n     */\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    /**\\n     * @dev Emitted when the swap fee rate is updated\\n     * @param tokens The addresses of the tokens in the pair\\n     * @param swapFees The new swap fee rates for each token\\n     */\\n    event SwapFee(address[] tokens, uint256[] swapFees);\\n\\n    /**\\n     * @dev Emitted when the reserves are synced\\n     * @param reserve0 The reserve of token0\\n     * @param reserve1 The reserve of token1\\n     */\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    /**\\n     * @dev Emitted when admin fees are claimed\\n     * @param token0 The address of token0\\n     * @param token1 The address of token1\\n     * @param amount0 The amount of token0 claimed\\n     * @param amount1 The amount of token1 claimed\\n     */\\n    event ClaimFees(address token0, address token1, uint256 amount0, uint256 amount1);\\n\\n    /**\\n     * @dev Emitted when the swap fee rate is updated\\n     * @param oldSwapFeeRate The old swap fee rate\\n     * @param newSwapFeeRate The new swap fee rate\\n     */\\n    event SetSwapFeeRate(uint256 oldSwapFeeRate, uint256 newSwapFeeRate);\\n\\n    /**\\n     * @dev Emitted when the admin fee rate is updated\\n     * @param oldAdminFeeRate The old admin fee rate\\n     * @param newAdminFeeRate The new admin fee rate\\n     */\\n    event SetAdminFeeRate(uint256 oldAdminFeeRate, uint256 newAdminFeeRate);\\n\\n    /**\\n     * @dev Initializes the VolatilePair contract\\n     * @param _tokens The addresses of the tokens in the pair\\n     * @param _data The encoded swap fee rate and admin fee rate\\n     */\\n    function initialize(address[] memory _tokens, bytes memory _data) external override initializer {\\n        factory = msg.sender;\\n        unlocked = 1;\\n        require(_tokens.length == 2, \\\"VolatilePair: This type of pair must have only two tokens when created\\\");\\n        require(_tokens[0] != _tokens[1], \\\"VolatilePair: Token cannot be the same\\\");\\n        (token0, token1) = (_tokens[0], _tokens[1]);\\n        (uint256 _swapfeeRate, uint256 _adminFeeRate) = abi.decode(_data, (uint256, uint256));\\n\\n        require(_swapfeeRate <= MAX_SWAP_FEE, \\\"VolatilePair: SwapFee is greater than the maximum value\\\");\\n        require(_adminFeeRate <= MAX_ADMIN_FEE, \\\"VolatilePair: AdminFee is greater than the maximum value\\\");\\n        (swapFeeRate, adminFeeRate) = (_swapfeeRate, _adminFeeRate);\\n\\n        _initialize(\\n            string(abi.encodePacked(\\\"dForce AMM Volatile - \\\", _tokens[0].callSymbol(), \\\"-\\\", _tokens[1].callSymbol())),\\n            string(abi.encodePacked(\\\"vAMM-\\\", _tokens[0].callSymbol(), \\\"-\\\", _tokens[1].callSymbol()))\\n        );\\n    }\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy\\n     */\\n    modifier lock() {\\n        require(unlocked == 1, \\\"VolatilePair: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict access to only the manager\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == IPairFactory(factory).manager(), \\\"VolatilePair: not manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the tokens in the pair\\n     */\\n    function tokens() external view override returns (address[] memory) {\\n        return _tokens();\\n    }\\n\\n    /**\\n     * @dev Returns the reserves and the timestamp of the last block when they were updated\\n     */\\n    function getReserves()\\n        external\\n        view\\n        override\\n        returns (\\n            uint112,\\n            uint112,\\n            uint32\\n        )\\n    {\\n        return _getReserves();\\n    }\\n\\n    /**\\n     * @dev Returns the real balance of each token in the pair, excluding the admin fee\\n     */\\n    function getRealBalanceOf() external view override returns (uint256, uint256) {\\n        return _getRealBalanceOf();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of output tokens given an input amount of a token\\n     * @param _from The address of the input token\\n     * @param _to The address of the output token\\n     * @param _amount The input amount of the token\\n     */\\n    function getAmountOut(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view override returns (uint256) {\\n        _to;\\n        (uint256 _reserveA, uint256 _reserveB) = _from == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n        return _getAmountOut(_amount, _reserveA, _reserveB);\\n    }\\n\\n    /**\\n     * @dev Returns the tokens in the pair\\n     */\\n    function _tokens() internal view returns (address[] memory _tokenList) {\\n        _tokenList = new address[](2);\\n        _tokenList[0] = token0;\\n        _tokenList[1] = token1;\\n    }\\n\\n    /**\\n     * @dev Returns the reserves and the timestamp of the last block when they were updated\\n     */\\n    function _getReserves()\\n        internal\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    /**\\n     * @dev Returns the real balance of each token in the pair, excluding the admin fee\\n     */\\n    function _getRealBalanceOf() internal view returns (uint256, uint256) {\\n        return (\\n            IERC20(token0).balanceOf(address(this)).sub(totalAdminFee0),\\n            IERC20(token1).balanceOf(address(this)).sub(totalAdminFee1)\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the amount of output tokens given an input amount of a token\\n     * @param _amountIn The input amount of the token\\n     * @param _reserveIn The reserve of the input token\\n     * @param _reserveOut The reserve of the output token\\n     */\\n    function _getAmountOut(\\n        uint256 _amountIn,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) internal view returns (uint256 _amountOut) {\\n        require(_amountIn > 0, \\\"VolatilePair: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(_reserveIn > 0 && _reserveOut > 0, \\\"VolatilePair: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 _amountInWithFee = _amountIn.mul(FEE_DENOMINATOR - swapFeeRate);\\n        uint256 _numerator = _amountInWithFee.mul(_reserveOut);\\n        uint256 _denominator = _reserveIn.mul(FEE_DENOMINATOR).add(_amountInWithFee);\\n        _amountOut = _numerator / _denominator;\\n    }\\n\\n    /**\\n     * @dev Safely transfers tokens\\n     * @param _token The address of the token to transfer\\n     * @param _to The address to transfer the tokens to\\n     * @param _value The amount of tokens to transfer\\n     */\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) private {\\n        (bool _success, bytes memory _data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\\n        require(_success && (_data.length == 0 || abi.decode(_data, (bool))), \\\"VolatilePair: TRANSFER_FAILED\\\");\\n    }\\n\\n    /**\\n     * @dev Updates the reserves and price accumulators for the pair\\n     * @param _balance0 The current balance of token0 in the pair\\n     * @param _balance1 The current balance of token1 in the pair\\n     * @param _reserve0 The current reserve of token0 in the pair\\n     * @param _reserve1 The current reserve of token1 in the pair\\n     */\\n    function _update(\\n        uint256 _balance0,\\n        uint256 _balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(_balance0 <= uint112(-1) && _balance1 <= uint112(-1), \\\"VolatilePair: OVERFLOW\\\");\\n        uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 _timeElapsed = _blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (_timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // Calculate the price accumulators for token0 and token1\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * _timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * _timeElapsed;\\n        }\\n        reserve0 = uint112(_balance0);\\n        reserve1 = uint112(_balance1);\\n        blockTimestampLast = _blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @dev Updates the admin fee for the pair\\n     * @param _amountIn0 The input amount of token0\\n     * @param _amountIn1 The input amount of token1\\n     * @return _swapFee0 The swap fee for token0\\n     * @return _swapFee1 The swap fee for token1\\n     */\\n    function _updateAdminFee(uint256 _amountIn0, uint256 _amountIn1)\\n        internal\\n        returns (uint256 _swapFee0, uint256 _swapFee1)\\n    {\\n        uint256 _totalFee0 = _amountIn0.mul(swapFeeRate).div(FEE_DENOMINATOR);\\n        uint256 _totalFee1 = _amountIn1.mul(swapFeeRate).div(FEE_DENOMINATOR);\\n\\n        {\\n            uint256 _adminFee0 = _totalFee0.mul(adminFeeRate).div(FEE_DENOMINATOR);\\n            uint256 _adminFee1 = _totalFee1.mul(adminFeeRate).div(FEE_DENOMINATOR);\\n\\n            _swapFee0 = _totalFee0 - _adminFee0;\\n            _swapFee1 = _totalFee1 - _adminFee1;\\n\\n            totalAdminFee0 += _adminFee0;\\n            totalAdminFee1 += _adminFee1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint liquidity tokens to the caller and add corresponding reserves\\n     * @param _to The address to mint liquidity tokens to\\n     * @return _liquidity The amount of liquidity tokens minted\\n     */\\n    function mint(address _to) external override lock returns (uint256 _liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = _getReserves(); // gas savings\\n        (uint256 _balance0, uint256 _balance1) = _getRealBalanceOf();\\n        uint256 _amount0 = _balance0.sub(_reserve0);\\n        uint256 _amount1 = _balance1.sub(_reserve1);\\n\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            _liquidity = Math.sqrt(_amount0.mul(_amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            _liquidity = Math.min(_amount0.mul(_totalSupply) / _reserve0, _amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(_liquidity > 0, \\\"VolatilePair: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(_to, _liquidity);\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, _amount0, _amount1); // Emit a Mint event with the amount of token0 and token1 minted\\n    }\\n\\n    /**\\n     * @dev Burn liquidity tokens from the caller and remove corresponding reserves\\n     * @param _to The address to send the tokens to\\n     * @return _amount0 The amount of token0 burned\\n     * @return _amount1 The amount of token1 burned\\n     */\\n    function burn(address _to) external override lock returns (uint256 _amount0, uint256 _amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = _getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        (uint256 _balance0, uint256 _balance1) = _getRealBalanceOf();\\n        uint256 _liquidity = balanceOf[address(this)];\\n\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        _amount0 = _liquidity.mul(_balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        _amount1 = _liquidity.mul(_balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(_amount0 > 0 && _amount1 > 0, \\\"VolatilePair: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), _liquidity);\\n        _safeTransfer(_token0, _to, _amount0);\\n        _safeTransfer(_token1, _to, _amount1);\\n\\n        (_balance0, _balance1) = _getRealBalanceOf();\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, _amount0, _amount1, _to); // Emit a Burn event with the amount of token0 and token1 burned and the address they were sent to\\n    }\\n\\n    /**\\n     * @dev Low-level function for swapping tokens\\n     * @param _amount0Out The amount of token0 to receive\\n     * @param _amount1Out The amount of token1 to receive\\n     * @param _to The address to send the tokens to\\n     * @param _data Additional data with no specified format, sent in call to `_to`\\n     */\\n    function swap(\\n        uint256 _amount0Out,\\n        uint256 _amount1Out,\\n        address _to,\\n        bytes calldata _data\\n    ) external override lock {\\n        require(_amount0Out > 0 || _amount1Out > 0, \\\"VolatilePair: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        (uint112 _reserve0, uint112 _reserve1, ) = _getReserves(); // gas savings\\n        require(_amount0Out < _reserve0 && _amount1Out < _reserve1, \\\"VolatilePair: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 _balance0;\\n        uint256 _balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(_to != _token0 && _to != _token1, \\\"VolatilePair: INVALID_TO\\\");\\n            if (_amount0Out > 0) _safeTransfer(_token0, _to, _amount0Out); // optimistically transfer tokens\\n            if (_amount1Out > 0) _safeTransfer(_token1, _to, _amount1Out); // optimistically transfer tokens\\n            if (_data.length > 0) IPairCallee(_to).hook(msg.sender, _amount0Out, _amount1Out, _data);\\n            (_balance0, _balance1) = _getRealBalanceOf();\\n        }\\n        uint256 _amount0In = _balance0 > _reserve0 - _amount0Out ? _balance0 - (_reserve0 - _amount0Out) : 0;\\n        uint256 _amount1In = _balance1 > _reserve1 - _amount1Out ? _balance1 - (_reserve1 - _amount1Out) : 0;\\n        require(_amount0In > 0 || _amount1In > 0, \\\"VolatilePair: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 _balance0Adjusted = _balance0.mul(FEE_DENOMINATOR).sub(_amount0In.mul(swapFeeRate));\\n            uint256 _balance1Adjusted = _balance1.mul(FEE_DENOMINATOR).sub(_amount1In.mul(swapFeeRate));\\n            require(\\n                _balance0Adjusted.mul(_balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(FEE_DENOMINATOR**2),\\n                \\\"VolatilePair: K\\\"\\n            );\\n\\n            //update totalAdminFee and balance\\n            (uint256 _swapFee0, uint256 _swapFee1) = _updateAdminFee(_amount0In, _amount1In);\\n\\n            uint256[] memory _swapFees = new uint256[](2);\\n            (_swapFees[0], _swapFees[1]) = (_swapFee0, _swapFee1);\\n            emit SwapFee(_tokens(), _swapFees);\\n        }\\n\\n        (_balance0, _balance1) = _getRealBalanceOf();\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n\\n        emit Swap(msg.sender, _amount0In, _amount1In, _amount0Out, _amount1Out, _to);\\n    }\\n\\n    /**\\n     * @dev Skim the excess tokens from the contract and send them to the specified address\\n     * @param _to The address to send the excess tokens to\\n     */\\n    function skim(address _to) external override lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        (uint256 _balance0, uint256 _balance1) = _getRealBalanceOf();\\n        _safeTransfer(_token0, _to, _balance0.sub(reserve0)); // Transfer the excess token0 balance to the specified address\\n        _safeTransfer(_token1, _to, _balance1.sub(reserve1)); // Transfer the excess token1 balance to the specified address\\n    }\\n\\n    /**\\n     * @dev Update reserves to match balances\\n     */\\n    function sync() external override lock {\\n        (uint256 _balance0, uint256 _balance1) = _getRealBalanceOf();\\n        _update(_balance0, _balance1, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @dev Claim admin fees\\n     * @return _adminFees An array of admin fees\\n     */\\n    function claimFees() external override returns (uint256[] memory _adminFees) {\\n        address _manager = IPairFactory(factory).manager();\\n        _adminFees = new uint256[](2);\\n\\n        (_adminFees[0], _adminFees[1]) = (totalAdminFee0, totalAdminFee1);\\n        (totalAdminFee0, totalAdminFee1) = (0, 0);\\n\\n        _safeTransfer(token0, _manager, _adminFees[0]);\\n        _safeTransfer(token1, _manager, _adminFees[1]);\\n        emit ClaimFees(token0, token1, _adminFees[0], _adminFees[1]);\\n    }\\n\\n    /**\\n     * @dev Set swap fee rate\\n     * @param _swapFeeRate The new swap fee rate\\n     */\\n    function setSwapFeeRate(uint256 _swapFeeRate) external onlyManager {\\n        require(_swapFeeRate <= MAX_SWAP_FEE, \\\"VolatilePair: SwapFee is greater than the maximum value\\\");\\n        uint256 _old = swapFeeRate;\\n        swapFeeRate = _swapFeeRate;\\n        emit SetSwapFeeRate(_old, _swapFeeRate);\\n    }\\n\\n    /**\\n     * @dev Set admin fee rate\\n     * @param _adminFeeRate The new admin fee rate\\n     */\\n    function setAdminFeeRate(uint256 _adminFeeRate) external onlyManager {\\n        require(_adminFeeRate <= MAX_ADMIN_FEE, \\\"VolatilePair: AdminFee is greater than the maximum value\\\");\\n        uint256 _old = adminFeeRate;\\n        adminFeeRate = _adminFeeRate;\\n        emit SetAdminFeeRate(_old, _adminFeeRate);\\n    }\\n}\\n\",\"keccak256\":\"0x11971191bfcd9253ec01c1f4c2be032cdac3cdd060fd7df3252b26c9e6e29aed\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IPair {\\n    function initialize(address[] memory _tokens, bytes memory _data) external;\\n\\n    function PAIR_TYPE() external view returns (uint8);\\n\\n    function AUTH() external view returns (bool);\\n\\n    function tokens() external view returns (address[] memory);\\n\\n    function getAmountOut(address _from, address _to, uint256 _amount) external view returns (uint256);\\n}\\n\\ninterface IVolatilePair is IPair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n    function mint(address _to) external returns (uint256 _liquidity);\\n\\n    function burn(address _to) external returns (uint256 _amount0, uint256 _amount1);\\n\\n    function swap(uint256 _amount0Out, uint256 _amount1Out, address _to, bytes calldata _data) external;\\n\\n    function getRealBalanceOf() external view returns (uint256, uint256);\\n\\n    function skim(address _to) external;\\n\\n    function sync() external;\\n\\n    function claimFees() external returns (uint256[] memory _adminFees);\\n}\\n\\ninterface IStablePair is IPair {\\n    function lpToken() external view returns (address);\\n\\n    function calculateTokenAmount(\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts,\\n        bool _deposit\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidityOneToken(address _token, uint256 _liquidity) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(\\n        address[] calldata _tokens,\\n        uint256 _amount\\n    ) external view returns (uint256[] memory);\\n\\n    function addLiquidity(\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts,\\n        uint256 _minToMint,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 _amount,\\n        address[] calldata _tokens,\\n        uint256[] calldata _minAmounts,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 _tokenAmount,\\n        address _token,\\n        uint256 _minAmount,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts,\\n        uint256 _maxBurnAmount,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external returns (uint256);\\n\\n    function swap(\\n        address _tokenFrom,\\n        address _tokenTo,\\n        uint256 _dx,\\n        uint256 _minDy,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7db62d42bf0d1e2abbe07017eb7923ecb0cb38e2805cc7f25d5bbae05a17da32\",\"license\":\"MIT\"},\"contracts/interface/IPairCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IPairCallee {\\n    function hook(address sender, uint256 amountOut0, uint256 amountOut1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9cbc193e51173e65f9b7fad65705a06211afe0023bed8208984afc49bd61796e\",\"license\":\"MIT\"},\"contracts/interface/IPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0c874f62a6ebf2432f9170ce25092c8dd235ee53e7030b9896c8e8d907f509e0\",\"license\":\"MIT\"},\"contracts/interface/IPairFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IPairFactory {\\n    function allPairsLength() external view returns (uint256);\\n\\n    function isPair(address _pair) external view returns (bool);\\n\\n    function manager() external view returns (address);\\n\\n    function getPairAddress(address[] memory _tokens, uint8 _type) external view returns (address);\\n\\n    function pairTypeValues() external view returns (address[] memory);\\n\\n    function atPairType(uint256 _index) external view returns (address);\\n\\n    function createPair(address[] memory _tokens, uint8 _pairType, bytes memory _data) external returns (address _pair);\\n}\\n\",\"keccak256\":\"0x475b64a893424766e3e54d1fb938a12d63403e6d597939dbc830a97dd49936b3\",\"license\":\"MIT\"},\"contracts/lib/PairERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../interface/IPairERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title PairERC20\\n * @dev Abstract contract that implements the IPairERC20 interface and provides basic ERC20 functionality.\\n */\\nabstract contract PairERC20 is IPairERC20 {\\n    using SafeMath for uint256;\\n\\n    string public override name;\\n    string public override symbol;\\n    uint8 public constant override decimals = 18;\\n\\n    uint256 public override totalSupply;\\n\\n    mapping(address => uint256) public override balanceOf;\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 chainId, uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        0x576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf;\\n\\n    mapping(address => uint256) public override nonces;\\n\\n    /**\\n     * @dev Initializes the contract by setting the name and symbol of the token, as well as the domain separator for the permit function.\\n     * @param _name The name of the token.\\n     * @param _symbol The symbol of the token.\\n     */\\n    function _initialize(string memory _name, string memory _symbol) internal {\\n        name = _name;\\n        symbol = _symbol;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens and adds them to the total supply.\\n     * @param to The address to which the new tokens will be minted.\\n     * @param value The amount of tokens to be minted.\\n     */\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /**\\n     * @dev Burns tokens and removes them from the total supply.\\n     * @param from The address from which the tokens will be burned.\\n     * @param value The amount of tokens to be burned.\\n     */\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Approves a spender to transfer tokens on behalf of the owner.\\n     * @param owner The address of the owner of the tokens.\\n     * @param spender The address of the spender to be approved.\\n     * @param value The amount of tokens to be approved for transfer.\\n     */\\n    function _approve(address owner, address spender, uint256 value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from one address to another.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param value The amount of tokens to be transferred.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal virtual {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Approves a spender to transfer tokens on behalf of the owner.\\n     * @param spender The address of the spender to be approved.\\n     * @param value The amount of tokens to be approved for transfer.\\n     * @return A boolean indicating whether the approval was successful or not.\\n     */\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from the caller's address to another address.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean indicating whether the transfer was successful or not.\\n     */\\n    function transfer(address to, uint256 value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from one address to another, on behalf of the owner.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean indicating whether the transfer was successful or not.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external override returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approves a spender to transfer tokens on behalf of the owner, using a permit signature.\\n     * @param owner The address of the owner of the tokens.\\n     * @param spender The address of the spender to be approved.\\n     * @param value The amount of tokens to be approved for transfer.\\n     * @param deadline The deadline by which the permit must be used.\\n     * @param v The recovery byte of the permit signature.\\n     * @param r The R component of the permit signature.\\n     * @param s The S component of the permit signature.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"PairERC20: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, _getChainId(), value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"PairERC20: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x7c58733fc1be703ee6cb33f264d596f54270cd515cc5a6d993b574c1a2979a0c\",\"license\":\"MIT\"},\"contracts/utils/ERC20Call.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nlibrary ERC20Call {\\n    /**\\n     * @dev Get the symbol of the ERC20 token\\n     * @param _token The address of the ERC20 token\\n     * @return _symbol The symbol of the ERC20 token\\n     */\\n    function callSymbol(address _token) internal view returns (string memory _symbol) {\\n        if (_token != address(0)) {\\n            (bool _success, bytes memory _res) = _token.staticcall(abi.encodeWithSignature(\\\"symbol()\\\"));\\n            if (_success)\\n                _symbol = _res.length == 32 ? bytes32ToString(abi.decode(_res, (bytes32))) : abi.decode(_res, (string));\\n        }\\n    }\\n\\n    /**\\n     * @dev Convert bytes32 to string\\n     * @param _bytes32 The bytes32 to be converted\\n     * @return _result The converted string\\n     */\\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory _result) {\\n        uint8 _length = 0;\\n        while (_bytes32[_length] != 0 && _length < 32) {\\n            _length++;\\n        }\\n        assembly {\\n            _result := mload(0x40)\\n            // new \\\"memory end\\\" including padding (the string isn't larger than 32 bytes)\\n            mstore(0x40, add(_result, 0x40))\\n            // store length in memory\\n            mstore(_result, _length)\\n            // write actual data\\n            mstore(add(_result, 0x20), _bytes32)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdc87dda1a63529018dbf6df517b7974d8c90e3da42df62a15c5c9a5f168911f7\",\"license\":\"MIT\"},\"contracts/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the minimum value between two uints.\\n     */\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * for computing the square root of a given uint.\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00bc8c4757fc148e65c2d1689b1635fca6b8d25a5694da24deafe928963eaf2d\",\"license\":\"MIT\"},\"contracts/utils/UQ112x112.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2 ** 112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xfd881d99b974bde81f038e08eb15a4fb878267eb915f05055f94b1143053ef24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613276806100206000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c806389afcb4411610146578063d1154ff0116100c3578063dd62ed3e11610087578063dd62ed3e1461071a578063e69e24a814610748578063f3de036214610712578063f9f0f20d1461086e578063ffc91bbd14610876578063fff6cae91461087e5761025e565b8063d1154ff014610694578063d21220a7146106b1578063d294f093146106b9578063d505accf146106c1578063d73792a9146107125761025e565b8063ab3d85441161010a578063ab3d854414610639578063b36a5af314610641578063ba9a7a561461065e578063bc25cf7714610666578063c45a01551461068c5761025e565b806389afcb44146105665780638cece527146105a557806395d89b41146105ad5780639d63848a146105b5578063a9059cbb1461060d5761025e565b8063313ce567116101df5780635909c0d5116101a35780635909c0d5146104dc5780635a3d5493146104e45780636a627842146104ec57806370a08231146105125780637464fc3d146105385780637ecebe00146105405761025e565b8063313ce567146104705780633644e5151461048e5780633a04801d146104965780634aa066521461049e578063508d1e6b146104d45761025e565b80630dfe1681116102265780630dfe1681146103ec5780630ef552131461041057806318160ddd1461042a57806323b872dd1461043257806330adf81f146104685761025e565b8063022c0d9f1461026357806306fdde03146102ef5780630902f1ac1461036c578063095ea7b3146103a45780630a5623fb146103e4575b600080fd5b6102ed6004803603608081101561027957600080fd5b8135916020810135916001600160a01b036040830135169190810190608081016060820135600160201b8111156102af57600080fd5b8201836020820111156102c157600080fd5b803590602001918460018302840111600160201b831117156102e257600080fd5b509092509050610886565b005b6102f7610e14565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610331578181015183820152602001610319565b50505050905090810190601f16801561035e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610374610ea1565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103d0600480360360408110156103ba57600080fd5b506001600160a01b038135169060200135610eb9565b604080519115158252519081900360200190f35b6103d0610ed0565b6103f4610ed5565b604080516001600160a01b039092168252519081900360200190f35b610418610ee4565b60408051918252519081900360200190f35b610418610eea565b6103d06004803603606081101561044857600080fd5b506001600160a01b03813581169160208101359091169060400135610ef0565b610418610f84565b610478610fa8565b6040805160ff9092168252519081900360200190f35b610418610fad565b610418610fb3565b610418600480360360608110156104b457600080fd5b506001600160a01b03813581169160208101359091169060400135610fb9565b610478611033565b610418611038565b61041861103e565b6104186004803603602081101561050257600080fd5b50356001600160a01b0316611044565b6104186004803603602081101561052857600080fd5b50356001600160a01b0316611200565b610418611212565b6104186004803603602081101561055657600080fd5b50356001600160a01b0316611218565b61058c6004803603602081101561057c57600080fd5b50356001600160a01b031661122a565b6040805192835260208301919091528051918290030190f35b6104186113d5565b6102f76113db565b6105bd611433565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105f95781810151838201526020016105e1565b505050509050019250505060405180910390f35b6103d06004803603604081101561062357600080fd5b506001600160a01b038135169060200135611442565b61041861144f565b6102ed6004803603602081101561065757600080fd5b5035611457565b6104186115b4565b6102ed6004803603602081101561067c57600080fd5b50356001600160a01b03166115ba565b6103f4611688565b6102ed600480360360208110156106aa57600080fd5b5035611697565b6103f46117f3565b6105bd611802565b6102ed600480360360e08110156106d757600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356119d4565b610418611bf5565b6104186004803603604081101561073057600080fd5b506001600160a01b0381358116916020013516611bfe565b6102ed6004803603604081101561075e57600080fd5b810190602081018135600160201b81111561077857600080fd5b82018360208201111561078a57600080fd5b803590602001918460208302840111600160201b831117156107ab57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156107fa57600080fd5b82018360208201111561080c57600080fd5b803590602001918460018302840111600160201b8311171561082d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611c1b945050505050565b61058c6120b8565b6104186120cb565b6102ed6120d1565b600f546001146108d4576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f55841515806108e75750600084115b6109225760405162461bcd60e51b81526004018080602001828103825260288152602001806131596028913960400191505060405180910390fd5b60008061092d612161565b5091509150816001600160701b0316871080156109525750806001600160701b031686105b61098d5760405162461bcd60e51b815260040180806020018281038252602481526020018061304e6024913960400191505060405180910390fd5b600954600a5460009182916001600160a01b039182169190811690891682148015906109cb5750806001600160a01b0316896001600160a01b031614155b610a1c576040805162461bcd60e51b815260206004820152601860248201527f566f6c6174696c65506169723a20494e56414c49445f544f0000000000000000604482015290519081900360640190fd5b8a15610a2d57610a2d828a8d61218b565b8915610a3e57610a3e818a8c61218b565b8615610af057886001600160a01b0316639a7bff79338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610ad757600080fd5b505af1158015610aeb573d6000803e3d6000fd5b505050505b610af8612325565b909450925060009150506001600160701b0385168a90038311610b1c576000610b2b565b89856001600160701b03160383035b9050600089856001600160701b0316038311610b48576000610b57565b89856001600160701b03160383035b90506000821180610b685750600081115b610ba35760405162461bcd60e51b81526004018080602001828103825260278152602001806130726027913960400191505060405180910390fd5b6000610bd2610bbd601054856123ff90919063ffffffff16565b610bcc876402540be4006123ff565b9061245f565b90506000610bee610bbd601054856123ff90919063ffffffff16565b9050610c1968056bc75e2d63100000610c136001600160701b038b8116908b166123ff565b906123ff565b610c2383836123ff565b1015610c68576040805162461bcd60e51b815260206004820152600f60248201526e566f6c6174696c65506169723a204b60881b604482015290519081900360640190fd5b600080610c7586866124bc565b604080516002808252606080830184529496509294509190602083019080368337019050509050828282600081518110610cab57fe5b6020026020010183600181518110610cbf57fe5b6020908102919091010191909152527f5dadb1eefca890521b338a7cdaa3dd8b1397864c6c10ccd091a282dc391282eb610cf761256b565b82604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610d3c578181015183820152602001610d24565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610d7b578181015183820152602001610d63565b5050505090500194505050505060405180910390a15050505050610d9d612325565b9094509250610dae848488886125f3565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600f55505050505050505050565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610e995780601f10610e6e57610100808354040283529160200191610e99565b820191906000526020600020905b815481529060010190602001808311610e7c57829003601f168201915b505050505081565b6000806000610eae612161565b925092509250909192565b6000610ec63384846127b5565b5060015b92915050565b600081565b6009546001600160a01b031681565b60135481565b60035481565b6001600160a01b038316600090815260056020908152604080832033845290915281205460001914610f6f576001600160a01b0384166000908152600560209081526040808320338452909152902054610f4a908361245f565b6001600160a01b03851660009081526005602090815260408083203384529091529020555b610f7a848484612817565b5060019392505050565b7f576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf81565b601281565b60065481565b60105481565b600954600090819081906001600160a01b03878116911614610ff057600b546001600160701b03600160701b820481169116611008565b600b546001600160701b0380821691600160701b9004165b6001600160701b031691506001600160701b031691506110298483836128c5565b9695505050505050565b600181565b600c5481565b600d5481565b6000600f54600114611094576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f819055806110a4612161565b50915091506000806110b4612325565b909250905060006110ce836001600160701b03871661245f565b905060006110e5836001600160701b03871661245f565b6003549091508061111c576111086103e8610bcc61110386866123ff565b6129b0565b975061111760006103e8612a02565b61115f565b61115c6001600160701b03881661113385846123ff565b8161113a57fe5b046001600160701b03881661114f85856123ff565b8161115657fe5b04612a8d565b97505b6000881161119e5760405162461bcd60e51b815260040180806020018281038252602b81526020018061312e602b913960400191505060405180910390fd5b6111a88989612a02565b6111b4858589896125f3565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600f55509395945050505050565b60046020526000908152604090205481565b600e5481565b60076020526000908152604090205481565b600080600f5460011461127b576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f8190558061128b612161565b50600954600a549294509092506001600160a01b0390811691166000806112b0612325565b3060009081526004602052604090205460035492945090925090806112d583866123ff565b816112dc57fe5b049950806112ea83856123ff565b816112f157fe5b04985060008a1180156113045750600089115b61133f5760405162461bcd60e51b815260040180806020018281038252602b815260200180613216602b913960400191505060405180910390fd5b6113493083612aa3565b611354868c8c61218b565b61135f858c8b61218b565b611367612325565b909450925061137884848a8a6125f3565b604080518b8152602081018b905281516001600160a01b038e169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050506001600f81905550915091565b60115481565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610e995780601f10610e6e57610100808354040283529160200191610e99565b606061143d61256b565b905090565b6000610ec6338484612817565b6305f5e10081565b600860009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a557600080fd5b505afa1580156114b9573d6000803e3d6000fd5b505050506040513d60208110156114cf57600080fd5b50516001600160a01b03163314611529576040805162461bcd60e51b81526020600482015260196024820152782b37b630ba34b632a830b4b91d103737ba1036b0b730b3b2b960391b604482015290519081900360640190fd5b6402540be40081111561156d5760405162461bcd60e51b81526004018080602001828103825260388152602001806131a76038913960400191505060405180910390fd5b6011805490829055604080518281526020810184905281517fc49b03da3444d692820082f74621517924ca78c599ebbdc46c2d7ec998eaba76929181900390910190a15050565b6103e881565b600f54600114611608576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f819055600954600a546001600160a01b03918216929116908061162d612325565b600b54919350915061165690859087906116519086906001600160701b031661245f565b61218b565b600b5461167c9084908790611651908590600160701b90046001600160701b031661245f565b50506001600f55505050565b6008546001600160a01b031681565b600860009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e557600080fd5b505afa1580156116f9573d6000803e3d6000fd5b505050506040513d602081101561170f57600080fd5b50516001600160a01b03163314611769576040805162461bcd60e51b81526020600482015260196024820152782b37b630ba34b632a830b4b91d103737ba1036b0b730b3b2b960391b604482015290519081900360640190fd5b6305f5e1008111156117ac5760405162461bcd60e51b81526004018080602001828103825260378152602001806131df6037913960400191505060405180910390fd5b6010805490829055604080518281526020810184905281517f2f5af8c6eb9240361dbd88ac5f4818740d38a4f12070bd75460a97d61b726c39929181900390910190a15050565b600a546001600160a01b031681565b60606000600860009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d602081101561187e57600080fd5b50516040805160028082526060820183529293509190602083019080368337019050509150601254601354836000815181106118b657fe5b60200260200101846001815181106118ca57fe5b6020908102919091010191909152526000601381905560128190556009548351611912926001600160a01b0390921691849186919061190557fe5b602002602001015161218b565b600a548251611934916001600160a01b03169083908590600190811061190557fe5b600954600a5483517f1c1305802190d35d1b91e92c6043982b3398ae34849c43d2c2f17e61ac67f040926001600160a01b03908116921690859060009061197757fe5b60200260200101518560018151811061198c57fe5b602002602001015160405180856001600160a01b03168152602001846001600160a01b0316815260200183815260200182815260200194505050505060405180910390a15090565b42841015611a1e576040805162461bcd60e51b815260206004820152601260248201527114185a5c915490cc8c0e881156141254915160721b604482015290519081900360640190fd5b6006546000907f576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf8989611a4f612b34565b6001600160a01b03808e1660009081526007602090815260408083208054600180820190925582518085019a909a5297851689830152959093166060880152608087019390935260a086018d905260c086019490945260e08086018c9052815180870390910181526101008601825280519083012061190160f01b6101208701526101228601969096526101428086019690965280518086039096018652610162850180825286519683019690962095849052610182850180825286905260ff8a166101a28601526101c285018990526101e2850188905251949550919390926102028082019392601f1981019281900390910190855afa158015611b58573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611b8e5750886001600160a01b0316816001600160a01b0316145b611bdf576040805162461bcd60e51b815260206004820152601c60248201527f5061697245524332303a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b611bea8989896127b5565b505050505050505050565b6402540be40081565b600560209081526000928352604080842090915290825290205481565b600054610100900460ff1680611c345750611c34612b38565b80611c42575060005460ff16155b611c7d5760405162461bcd60e51b815260040180806020018281038252602e8152602001806130df602e913960400191505060405180910390fd5b600054610100900460ff16158015611ca8576000805460ff1961ff0019909116610100171660011790555b600880546001600160a01b031916331790556001600f558251600214611cff5760405162461bcd60e51b81526004018080602001828103825260468152602001806130996046913960600191505060405180910390fd5b82600181518110611d0c57fe5b60200260200101516001600160a01b031683600081518110611d2a57fe5b60200260200101516001600160a01b03161415611d785760405162461bcd60e51b81526004018080602001828103825260268152602001806131816026913960400191505060405180910390fd5b82600081518110611d8557fe5b602002602001015183600181518110611d9a57fe5b602090810291909101810151600a80546001600160a01b039283166001600160a01b031991821617909155600980549490921693169290921790915582516000918291908501906040811015611def57600080fd5b50805160209091015190925090506305f5e100821115611e405760405162461bcd60e51b81526004018080602001828103825260378152602001806131df6037913960400191505060405180910390fd5b6402540be400811115611e845760405162461bcd60e51b81526004018080602001828103825260388152602001806131a76038913960400191505060405180910390fd5b60118190556010829055845161209f90611eb9908790600090611ea357fe5b60200260200101516001600160a01b0316612b49565b611ec987600181518110611ea357fe5b6040516020018080750322337b931b29020a6a6902b37b630ba34b6329016960551b81525060160183805190602001908083835b60208310611f1c5780518252601f199092019160209182019101611efd565b6001836020036101000a03801982511681845116808217855250505050505090500180602d60f81b81525060010182805190602001908083835b60208310611f755780518252601f199092019160209182019101611f56565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052611fba87600081518110611ea357fe5b611fca88600181518110611ea357fe5b60405160200180806476414d4d2d60d81b81525060050183805190602001908083835b6020831061200c5780518252601f199092019160209182019101611fed565b6001836020036101000a03801982511681845116808217855250505050505090500180602d60f81b81525060010182805190602001908083835b602083106120655780518252601f199092019160209182019101612046565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052612d2a565b505080156120b3576000805461ff00191690555b505050565b6000806120c3612325565b915091509091565b60125481565b600f5460011461211f576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f8190558061212f612325565b600b54919350915061215890839083906001600160701b0380821691600160701b9004166125f3565b50506001600f55565b600b546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b602083106122385780518252601f199092019160209182019101612219565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461229a576040519150601f19603f3d011682016040523d82523d6000602084013e61229f565b606091505b50915091508180156122cd5750805115806122cd57508080602001905160208110156122ca57600080fd5b50515b61231e576040805162461bcd60e51b815260206004820152601d60248201527f566f6c6174696c65506169723a205452414e534645525f4641494c4544000000604482015290519081900360640190fd5b5050505050565b601254600954604080516370a0823160e01b8152306004820152905160009384936123af9391926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561237d57600080fd5b505afa158015612391573d6000803e3d6000fd5b505050506040513d60208110156123a757600080fd5b50519061245f565b601354600a54604080516370a0823160e01b815230600482015290516120c393926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561237d57600080fd5b60008261240e57506000610eca565b8282028284828161241b57fe5b04146124585760405162461bcd60e51b815260040180806020018281038252602181526020018061310d6021913960400191505060405180910390fd5b9392505050565b6000828211156124b6576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008060006124e56402540be4006124df601054886123ff90919063ffffffff16565b90612e69565b905060006125076402540be4006124df601054886123ff90919063ffffffff16565b905060006125296402540be4006124df601154866123ff90919063ffffffff16565b9050600061254b6402540be4006124df601154866123ff90919063ffffffff16565b601280548401905560138054820190559190930397910395509350505050565b6040805160028082526060808301845292602083019080368337505060095482519293506001600160a01b0316918391506000906125a557fe5b6001600160a01b039283166020918202929092010152600a548251911690829060019081106125d057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505090565b6001600160701b03841180159061261157506001600160701b038311155b61265b576040805162461bcd60e51b8152602060048201526016602482015275566f6c6174696c65506169723a204f564552464c4f5760501b604482015290519081900360640190fd5b600b5463ffffffff42811691600160e01b9004811682039081161580159061268b57506001600160701b03841615155b801561269f57506001600160701b03831615155b1561270a578063ffffffff166126c7856126b886612ed0565b6001600160e01b031690612ee2565b600c80546001600160e01b03929092169290920201905563ffffffff81166126f2846126b887612ed0565b600d80546001600160e01b0392909216929092020190555b600b80546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260056020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831660009081526004602052604090205461283a908261245f565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546128699082612eff565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008084116129055760405162461bcd60e51b81526004018080602001828103825260278152602001806130726027913960400191505060405180910390fd5b6000831180156129155750600082115b6129505760405162461bcd60e51b815260040180806020018281038252602481526020018061304e6024913960400191505060405180910390fd5b600061296e6010546402540be40003866123ff90919063ffffffff16565b9050600061297c82856123ff565b9050600061299983612993886402540be4006123ff565b90612eff565b90508082816129a457fe5b04979650505050505050565b600060038211156129f3575080600160028204015b818110156129ed578091506002818285816129dc57fe5b0401816129e557fe5b0490506129c5565b506129fd565b81156129fd575060015b919050565b600354612a0f9082612eff565b6003556001600160a01b038216600090815260046020526040902054612a359082612eff565b6001600160a01b03831660008181526004602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310612a9c5781612458565b5090919050565b6001600160a01b038216600090815260046020526040902054612ac6908261245f565b6001600160a01b038316600090815260046020526040902055600354612aec908261245f565b6003556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b4690565b6000612b4330612f59565b15905090565b60606001600160a01b038216156129fd5760408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b178152915181516000936060936001600160a01b038816939092909182918083835b60208310612bc05780518252601f199092019160209182019101612ba1565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114612c20576040519150601f19603f3d011682016040523d82523d6000602084013e612c25565b606091505b50915091508115612d23578051602014612d0157808060200190516020811015612c4e57600080fd5b8101908080516040519392919084600160201b821115612c6d57600080fd5b908301906020820185811115612c8257600080fd5b8251600160201b811182820188101715612c9b57600080fd5b82525081516020918201929091019080838360005b83811015612cc8578181015183820152602001612cb0565b50505050905090810190601f168015612cf55780820380516001836020036101000a031916815260200191505b50604052505050612d20565b612d20818060200190516020811015612d1957600080fd5b5051612f5f565b92505b5050919050565b8151612d3d906001906020850190612fba565b508051612d51906002906020840190612fba565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60016040518082805460018160011615610100020316600290048015612dd05780601f10612dae576101008083540402835291820191612dd0565b820191906000526020600020905b815481529060010190602001808311612dbc575b50506040805191829003822082820190915260018252603160f81b60209092019190915291507fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69050612e21612b34565b6040805160208082019690965280820194909452606084019290925260808301523060a0808401919091528151808403909101815260c0909201905280519101206006555050565b6000808211612ebf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612ec857fe5b049392505050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b03841681612ec857fe5b600082820183811015612458576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3b151590565b606060005b828160ff1660208110612f7357fe5b1a60f81b6001600160f81b03191615801590612f92575060208160ff16105b15612f9f57600101612f64565b60405191506040820160405280825282602083015250919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ffb57805160ff1916838001178555613028565b82800160010185558215613028579182015b8281111561302857825182559160200191906001019061300d565b50613034929150613038565b5090565b5b80821115613034576000815560010161303956fe566f6c6174696c65506169723a20494e53554646494349454e545f4c4951554944495459566f6c6174696c65506169723a20494e53554646494349454e545f494e5055545f414d4f554e54566f6c6174696c65506169723a20546869732074797065206f662070616972206d7573742068617665206f6e6c792074776f20746f6b656e73207768656e2063726561746564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77566f6c6174696c65506169723a20494e53554646494349454e545f4c49515549444954595f4d494e544544566f6c6174696c65506169723a20494e53554646494349454e545f4f55545055545f414d4f554e54566f6c6174696c65506169723a20546f6b656e2063616e6e6f74206265207468652073616d65566f6c6174696c65506169723a2041646d696e4665652069732067726561746572207468616e20746865206d6178696d756d2076616c7565566f6c6174696c65506169723a20537761704665652069732067726561746572207468616e20746865206d6178696d756d2076616c7565566f6c6174696c65506169723a20494e53554646494349454e545f4c49515549444954595f4255524e4544a26469706673582212204696c37f8afbb54acaed2b16d41e5b4dfbc7a243a0dba2990dc7e6320c7fad9964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c806389afcb4411610146578063d1154ff0116100c3578063dd62ed3e11610087578063dd62ed3e1461071a578063e69e24a814610748578063f3de036214610712578063f9f0f20d1461086e578063ffc91bbd14610876578063fff6cae91461087e5761025e565b8063d1154ff014610694578063d21220a7146106b1578063d294f093146106b9578063d505accf146106c1578063d73792a9146107125761025e565b8063ab3d85441161010a578063ab3d854414610639578063b36a5af314610641578063ba9a7a561461065e578063bc25cf7714610666578063c45a01551461068c5761025e565b806389afcb44146105665780638cece527146105a557806395d89b41146105ad5780639d63848a146105b5578063a9059cbb1461060d5761025e565b8063313ce567116101df5780635909c0d5116101a35780635909c0d5146104dc5780635a3d5493146104e45780636a627842146104ec57806370a08231146105125780637464fc3d146105385780637ecebe00146105405761025e565b8063313ce567146104705780633644e5151461048e5780633a04801d146104965780634aa066521461049e578063508d1e6b146104d45761025e565b80630dfe1681116102265780630dfe1681146103ec5780630ef552131461041057806318160ddd1461042a57806323b872dd1461043257806330adf81f146104685761025e565b8063022c0d9f1461026357806306fdde03146102ef5780630902f1ac1461036c578063095ea7b3146103a45780630a5623fb146103e4575b600080fd5b6102ed6004803603608081101561027957600080fd5b8135916020810135916001600160a01b036040830135169190810190608081016060820135600160201b8111156102af57600080fd5b8201836020820111156102c157600080fd5b803590602001918460018302840111600160201b831117156102e257600080fd5b509092509050610886565b005b6102f7610e14565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610331578181015183820152602001610319565b50505050905090810190601f16801561035e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610374610ea1565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103d0600480360360408110156103ba57600080fd5b506001600160a01b038135169060200135610eb9565b604080519115158252519081900360200190f35b6103d0610ed0565b6103f4610ed5565b604080516001600160a01b039092168252519081900360200190f35b610418610ee4565b60408051918252519081900360200190f35b610418610eea565b6103d06004803603606081101561044857600080fd5b506001600160a01b03813581169160208101359091169060400135610ef0565b610418610f84565b610478610fa8565b6040805160ff9092168252519081900360200190f35b610418610fad565b610418610fb3565b610418600480360360608110156104b457600080fd5b506001600160a01b03813581169160208101359091169060400135610fb9565b610478611033565b610418611038565b61041861103e565b6104186004803603602081101561050257600080fd5b50356001600160a01b0316611044565b6104186004803603602081101561052857600080fd5b50356001600160a01b0316611200565b610418611212565b6104186004803603602081101561055657600080fd5b50356001600160a01b0316611218565b61058c6004803603602081101561057c57600080fd5b50356001600160a01b031661122a565b6040805192835260208301919091528051918290030190f35b6104186113d5565b6102f76113db565b6105bd611433565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105f95781810151838201526020016105e1565b505050509050019250505060405180910390f35b6103d06004803603604081101561062357600080fd5b506001600160a01b038135169060200135611442565b61041861144f565b6102ed6004803603602081101561065757600080fd5b5035611457565b6104186115b4565b6102ed6004803603602081101561067c57600080fd5b50356001600160a01b03166115ba565b6103f4611688565b6102ed600480360360208110156106aa57600080fd5b5035611697565b6103f46117f3565b6105bd611802565b6102ed600480360360e08110156106d757600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356119d4565b610418611bf5565b6104186004803603604081101561073057600080fd5b506001600160a01b0381358116916020013516611bfe565b6102ed6004803603604081101561075e57600080fd5b810190602081018135600160201b81111561077857600080fd5b82018360208201111561078a57600080fd5b803590602001918460208302840111600160201b831117156107ab57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156107fa57600080fd5b82018360208201111561080c57600080fd5b803590602001918460018302840111600160201b8311171561082d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611c1b945050505050565b61058c6120b8565b6104186120cb565b6102ed6120d1565b600f546001146108d4576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f55841515806108e75750600084115b6109225760405162461bcd60e51b81526004018080602001828103825260288152602001806131596028913960400191505060405180910390fd5b60008061092d612161565b5091509150816001600160701b0316871080156109525750806001600160701b031686105b61098d5760405162461bcd60e51b815260040180806020018281038252602481526020018061304e6024913960400191505060405180910390fd5b600954600a5460009182916001600160a01b039182169190811690891682148015906109cb5750806001600160a01b0316896001600160a01b031614155b610a1c576040805162461bcd60e51b815260206004820152601860248201527f566f6c6174696c65506169723a20494e56414c49445f544f0000000000000000604482015290519081900360640190fd5b8a15610a2d57610a2d828a8d61218b565b8915610a3e57610a3e818a8c61218b565b8615610af057886001600160a01b0316639a7bff79338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610ad757600080fd5b505af1158015610aeb573d6000803e3d6000fd5b505050505b610af8612325565b909450925060009150506001600160701b0385168a90038311610b1c576000610b2b565b89856001600160701b03160383035b9050600089856001600160701b0316038311610b48576000610b57565b89856001600160701b03160383035b90506000821180610b685750600081115b610ba35760405162461bcd60e51b81526004018080602001828103825260278152602001806130726027913960400191505060405180910390fd5b6000610bd2610bbd601054856123ff90919063ffffffff16565b610bcc876402540be4006123ff565b9061245f565b90506000610bee610bbd601054856123ff90919063ffffffff16565b9050610c1968056bc75e2d63100000610c136001600160701b038b8116908b166123ff565b906123ff565b610c2383836123ff565b1015610c68576040805162461bcd60e51b815260206004820152600f60248201526e566f6c6174696c65506169723a204b60881b604482015290519081900360640190fd5b600080610c7586866124bc565b604080516002808252606080830184529496509294509190602083019080368337019050509050828282600081518110610cab57fe5b6020026020010183600181518110610cbf57fe5b6020908102919091010191909152527f5dadb1eefca890521b338a7cdaa3dd8b1397864c6c10ccd091a282dc391282eb610cf761256b565b82604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610d3c578181015183820152602001610d24565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610d7b578181015183820152602001610d63565b5050505090500194505050505060405180910390a15050505050610d9d612325565b9094509250610dae848488886125f3565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600f55505050505050505050565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610e995780601f10610e6e57610100808354040283529160200191610e99565b820191906000526020600020905b815481529060010190602001808311610e7c57829003601f168201915b505050505081565b6000806000610eae612161565b925092509250909192565b6000610ec63384846127b5565b5060015b92915050565b600081565b6009546001600160a01b031681565b60135481565b60035481565b6001600160a01b038316600090815260056020908152604080832033845290915281205460001914610f6f576001600160a01b0384166000908152600560209081526040808320338452909152902054610f4a908361245f565b6001600160a01b03851660009081526005602090815260408083203384529091529020555b610f7a848484612817565b5060019392505050565b7f576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf81565b601281565b60065481565b60105481565b600954600090819081906001600160a01b03878116911614610ff057600b546001600160701b03600160701b820481169116611008565b600b546001600160701b0380821691600160701b9004165b6001600160701b031691506001600160701b031691506110298483836128c5565b9695505050505050565b600181565b600c5481565b600d5481565b6000600f54600114611094576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f819055806110a4612161565b50915091506000806110b4612325565b909250905060006110ce836001600160701b03871661245f565b905060006110e5836001600160701b03871661245f565b6003549091508061111c576111086103e8610bcc61110386866123ff565b6129b0565b975061111760006103e8612a02565b61115f565b61115c6001600160701b03881661113385846123ff565b8161113a57fe5b046001600160701b03881661114f85856123ff565b8161115657fe5b04612a8d565b97505b6000881161119e5760405162461bcd60e51b815260040180806020018281038252602b81526020018061312e602b913960400191505060405180910390fd5b6111a88989612a02565b6111b4858589896125f3565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600f55509395945050505050565b60046020526000908152604090205481565b600e5481565b60076020526000908152604090205481565b600080600f5460011461127b576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f8190558061128b612161565b50600954600a549294509092506001600160a01b0390811691166000806112b0612325565b3060009081526004602052604090205460035492945090925090806112d583866123ff565b816112dc57fe5b049950806112ea83856123ff565b816112f157fe5b04985060008a1180156113045750600089115b61133f5760405162461bcd60e51b815260040180806020018281038252602b815260200180613216602b913960400191505060405180910390fd5b6113493083612aa3565b611354868c8c61218b565b61135f858c8b61218b565b611367612325565b909450925061137884848a8a6125f3565b604080518b8152602081018b905281516001600160a01b038e169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050506001600f81905550915091565b60115481565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610e995780601f10610e6e57610100808354040283529160200191610e99565b606061143d61256b565b905090565b6000610ec6338484612817565b6305f5e10081565b600860009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a557600080fd5b505afa1580156114b9573d6000803e3d6000fd5b505050506040513d60208110156114cf57600080fd5b50516001600160a01b03163314611529576040805162461bcd60e51b81526020600482015260196024820152782b37b630ba34b632a830b4b91d103737ba1036b0b730b3b2b960391b604482015290519081900360640190fd5b6402540be40081111561156d5760405162461bcd60e51b81526004018080602001828103825260388152602001806131a76038913960400191505060405180910390fd5b6011805490829055604080518281526020810184905281517fc49b03da3444d692820082f74621517924ca78c599ebbdc46c2d7ec998eaba76929181900390910190a15050565b6103e881565b600f54600114611608576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f819055600954600a546001600160a01b03918216929116908061162d612325565b600b54919350915061165690859087906116519086906001600160701b031661245f565b61218b565b600b5461167c9084908790611651908590600160701b90046001600160701b031661245f565b50506001600f55505050565b6008546001600160a01b031681565b600860009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e557600080fd5b505afa1580156116f9573d6000803e3d6000fd5b505050506040513d602081101561170f57600080fd5b50516001600160a01b03163314611769576040805162461bcd60e51b81526020600482015260196024820152782b37b630ba34b632a830b4b91d103737ba1036b0b730b3b2b960391b604482015290519081900360640190fd5b6305f5e1008111156117ac5760405162461bcd60e51b81526004018080602001828103825260378152602001806131df6037913960400191505060405180910390fd5b6010805490829055604080518281526020810184905281517f2f5af8c6eb9240361dbd88ac5f4818740d38a4f12070bd75460a97d61b726c39929181900390910190a15050565b600a546001600160a01b031681565b60606000600860009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d602081101561187e57600080fd5b50516040805160028082526060820183529293509190602083019080368337019050509150601254601354836000815181106118b657fe5b60200260200101846001815181106118ca57fe5b6020908102919091010191909152526000601381905560128190556009548351611912926001600160a01b0390921691849186919061190557fe5b602002602001015161218b565b600a548251611934916001600160a01b03169083908590600190811061190557fe5b600954600a5483517f1c1305802190d35d1b91e92c6043982b3398ae34849c43d2c2f17e61ac67f040926001600160a01b03908116921690859060009061197757fe5b60200260200101518560018151811061198c57fe5b602002602001015160405180856001600160a01b03168152602001846001600160a01b0316815260200183815260200182815260200194505050505060405180910390a15090565b42841015611a1e576040805162461bcd60e51b815260206004820152601260248201527114185a5c915490cc8c0e881156141254915160721b604482015290519081900360640190fd5b6006546000907f576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf8989611a4f612b34565b6001600160a01b03808e1660009081526007602090815260408083208054600180820190925582518085019a909a5297851689830152959093166060880152608087019390935260a086018d905260c086019490945260e08086018c9052815180870390910181526101008601825280519083012061190160f01b6101208701526101228601969096526101428086019690965280518086039096018652610162850180825286519683019690962095849052610182850180825286905260ff8a166101a28601526101c285018990526101e2850188905251949550919390926102028082019392601f1981019281900390910190855afa158015611b58573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611b8e5750886001600160a01b0316816001600160a01b0316145b611bdf576040805162461bcd60e51b815260206004820152601c60248201527f5061697245524332303a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b611bea8989896127b5565b505050505050505050565b6402540be40081565b600560209081526000928352604080842090915290825290205481565b600054610100900460ff1680611c345750611c34612b38565b80611c42575060005460ff16155b611c7d5760405162461bcd60e51b815260040180806020018281038252602e8152602001806130df602e913960400191505060405180910390fd5b600054610100900460ff16158015611ca8576000805460ff1961ff0019909116610100171660011790555b600880546001600160a01b031916331790556001600f558251600214611cff5760405162461bcd60e51b81526004018080602001828103825260468152602001806130996046913960600191505060405180910390fd5b82600181518110611d0c57fe5b60200260200101516001600160a01b031683600081518110611d2a57fe5b60200260200101516001600160a01b03161415611d785760405162461bcd60e51b81526004018080602001828103825260268152602001806131816026913960400191505060405180910390fd5b82600081518110611d8557fe5b602002602001015183600181518110611d9a57fe5b602090810291909101810151600a80546001600160a01b039283166001600160a01b031991821617909155600980549490921693169290921790915582516000918291908501906040811015611def57600080fd5b50805160209091015190925090506305f5e100821115611e405760405162461bcd60e51b81526004018080602001828103825260378152602001806131df6037913960400191505060405180910390fd5b6402540be400811115611e845760405162461bcd60e51b81526004018080602001828103825260388152602001806131a76038913960400191505060405180910390fd5b60118190556010829055845161209f90611eb9908790600090611ea357fe5b60200260200101516001600160a01b0316612b49565b611ec987600181518110611ea357fe5b6040516020018080750322337b931b29020a6a6902b37b630ba34b6329016960551b81525060160183805190602001908083835b60208310611f1c5780518252601f199092019160209182019101611efd565b6001836020036101000a03801982511681845116808217855250505050505090500180602d60f81b81525060010182805190602001908083835b60208310611f755780518252601f199092019160209182019101611f56565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052611fba87600081518110611ea357fe5b611fca88600181518110611ea357fe5b60405160200180806476414d4d2d60d81b81525060050183805190602001908083835b6020831061200c5780518252601f199092019160209182019101611fed565b6001836020036101000a03801982511681845116808217855250505050505090500180602d60f81b81525060010182805190602001908083835b602083106120655780518252601f199092019160209182019101612046565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052612d2a565b505080156120b3576000805461ff00191690555b505050565b6000806120c3612325565b915091509091565b60125481565b600f5460011461211f576040805162461bcd60e51b8152602060048201526014602482015273159bdb185d1a5b1954185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600f8190558061212f612325565b600b54919350915061215890839083906001600160701b0380821691600160701b9004166125f3565b50506001600f55565b600b546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b602083106122385780518252601f199092019160209182019101612219565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461229a576040519150601f19603f3d011682016040523d82523d6000602084013e61229f565b606091505b50915091508180156122cd5750805115806122cd57508080602001905160208110156122ca57600080fd5b50515b61231e576040805162461bcd60e51b815260206004820152601d60248201527f566f6c6174696c65506169723a205452414e534645525f4641494c4544000000604482015290519081900360640190fd5b5050505050565b601254600954604080516370a0823160e01b8152306004820152905160009384936123af9391926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561237d57600080fd5b505afa158015612391573d6000803e3d6000fd5b505050506040513d60208110156123a757600080fd5b50519061245f565b601354600a54604080516370a0823160e01b815230600482015290516120c393926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561237d57600080fd5b60008261240e57506000610eca565b8282028284828161241b57fe5b04146124585760405162461bcd60e51b815260040180806020018281038252602181526020018061310d6021913960400191505060405180910390fd5b9392505050565b6000828211156124b6576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008060006124e56402540be4006124df601054886123ff90919063ffffffff16565b90612e69565b905060006125076402540be4006124df601054886123ff90919063ffffffff16565b905060006125296402540be4006124df601154866123ff90919063ffffffff16565b9050600061254b6402540be4006124df601154866123ff90919063ffffffff16565b601280548401905560138054820190559190930397910395509350505050565b6040805160028082526060808301845292602083019080368337505060095482519293506001600160a01b0316918391506000906125a557fe5b6001600160a01b039283166020918202929092010152600a548251911690829060019081106125d057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505090565b6001600160701b03841180159061261157506001600160701b038311155b61265b576040805162461bcd60e51b8152602060048201526016602482015275566f6c6174696c65506169723a204f564552464c4f5760501b604482015290519081900360640190fd5b600b5463ffffffff42811691600160e01b9004811682039081161580159061268b57506001600160701b03841615155b801561269f57506001600160701b03831615155b1561270a578063ffffffff166126c7856126b886612ed0565b6001600160e01b031690612ee2565b600c80546001600160e01b03929092169290920201905563ffffffff81166126f2846126b887612ed0565b600d80546001600160e01b0392909216929092020190555b600b80546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260056020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831660009081526004602052604090205461283a908261245f565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546128699082612eff565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008084116129055760405162461bcd60e51b81526004018080602001828103825260278152602001806130726027913960400191505060405180910390fd5b6000831180156129155750600082115b6129505760405162461bcd60e51b815260040180806020018281038252602481526020018061304e6024913960400191505060405180910390fd5b600061296e6010546402540be40003866123ff90919063ffffffff16565b9050600061297c82856123ff565b9050600061299983612993886402540be4006123ff565b90612eff565b90508082816129a457fe5b04979650505050505050565b600060038211156129f3575080600160028204015b818110156129ed578091506002818285816129dc57fe5b0401816129e557fe5b0490506129c5565b506129fd565b81156129fd575060015b919050565b600354612a0f9082612eff565b6003556001600160a01b038216600090815260046020526040902054612a359082612eff565b6001600160a01b03831660008181526004602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310612a9c5781612458565b5090919050565b6001600160a01b038216600090815260046020526040902054612ac6908261245f565b6001600160a01b038316600090815260046020526040902055600354612aec908261245f565b6003556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b4690565b6000612b4330612f59565b15905090565b60606001600160a01b038216156129fd5760408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b178152915181516000936060936001600160a01b038816939092909182918083835b60208310612bc05780518252601f199092019160209182019101612ba1565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114612c20576040519150601f19603f3d011682016040523d82523d6000602084013e612c25565b606091505b50915091508115612d23578051602014612d0157808060200190516020811015612c4e57600080fd5b8101908080516040519392919084600160201b821115612c6d57600080fd5b908301906020820185811115612c8257600080fd5b8251600160201b811182820188101715612c9b57600080fd5b82525081516020918201929091019080838360005b83811015612cc8578181015183820152602001612cb0565b50505050905090810190601f168015612cf55780820380516001836020036101000a031916815260200191505b50604052505050612d20565b612d20818060200190516020811015612d1957600080fd5b5051612f5f565b92505b5050919050565b8151612d3d906001906020850190612fba565b508051612d51906002906020840190612fba565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60016040518082805460018160011615610100020316600290048015612dd05780601f10612dae576101008083540402835291820191612dd0565b820191906000526020600020905b815481529060010190602001808311612dbc575b50506040805191829003822082820190915260018252603160f81b60209092019190915291507fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69050612e21612b34565b6040805160208082019690965280820194909452606084019290925260808301523060a0808401919091528151808403909101815260c0909201905280519101206006555050565b6000808211612ebf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612ec857fe5b049392505050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b03841681612ec857fe5b600082820183811015612458576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3b151590565b606060005b828160ff1660208110612f7357fe5b1a60f81b6001600160f81b03191615801590612f92575060208160ff16105b15612f9f57600101612f64565b60405191506040820160405280825282602083015250919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ffb57805160ff1916838001178555613028565b82800160010185558215613028579182015b8281111561302857825182559160200191906001019061300d565b50613034929150613038565b5090565b5b80821115613034576000815560010161303956fe566f6c6174696c65506169723a20494e53554646494349454e545f4c4951554944495459566f6c6174696c65506169723a20494e53554646494349454e545f494e5055545f414d4f554e54566f6c6174696c65506169723a20546869732074797065206f662070616972206d7573742068617665206f6e6c792074776f20746f6b656e73207768656e2063726561746564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77566f6c6174696c65506169723a20494e53554646494349454e545f4c49515549444954595f4d494e544544566f6c6174696c65506169723a20494e53554646494349454e545f4f55545055545f414d4f554e54566f6c6174696c65506169723a20546f6b656e2063616e6e6f74206265207468652073616d65566f6c6174696c65506169723a2041646d696e4665652069732067726561746572207468616e20746865206d6178696d756d2076616c7565566f6c6174696c65506169723a20537761704665652069732067726561746572207468616e20746865206d6178696d756d2076616c7565566f6c6174696c65506169723a20494e53554646494349454e545f4c49515549444954595f4255524e4544a26469706673582212204696c37f8afbb54acaed2b16d41e5b4dfbc7a243a0dba2990dc7e6320c7fad9964736f6c634300060c0033",
  "devdoc": {
    "details": "This contract implements the VolatilePair interface and inherits from the PairERC20 contract. It also uses the Initializable contract from the OpenZeppelin library.",
    "events": {
      "Burn(address,uint256,uint256,address)": {
        "details": "Emitted when liquidity is removed from the pool",
        "params": {
          "amount0": "The amount of token0 removed",
          "amount1": "The amount of token1 removed",
          "sender": "The address of the sender",
          "to": "The address that receives the tokens"
        }
      },
      "ClaimFees(address,address,uint256,uint256)": {
        "details": "Emitted when admin fees are claimed",
        "params": {
          "amount0": "The amount of token0 claimed",
          "amount1": "The amount of token1 claimed",
          "token0": "The address of token0",
          "token1": "The address of token1"
        }
      },
      "Mint(address,uint256,uint256)": {
        "details": "Emitted when liquidity is added to the pool",
        "params": {
          "amount0": "The amount of token0 added",
          "amount1": "The amount of token1 added",
          "sender": "The address of the sender"
        }
      },
      "SetAdminFeeRate(uint256,uint256)": {
        "details": "Emitted when the admin fee rate is updated",
        "params": {
          "newAdminFeeRate": "The new admin fee rate",
          "oldAdminFeeRate": "The old admin fee rate"
        }
      },
      "SetSwapFeeRate(uint256,uint256)": {
        "details": "Emitted when the swap fee rate is updated",
        "params": {
          "newSwapFeeRate": "The new swap fee rate",
          "oldSwapFeeRate": "The old swap fee rate"
        }
      },
      "Swap(address,uint256,uint256,uint256,uint256,address)": {
        "details": "Emitted when a swap occurs",
        "params": {
          "amount0In": "The amount of token0 being swapped in",
          "amount0Out": "The amount of token0 being swapped out",
          "amount1In": "The amount of token1 being swapped in",
          "amount1Out": "The amount of token1 being swapped out",
          "sender": "The address of the sender",
          "to": "The address that receives the swapped tokens"
        }
      },
      "SwapFee(address[],uint256[])": {
        "details": "Emitted when the swap fee rate is updated",
        "params": {
          "swapFees": "The new swap fee rates for each token",
          "tokens": "The addresses of the tokens in the pair"
        }
      },
      "Sync(uint112,uint112)": {
        "details": "Emitted when the reserves are synced",
        "params": {
          "reserve0": "The reserve of token0",
          "reserve1": "The reserve of token1"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves a spender to transfer tokens on behalf of the owner.",
        "params": {
          "spender": "The address of the spender to be approved.",
          "value": "The amount of tokens to be approved for transfer."
        },
        "returns": {
          "_0": "A boolean indicating whether the approval was successful or not."
        }
      },
      "burn(address)": {
        "details": "Burn liquidity tokens from the caller and remove corresponding reserves",
        "params": {
          "_to": "The address to send the tokens to"
        },
        "returns": {
          "_amount0": "The amount of token0 burned",
          "_amount1": "The amount of token1 burned"
        }
      },
      "claimFees()": {
        "details": "Claim admin fees",
        "returns": {
          "_adminFees": "An array of admin fees"
        }
      },
      "getAmountOut(address,address,uint256)": {
        "details": "Returns the amount of output tokens given an input amount of a token",
        "params": {
          "_amount": "The input amount of the token",
          "_from": "The address of the input token",
          "_to": "The address of the output token"
        }
      },
      "getRealBalanceOf()": {
        "details": "Returns the real balance of each token in the pair, excluding the admin fee"
      },
      "getReserves()": {
        "details": "Returns the reserves and the timestamp of the last block when they were updated"
      },
      "initialize(address[],bytes)": {
        "details": "Initializes the VolatilePair contract",
        "params": {
          "_data": "The encoded swap fee rate and admin fee rate",
          "_tokens": "The addresses of the tokens in the pair"
        }
      },
      "mint(address)": {
        "details": "Mint liquidity tokens to the caller and add corresponding reserves",
        "params": {
          "_to": "The address to mint liquidity tokens to"
        },
        "returns": {
          "_liquidity": "The amount of liquidity tokens minted"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Approves a spender to transfer tokens on behalf of the owner, using a permit signature.",
        "params": {
          "deadline": "The deadline by which the permit must be used.",
          "owner": "The address of the owner of the tokens.",
          "r": "The R component of the permit signature.",
          "s": "The S component of the permit signature.",
          "spender": "The address of the spender to be approved.",
          "v": "The recovery byte of the permit signature.",
          "value": "The amount of tokens to be approved for transfer."
        }
      },
      "setAdminFeeRate(uint256)": {
        "details": "Set admin fee rate",
        "params": {
          "_adminFeeRate": "The new admin fee rate"
        }
      },
      "setSwapFeeRate(uint256)": {
        "details": "Set swap fee rate",
        "params": {
          "_swapFeeRate": "The new swap fee rate"
        }
      },
      "skim(address)": {
        "details": "Skim the excess tokens from the contract and send them to the specified address",
        "params": {
          "_to": "The address to send the excess tokens to"
        }
      },
      "swap(uint256,uint256,address,bytes)": {
        "details": "Low-level function for swapping tokens",
        "params": {
          "_amount0Out": "The amount of token0 to receive",
          "_amount1Out": "The amount of token1 to receive",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_to": "The address to send the tokens to"
        }
      },
      "sync()": {
        "details": "Update reserves to match balances"
      },
      "tokens()": {
        "details": "Returns the tokens in the pair"
      },
      "transfer(address,uint256)": {
        "details": "Transfers tokens from the caller's address to another address.",
        "params": {
          "to": "The address to which the tokens will be transferred.",
          "value": "The amount of tokens to be transferred."
        },
        "returns": {
          "_0": "A boolean indicating whether the transfer was successful or not."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers tokens from one address to another, on behalf of the owner.",
        "params": {
          "from": "The address from which the tokens will be transferred.",
          "to": "The address to which the tokens will be transferred.",
          "value": "The amount of tokens to be transferred."
        },
        "returns": {
          "_0": "A boolean indicating whether the transfer was successful or not."
        }
      }
    },
    "title": "VolatilePair",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11186,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 11189,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 11196,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11201,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11208,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "allowance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11211,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 11220,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8851,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "factory",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8854,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "token0",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8857,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "token1",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 8859,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "reserve0",
        "offset": 0,
        "slot": "11",
        "type": "t_uint112"
      },
      {
        "astId": 8861,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "reserve1",
        "offset": 14,
        "slot": "11",
        "type": "t_uint112"
      },
      {
        "astId": 8863,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "blockTimestampLast",
        "offset": 28,
        "slot": "11",
        "type": "t_uint32"
      },
      {
        "astId": 8865,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "price0CumulativeLast",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8867,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "price1CumulativeLast",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 8869,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "kLast",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8871,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "unlocked",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 8896,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "swapFeeRate",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 8898,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "adminFeeRate",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 8900,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "totalAdminFee0",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 8902,
        "contract": "contracts/VolatilePair.sol:VolatilePair",
        "label": "totalAdminFee1",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}