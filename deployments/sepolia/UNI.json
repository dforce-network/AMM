{
  "address": "0x7e7e6f65F32C6b39d2dD135F4b62646d9e2DAf17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintingAllowedAfter_",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CLAIM_AMOUNT",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "allocateTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minimumTimeBetweenMints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "mintCap",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "mintingAllowedAfter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7574acbee0d8c40722a72ee3793ddba99c3829a1824739737794d25ac3c018e8",
  "receipt": {
    "to": null,
    "from": "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "contractAddress": "0x7e7e6f65F32C6b39d2dD135F4b62646d9e2DAf17",
    "transactionIndex": 7,
    "gasUsed": "2429664",
    "logsBloom": "0x
    "blockHash": "0x5bf4d89ef47e84478e646b5cb63508a9a334d51e1b6db57b2e7105f0ebd2392a",
    "transactionHash": "0x7574acbee0d8c40722a72ee3793ddba99c3829a1824739737794d25ac3c018e8",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 3275191,
        "transactionHash": "0x7574acbee0d8c40722a72ee3793ddba99c3829a1824739737794d25ac3c018e8",
        "address": "0x7e7e6f65F32C6b39d2dD135F4b62646d9e2DAf17",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae4bdbb0824c9b602589a5dad2ad96c8a2acc607"
        ],
        "data": "0x0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000",
        "logIndex": 7,
        "blockHash": "0x5bf4d89ef47e84478e646b5cb63508a9a334d51e1b6db57b2e7105f0ebd2392a"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 3275191,
        "transactionHash": "0x7574acbee0d8c40722a72ee3793ddba99c3829a1824739737794d25ac3c018e8",
        "address": "0x7e7e6f65F32C6b39d2dD135F4b62646d9e2DAf17",
        "topics": [
          "0x3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ae4bdbb0824c9b602589a5dad2ad96c8a2acc607",
        "logIndex": 8,
        "blockHash": "0x5bf4d89ef47e84478e646b5cb63508a9a334d51e1b6db57b2e7105f0ebd2392a"
      }
    ],
    "blockNumber": 3275191,
    "cumulativeGasUsed": "6544188",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "1681294020"
  ],
  "numDeployments": 1,
  "solcInputHash": "cf3cc06b06f05953599ce3341c0505e4",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintingAllowedAfter_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLAIM_AMOUNT\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"allocateTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTimeBetweenMints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingAllowedAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"return\":\"The number of tokens approved\"},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"return\":\"Whether or not the approval succeeded\"},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"return\":\"The number of tokens held\"},\"constructor\":{\"params\":{\"account\":\"The initial account to grant all the tokens\",\"minter_\":\"The account with minting ability\",\"mintingAllowedAfter_\":\"The timestamp after which minting may occur\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"return\":\"The number of current votes for `account`\"},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"return\":\"The number of votes the account had as of the given block\"},\"mint(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to be minted\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\"}},\"setMinter(address)\":{\"params\":{\"minter_\":\"The address of the new minter\"}},\"transfer(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\"},\"return\":\"Whether or not the transfer succeeded\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\",\"src\":\"The address of the source account\"},\"return\":\"Whether or not the transfer succeeded\"}}},\"userdoc\":{\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"constructor\":\"Construct a new Uni token\",\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"mint(address,uint256)\":{\"notice\":\"Mint new tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spends\"},\"setMinter(address)\":{\"notice\":\"Change the minter address\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/test/Uni.sol\":\"Uni\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/Uni.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-09-16\\n */\\n\\n/**\\n *Submitted for verification at Etherscan.io on 2020-09-15\\n */\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ncontract Uni {\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Uniswap\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"UNI\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint public totalSupply = 1_000_000_000e18; // 1 billion Uni\\n\\n    /// @notice Address which may mint new tokens\\n    address public minter;\\n\\n    /// @notice The timestamp after which minting may occur\\n    uint public mintingAllowedAfter;\\n\\n    /// @notice Minimum time between mints\\n    uint32 public constant minimumTimeBetweenMints = 1 days * 365;\\n\\n    /// @notice Cap on the percentage of totalSupply that can be minted at each mint\\n    uint8 public constant mintCap = 2;\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when the minter address is changed\\n    event MinterChanged(address minter, address newMinter);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new Uni token\\n     * @param account The initial account to grant all the tokens\\n     * @param minter_ The account with minting ability\\n     * @param mintingAllowedAfter_ The timestamp after which minting may occur\\n     */\\n    constructor(address account, address minter_, uint mintingAllowedAfter_) public {\\n        require(mintingAllowedAfter_ >= block.timestamp, \\\"Uni::constructor: minting can only begin after deployment\\\");\\n\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n        minter = minter_;\\n        emit MinterChanged(address(0), minter);\\n        mintingAllowedAfter = mintingAllowedAfter_;\\n    }\\n\\n    /**\\n     * @notice Change the minter address\\n     * @param minter_ The address of the new minter\\n     */\\n    function setMinter(address minter_) external {\\n        require(msg.sender == minter, \\\"Uni::setMinter: only the minter can change the minter address\\\");\\n        emit MinterChanged(minter, minter_);\\n        minter = minter_;\\n    }\\n\\n    /**\\n     * @notice Mint new tokens\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to be minted\\n     */\\n    function mint(address dst, uint rawAmount) external {\\n        require(msg.sender == minter, \\\"Uni::mint: only the minter can mint\\\");\\n        require(block.timestamp >= mintingAllowedAfter, \\\"Uni::mint: minting not allowed yet\\\");\\n        require(dst != address(0), \\\"Uni::mint: cannot transfer to the zero address\\\");\\n\\n        // record the mint\\n        mintingAllowedAfter = SafeMath.add(block.timestamp, minimumTimeBetweenMints);\\n\\n        // mint the amount\\n        uint96 amount = safe96(rawAmount, \\\"Uni::mint: amount exceeds 96 bits\\\");\\n        require(amount <= SafeMath.div(SafeMath.mul(totalSupply, mintCap), 100), \\\"Uni::mint: exceeded mint cap\\\");\\n        totalSupply = safe96(SafeMath.add(totalSupply, amount), \\\"Uni::mint: totalSupply exceeds 96 bits\\\");\\n\\n        // transfer the amount to the recipient\\n        balances[dst] = add96(balances[dst], amount, \\\"Uni::mint: transfer amount overflows\\\");\\n        emit Transfer(address(0), dst, amount);\\n\\n        // move delegates\\n        _moveDelegates(address(0), delegates[dst], amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"Uni::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint rawAmount,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"Uni::permit: amount exceeds 96 bits\\\");\\n        }\\n\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline)\\n        );\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Uni::permit: invalid signature\\\");\\n        require(signatory == owner, \\\"Uni::permit: unauthorized\\\");\\n        require(now <= deadline, \\\"Uni::permit: signature expired\\\");\\n\\n        allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"Uni::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"Uni::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\n            uint96 newAllowance = sub96(\\n                spenderAllowance,\\n                amount,\\n                \\\"Uni::transferFrom: transfer amount exceeds spender allowance\\\"\\n            );\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Uni::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"Uni::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"Uni::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"Uni::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"Uni::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"Uni::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"Uni::_transferTokens: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], amount, \\\"Uni::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"Uni::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"Uni::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"Uni::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2 ** 96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n\\n    uint96 public constant CLAIM_AMOUNT = 1000 ether;\\n    address public constant OWNER = 0x3fA8F8958b90D370291f9BBdDD617BB3E4f98a21;\\n    mapping(address => bool) public claimed;\\n\\n    // This is not a function used in actual production\\n    // Only for getting free token to test\\n    function allocateTo(address dst, uint rawAmount) public {\\n        require(dst != address(0), \\\"Uni::mint: cannot transfer to the zero address\\\");\\n        // mint the amount\\n        uint96 amount = safe96(rawAmount, \\\"Uni::mint: amount exceeds 96 bits\\\");\\n        if (msg.sender != OWNER) {\\n            require(!claimed[dst], \\\"claimed\\\");\\n            amount = CLAIM_AMOUNT;\\n        }\\n        claimed[dst] = true;\\n        require(amount <= SafeMath.div(SafeMath.mul(totalSupply, mintCap), 100), \\\"Uni::mint: exceeded mint cap\\\");\\n        totalSupply = safe96(SafeMath.add(totalSupply, amount), \\\"Uni::mint: totalSupply exceeds 96 bits\\\");\\n\\n        // transfer the amount to the recipient\\n        balances[dst] = add96(balances[dst], amount, \\\"Uni::mint: transfer amount overflows\\\");\\n        emit Transfer(address(0), dst, amount);\\n\\n        // move delegates\\n        _moveDelegates(address(0), delegates[dst], amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf728db7c6b275b6af8ab9c63d36b05f307bdc7860e8d6d2db0f39678925a461b\"}},\"version\":1}",
  "bytecode": "0x60806040526b033b2e3c9fd0803ce80000006000553480156200002157600080fd5b5060405162002c0f38038062002c0f833981016040819052620000449162000171565b42811015620000705760405162461bcd60e51b8152600401620000679062000273565b60405180910390fd5b600080546001600160a01b0385168083526004602052604080842080546001600160601b0319166001600160601b0390941693909317909255825491519092917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91620000de919062000285565b60405180910390a3600180546001600160a01b0319166001600160a01b0384811691909117918290556040517f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6926200013d926000929116906200024d565b60405180910390a160025550620002ec9050565b80516200015e81620002c7565b92915050565b80516200015e81620002e1565b6000806000606084860312156200018757600080fd5b600062000195868662000151565b9350506020620001a88682870162000151565b9250506040620001bb8682870162000164565b9150509250925092565b620001d081620002b3565b82525050565b620001d0816200029e565b6000620001f060398362000295565b7f556e693a3a636f6e7374727563746f723a206d696e74696e672063616e206f6e81527f6c7920626567696e206166746572206465706c6f796d656e7400000000000000602082015260400192915050565b620001d081620002b0565b604081016200025d8285620001c5565b6200026c6020830184620001d6565b9392505050565b602080825281016200015e81620001e1565b602081016200015e828462000242565b90815260200190565b60006001600160a01b0382166200015e565b90565b60006200015e8260006200015e826200029e565b620002d2816200029e565b8114620002de57600080fd5b50565b620002d281620002b0565b61291380620002fc6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635c19a95c1161010f578063b4b5ea57116100a2578063dd62ed3e11610071578063dd62ed3e146103cd578063e7a324dc146103e0578063f1127ed8146103e8578063fca3b5aa14610409576101e5565b8063b4b5ea5714610381578063c3cda52014610394578063c884ef83146103a7578063d505accf146103ba576101e5565b8063782d6fe1116100de578063782d6fe1146103405780637ecebe001461035357806395d89b4114610366578063a9059cbb1461036e576101e5565b80635c19a95c146102ff5780636fcfff451461031257806370a082311461032557806376c71ca114610338576101e5565b806323b872dd11610187578063313ce56711610156578063313ce567146102af57806340c10f19146102c4578063587cde1e146102d75780635c11d62f146102ea576101e5565b806323b872dd14610277578063270ef3851461028a57806330adf81f1461029f57806330b36cef146102a7576101e5565b8063095ea7b3116101c3578063095ea7b314610232578063117803e31461025257806318160ddd1461025a57806320606b701461026f576101e5565b806306fdde03146101ea578063075461721461020857806308bca5661461021d575b600080fd5b6101f261041c565b6040516101ff919061248e565b60405180910390f35b61021061043f565b6040516101ff9190612361565b61023061022b366004611ba6565b61044e565b005b610245610240366004611ba6565b610689565b6040516101ff919061238a565b610210610748565b610262610760565b6040516101ff9190612398565b610262610766565b610245610285366004611abd565b61077d565b6102926108c6565b6040516101ff91906125f4565b6102626108d3565b6102626108df565b6102b76108e5565b6040516101ff91906125d8565b6102306102d2366004611ba6565b6108ea565b6102106102e5366004611a5d565b6109a9565b6102f26109c4565b6040516101ff91906125af565b61023061030d366004611a5d565b6109cc565b6102f2610320366004611a5d565b6109d9565b610262610333366004611a5d565b6109f1565b6102b7610a15565b61029261034e366004611ba6565b610a1a565b610262610361366004611a5d565b610c28565b6101f2610c3a565b61024561037c366004611ba6565b610c59565b61029261038f366004611a5d565b610c95565b6102306103a2366004611bd6565b610d05565b6102456103b5366004611a5d565b610eee565b6102306103c8366004611b0a565b610f03565b6102626103db366004611a83565b6111ee565b610262611222565b6103fb6103f6366004611c5d565b61122e565b6040516101ff9291906125bd565b610230610417366004611a5d565b611263565b604051806040016040528060078152602001660556e69737761760cc1b81525081565b6001546001600160a01b031681565b6001600160a01b03821661047d5760405162461bcd60e51b8152600401610474906124df565b60405180910390fd5b60006104a18260405180606001604052806021815260200161285d602191396112f6565b905033733fa8f8958b90d370291f9bbddd617bb3e4f98a2114610503576001600160a01b03831660009081526009602052604090205460ff16156104f75760405162461bcd60e51b8152600401610474906124ef565b50683635c9adc5dea000005b6001600160a01b0383166000908152600960205260408120805460ff191660011790555461053d90610536906002611325565b606461135f565b816001600160601b031611156105655760405162461bcd60e51b81526004016104749061252f565b61059b61057d600054836001600160601b03166113a1565b60405180606001604052806026815260200161273a602691396112f6565b6001600160601b0390811660009081556001600160a01b0385168152600460209081526040918290205482516060810190935260248084526105ed94919091169285929091906126da908301396113c6565b6001600160a01b03841660008181526004602052604080822080546001600160601b0319166001600160601b03959095169490941790935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106579085906125e6565b60405180910390a36001600160a01b03808416600090815260056020526040812054610684921683611402565b505050565b60008060001983141561069f57506000196106c4565b6106c18360405180606001604052806024815260200161287e602491396112f6565b90505b3360008181526003602090815260408083206001600160a01b03891680855292529182902080546001600160601b0319166001600160601b03861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107349085906125e6565b60405180910390a360019150505b92915050565b733fa8f8958b90d370291f9bbddd617bb3e4f98a2181565b60005481565b6040516107729061234b565b604051809103902081565b6001600160a01b03831660009081526003602090815260408083203380855290835281842054825160608101909352602480845291936001600160601b039091169285926107d5928892919061287e908301396112f6565b9050866001600160a01b0316836001600160a01b03161415801561080257506001600160601b0382811614155b156108ac57600061082c83836040518060600160405280603c81526020016126fe603c9139611594565b6001600160a01b038981166000818152600360209081526040808320948a16808452949091529081902080546001600160601b0319166001600160601b0386161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906108a29085906125e6565b60405180910390a3505b6108b78787836115d3565b600193505050505b9392505050565b683635c9adc5dea0000081565b60405161077290612340565b60025481565b601281565b6001546001600160a01b031633146109145760405162461bcd60e51b81526004016104749061253f565b6002544210156109365760405162461bcd60e51b8152600401610474906124ff565b6001600160a01b03821661095c5760405162461bcd60e51b8152600401610474906124df565b61096a426301e133806113a1565b60028190555060006109948260405180606001604052806021815260200161285d602191396112f6565b905061053d610536600054600260ff16611325565b6005602052600090815260409020546001600160a01b031681565b6301e1338081565b6109d63382611779565b50565b60076020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600460205260409020546001600160601b031690565b600281565b6000438210610a3b5760405162461bcd60e51b8152600401610474906124cf565b6001600160a01b03831660009081526007602052604090205463ffffffff1680610a69576000915050610742565b6001600160a01b038416600090815260066020908152604080832063ffffffff600019860181168552925290912054168310610ae5576001600160a01b03841660009081526006602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610742565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff16831015610b20576000915050610742565b600060001982015b8163ffffffff168163ffffffff161115610be357600282820363ffffffff16048103610b52611a1a565b506001600160a01b038716600090815260066020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415610bbe576020015194506107429350505050565b805163ffffffff16871115610bd557819350610bdc565b6001820392505b5050610b28565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b60086020526000908152604090205481565b60405180604001604052806003815260200162554e4960e81b81525081565b600080610c7e83604051806060016040528060258152602001612838602591396112f6565b9050610c8b3385836115d3565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff1680610cc05760006108bf565b6001600160a01b0383166000908152600660209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03169392505050565b6000604051610d139061234b565b6040805191829003822082820190915260078252660556e69737761760cc1b6020909201919091527f99c45e8ee5dde061ced9c812089094fbd28a020e7e37f2851198887e5ca64985610d64611803565b30604051602001610d78949392919061243e565b6040516020818303038152906040528051906020012090506000604051610d9e90612356565b604051908190038120610db9918a908a908a90602001612400565b60405160208183030381529060405280519060200120905060008282604051602001610de692919061230f565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610e239493929190612473565b6020604051602081039080840390855afa158015610e45573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e785760405162461bcd60e51b8152600401610474906124bf565b6001600160a01b03811660009081526008602052604090208054600181019091558914610eb75760405162461bcd60e51b81526004016104749061255f565b87421115610ed75760405162461bcd60e51b81526004016104749061249f565b610ee1818b611779565b505050505b505050505050565b60096020526000908152604090205460ff1681565b6000600019861415610f185750600019610f3d565b610f3a86604051806060016040528060238152602001612795602391396112f6565b90505b6000604051610f4b9061234b565b6040805191829003822082820190915260078252660556e69737761760cc1b6020909201919091527f99c45e8ee5dde061ced9c812089094fbd28a020e7e37f2851198887e5ca64985610f9c611803565b30604051602001610fb0949392919061243e565b6040516020818303038152906040528051906020012090506000604051610fd690612340565b604080519182900382206001600160a01b038d166000908152600860209081529290208054600181019091556110189391928e928e928e9290918e91016123a6565b6040516020818303038152906040528051906020012090506000828260405160200161104592919061230f565b6040516020818303038152906040528051906020012090506000600182898989604051600081526020016040526040516110829493929190612473565b6020604051602081039080840390855afa1580156110a4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166110d75760405162461bcd60e51b81526004016104749061258f565b8b6001600160a01b0316816001600160a01b0316146111085760405162461bcd60e51b81526004016104749061259f565b884211156111285760405162461bcd60e51b81526004016104749061257f565b84600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160601b0302191690836001600160601b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925876040516111d891906125e6565b60405180910390a3505050505050505050505050565b6001600160a01b0391821660009081526003602090815260408083209390941682529190915220546001600160601b031690565b60405161077290612356565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6001546001600160a01b0316331461128d5760405162461bcd60e51b81526004016104749061254f565b6001546040517f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6916112cc916001600160a01b0390911690849061236f565b60405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b600081600160601b841061131d5760405162461bcd60e51b8152600401610474919061248e565b509192915050565b60008261133457506000610742565b8282028284828161134157fe5b04146108bf5760405162461bcd60e51b81526004016104749061251f565b60006108bf83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611807565b6000828201838110156108bf5760405162461bcd60e51b8152600401610474906124af565b6000838301826001600160601b0380871690831610156113f95760405162461bcd60e51b8152600401610474919061248e565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561142d57506000816001600160601b0316115b15610684576001600160a01b038316156114e5576001600160a01b03831660009081526007602052604081205463ffffffff16908161146d5760006114ac565b6001600160a01b0385166000908152600660209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b905060006114d3828560405180606001604052806027815260200161281160279139611594565b90506114e18684848461183e565b5050505b6001600160a01b03821615610684576001600160a01b03821660009081526007602052604081205463ffffffff16908161152057600061155f565b6001600160a01b0384166000908152600660209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061158682856040518060600160405280602681526020016127b8602691396113c6565b9050610ee68584848461183e565b6000836001600160601b0316836001600160601b0316111582906115cb5760405162461bcd60e51b8152600401610474919061248e565b505050900390565b6001600160a01b0383166115f95760405162461bcd60e51b81526004016104749061256f565b6001600160a01b03821661161f5760405162461bcd60e51b81526004016104749061250f565b6001600160a01b03831660009081526004602090815260409182902054825160608101909352603580845261166a936001600160601b03909216928592919061276090830139611594565b6001600160a01b03848116600090815260046020908152604080832080546001600160601b0319166001600160601b0396871617905592861682529082902054825160608101909352602f8084526116d294919091169285929091906128a2908301396113c6565b6001600160a01b038381166000818152600460205260409081902080546001600160601b0319166001600160601b0395909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061173f9085906125e6565b60405180910390a36001600160a01b0380841660009081526005602052604080822054858416835291205461068492918216911683611402565b6001600160a01b03808316600081815260056020818152604080842080546004845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46117fd828483611402565b50505050565b4690565b600081836118285760405162461bcd60e51b8152600401610474919061248e565b50600083858161183457fe5b0495945050505050565b6000611862436040518060600160405280603381526020016127de603391396119f3565b905060008463ffffffff161180156118ab57506001600160a01b038516600090815260066020908152604080832063ffffffff6000198901811685529252909120548282169116145b1561190a576001600160a01b0385166000908152600660209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b038516021790556119a9565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152600683528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600790935292909220805460018801909316929091169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516119e4929190612602565b60405180910390a25050505050565b600081600160201b841061131d5760405162461bcd60e51b8152600401610474919061248e565b604080518082019091526000808252602082015290565b8035610742816126aa565b8035610742816126be565b8035610742816126c7565b8035610742816126d0565b600060208284031215611a6f57600080fd5b6000611a7b8484611a31565b949350505050565b60008060408385031215611a9657600080fd5b6000611aa28585611a31565b9250506020611ab385828601611a31565b9150509250929050565b600080600060608486031215611ad257600080fd5b6000611ade8686611a31565b9350506020611aef86828701611a31565b9250506040611b0086828701611a3c565b9150509250925092565b600080600080600080600060e0888a031215611b2557600080fd5b6000611b318a8a611a31565b9750506020611b428a828b01611a31565b9650506040611b538a828b01611a3c565b9550506060611b648a828b01611a3c565b9450506080611b758a828b01611a52565b93505060a0611b868a828b01611a3c565b92505060c0611b978a828b01611a3c565b91505092959891949750929550565b60008060408385031215611bb957600080fd5b6000611bc58585611a31565b9250506020611ab385828601611a3c565b60008060008060008060c08789031215611bef57600080fd5b6000611bfb8989611a31565b9650506020611c0c89828a01611a3c565b9550506040611c1d89828a01611a3c565b9450506060611c2e89828a01611a52565b9350506080611c3f89828a01611a3c565b92505060a0611c5089828a01611a3c565b9150509295509295509295565b60008060408385031215611c7057600080fd5b6000611c7c8585611a31565b9250506020611ab385828601611a47565b611c968161262f565b82525050565b611c968161263a565b611c968161263f565b611c96611cba8261263f565b61263f565b6000611cca8261261d565b611cd48185612621565b9350611ce4818560208601612674565b611ced816126a0565b9093019392505050565b6000611d04602583612621565b7f556e693a3a64656c656761746542795369673a207369676e61747572652065788152641c1a5c995960da1b602082015260400192915050565b6000611d4b60028361262a565b61190160f01b815260020192915050565b6000611d69601b83612621565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000611da2602583612621565b7f556e693a3a64656c656761746542795369673a20696e76616c6964207369676e815264617475726560d81b602082015260400192915050565b6000611de9602683612621565b7f556e693a3a6765745072696f72566f7465733a206e6f742079657420646574658152651c9b5a5b995960d21b602082015260400192915050565b6000611e31602e83612621565b7f556e693a3a6d696e743a2063616e6e6f74207472616e7366657220746f20746881526d65207a65726f206164647265737360901b602082015260400192915050565b6000611e81600783612621565b6618db185a5b595960ca1b815260200192915050565b6000611ea460528361262a565b7f5065726d69742861646472657373206f776e65722c616464726573732073706581527f6e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63656020820152712c75696e7432353620646561646c696e652960701b604082015260520192915050565b6000611f1e602283612621565b7f556e693a3a6d696e743a206d696e74696e67206e6f7420616c6c6f7765642079815261195d60f21b602082015260400192915050565b6000611f6260438361262a565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000611fcd603983612621565b7f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726181527f6e7366657220746f20746865207a65726f206164647265737300000000000000602082015260400192915050565b600061202c602183612621565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061206f601c83612621565b7f556e693a3a6d696e743a206578636565646564206d696e742063617000000000815260200192915050565b60006120a8602383612621565b7f556e693a3a6d696e743a206f6e6c7920746865206d696e7465722063616e206d8152621a5b9d60ea1b602082015260400192915050565b60006120ed603d83612621565b7f556e693a3a7365744d696e7465723a206f6e6c7920746865206d696e7465722081527f63616e206368616e676520746865206d696e7465722061646472657373000000602082015260400192915050565b600061214c602183612621565b7f556e693a3a64656c656761746542795369673a20696e76616c6964206e6f6e638152606560f81b602082015260400192915050565b600061218f603b83612621565b7f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726181527f6e736665722066726f6d20746865207a65726f20616464726573730000000000602082015260400192915050565b60006121ee601e83612621565b7f556e693a3a7065726d69743a207369676e617475726520657870697265640000815260200192915050565b6000612227603a8361262a565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206e6f6e63652c75696e7432353620657870697279290000000000006020820152603a0192915050565b6000612286601e83612621565b7f556e693a3a7065726d69743a20696e76616c6964207369676e61747572650000815260200192915050565b60006122bf601983612621565b7f556e693a3a7065726d69743a20756e617574686f72697a656400000000000000815260200192915050565b611c968161264e565b611c9681612657565b611c9681612669565b611c968161265d565b600061231a82611d3e565b91506123268285611cae565b6020820191506123368284611cae565b5060200192915050565b600061074282611e97565b600061074282611f55565b60006107428261221a565b602081016107428284611c8d565b6040810161237d8285611c8d565b6108bf6020830184611c8d565b602081016107428284611c9c565b602081016107428284611ca5565b60c081016123b48289611ca5565b6123c16020830188611c8d565b6123ce6040830187611c8d565b6123db6060830186611ca5565b6123e86080830185611ca5565b6123f560a0830184611ca5565b979650505050505050565b6080810161240e8287611ca5565b61241b6020830186611c8d565b6124286040830185611ca5565b6124356060830184611ca5565b95945050505050565b6080810161244c8287611ca5565b6124596020830186611ca5565b6124666040830185611ca5565b6124356060830184611c8d565b608081016124818287611ca5565b61241b60208301866122f4565b602080825281016108bf8184611cbf565b6020808252810161074281611cf7565b6020808252810161074281611d5c565b6020808252810161074281611d95565b6020808252810161074281611ddc565b6020808252810161074281611e24565b6020808252810161074281611e74565b6020808252810161074281611f11565b6020808252810161074281611fc0565b602080825281016107428161201f565b6020808252810161074281612062565b602080825281016107428161209b565b60208082528101610742816120e0565b602080825281016107428161213f565b6020808252810161074281612182565b60208082528101610742816121e1565b6020808252810161074281612279565b60208082528101610742816122b2565b6020810161074282846122eb565b604081016125cb82856122eb565b6108bf6020830184612306565b6020810161074282846122f4565b6020810161074282846122fd565b602081016107428284612306565b6040810161261082856122fd565b6108bf60208301846122fd565b5190565b90815260200190565b919050565b600061074282612642565b151590565b90565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b6001600160601b031690565b60006107428261265d565b60005b8381101561268f578181015183820152602001612677565b838111156117fd5750506000910152565b601f01601f191690565b6126b38161262f565b81146109d657600080fd5b6126b38161263f565b6126b38161264e565b6126b38161265756fe556e693a3a6d696e743a207472616e7366657220616d6f756e74206f766572666c6f7773556e693a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365556e693a3a6d696e743a20746f74616c537570706c7920657863656564732039362062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365556e693a3a7065726d69743a20616d6f756e7420657863656564732039362062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773556e693a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773556e693a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473556e693a3a6d696e743a20616d6f756e7420657863656564732039362062697473556e693a3a617070726f76653a20616d6f756e7420657863656564732039362062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773a365627a7a72315820483a6edd3a5652c7a1d845940411b611b450c4ce254bca364443058c1de230726c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80635c19a95c1161010f578063b4b5ea57116100a2578063dd62ed3e11610071578063dd62ed3e146103cd578063e7a324dc146103e0578063f1127ed8146103e8578063fca3b5aa14610409576101e5565b8063b4b5ea5714610381578063c3cda52014610394578063c884ef83146103a7578063d505accf146103ba576101e5565b8063782d6fe1116100de578063782d6fe1146103405780637ecebe001461035357806395d89b4114610366578063a9059cbb1461036e576101e5565b80635c19a95c146102ff5780636fcfff451461031257806370a082311461032557806376c71ca114610338576101e5565b806323b872dd11610187578063313ce56711610156578063313ce567146102af57806340c10f19146102c4578063587cde1e146102d75780635c11d62f146102ea576101e5565b806323b872dd14610277578063270ef3851461028a57806330adf81f1461029f57806330b36cef146102a7576101e5565b8063095ea7b3116101c3578063095ea7b314610232578063117803e31461025257806318160ddd1461025a57806320606b701461026f576101e5565b806306fdde03146101ea578063075461721461020857806308bca5661461021d575b600080fd5b6101f261041c565b6040516101ff919061248e565b60405180910390f35b61021061043f565b6040516101ff9190612361565b61023061022b366004611ba6565b61044e565b005b610245610240366004611ba6565b610689565b6040516101ff919061238a565b610210610748565b610262610760565b6040516101ff9190612398565b610262610766565b610245610285366004611abd565b61077d565b6102926108c6565b6040516101ff91906125f4565b6102626108d3565b6102626108df565b6102b76108e5565b6040516101ff91906125d8565b6102306102d2366004611ba6565b6108ea565b6102106102e5366004611a5d565b6109a9565b6102f26109c4565b6040516101ff91906125af565b61023061030d366004611a5d565b6109cc565b6102f2610320366004611a5d565b6109d9565b610262610333366004611a5d565b6109f1565b6102b7610a15565b61029261034e366004611ba6565b610a1a565b610262610361366004611a5d565b610c28565b6101f2610c3a565b61024561037c366004611ba6565b610c59565b61029261038f366004611a5d565b610c95565b6102306103a2366004611bd6565b610d05565b6102456103b5366004611a5d565b610eee565b6102306103c8366004611b0a565b610f03565b6102626103db366004611a83565b6111ee565b610262611222565b6103fb6103f6366004611c5d565b61122e565b6040516101ff9291906125bd565b610230610417366004611a5d565b611263565b604051806040016040528060078152602001660556e69737761760cc1b81525081565b6001546001600160a01b031681565b6001600160a01b03821661047d5760405162461bcd60e51b8152600401610474906124df565b60405180910390fd5b60006104a18260405180606001604052806021815260200161285d602191396112f6565b905033733fa8f8958b90d370291f9bbddd617bb3e4f98a2114610503576001600160a01b03831660009081526009602052604090205460ff16156104f75760405162461bcd60e51b8152600401610474906124ef565b50683635c9adc5dea000005b6001600160a01b0383166000908152600960205260408120805460ff191660011790555461053d90610536906002611325565b606461135f565b816001600160601b031611156105655760405162461bcd60e51b81526004016104749061252f565b61059b61057d600054836001600160601b03166113a1565b60405180606001604052806026815260200161273a602691396112f6565b6001600160601b0390811660009081556001600160a01b0385168152600460209081526040918290205482516060810190935260248084526105ed94919091169285929091906126da908301396113c6565b6001600160a01b03841660008181526004602052604080822080546001600160601b0319166001600160601b03959095169490941790935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106579085906125e6565b60405180910390a36001600160a01b03808416600090815260056020526040812054610684921683611402565b505050565b60008060001983141561069f57506000196106c4565b6106c18360405180606001604052806024815260200161287e602491396112f6565b90505b3360008181526003602090815260408083206001600160a01b03891680855292529182902080546001600160601b0319166001600160601b03861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107349085906125e6565b60405180910390a360019150505b92915050565b733fa8f8958b90d370291f9bbddd617bb3e4f98a2181565b60005481565b6040516107729061234b565b604051809103902081565b6001600160a01b03831660009081526003602090815260408083203380855290835281842054825160608101909352602480845291936001600160601b039091169285926107d5928892919061287e908301396112f6565b9050866001600160a01b0316836001600160a01b03161415801561080257506001600160601b0382811614155b156108ac57600061082c83836040518060600160405280603c81526020016126fe603c9139611594565b6001600160a01b038981166000818152600360209081526040808320948a16808452949091529081902080546001600160601b0319166001600160601b0386161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906108a29085906125e6565b60405180910390a3505b6108b78787836115d3565b600193505050505b9392505050565b683635c9adc5dea0000081565b60405161077290612340565b60025481565b601281565b6001546001600160a01b031633146109145760405162461bcd60e51b81526004016104749061253f565b6002544210156109365760405162461bcd60e51b8152600401610474906124ff565b6001600160a01b03821661095c5760405162461bcd60e51b8152600401610474906124df565b61096a426301e133806113a1565b60028190555060006109948260405180606001604052806021815260200161285d602191396112f6565b905061053d610536600054600260ff16611325565b6005602052600090815260409020546001600160a01b031681565b6301e1338081565b6109d63382611779565b50565b60076020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600460205260409020546001600160601b031690565b600281565b6000438210610a3b5760405162461bcd60e51b8152600401610474906124cf565b6001600160a01b03831660009081526007602052604090205463ffffffff1680610a69576000915050610742565b6001600160a01b038416600090815260066020908152604080832063ffffffff600019860181168552925290912054168310610ae5576001600160a01b03841660009081526006602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610742565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff16831015610b20576000915050610742565b600060001982015b8163ffffffff168163ffffffff161115610be357600282820363ffffffff16048103610b52611a1a565b506001600160a01b038716600090815260066020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415610bbe576020015194506107429350505050565b805163ffffffff16871115610bd557819350610bdc565b6001820392505b5050610b28565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b60086020526000908152604090205481565b60405180604001604052806003815260200162554e4960e81b81525081565b600080610c7e83604051806060016040528060258152602001612838602591396112f6565b9050610c8b3385836115d3565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff1680610cc05760006108bf565b6001600160a01b0383166000908152600660209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03169392505050565b6000604051610d139061234b565b6040805191829003822082820190915260078252660556e69737761760cc1b6020909201919091527f99c45e8ee5dde061ced9c812089094fbd28a020e7e37f2851198887e5ca64985610d64611803565b30604051602001610d78949392919061243e565b6040516020818303038152906040528051906020012090506000604051610d9e90612356565b604051908190038120610db9918a908a908a90602001612400565b60405160208183030381529060405280519060200120905060008282604051602001610de692919061230f565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610e239493929190612473565b6020604051602081039080840390855afa158015610e45573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e785760405162461bcd60e51b8152600401610474906124bf565b6001600160a01b03811660009081526008602052604090208054600181019091558914610eb75760405162461bcd60e51b81526004016104749061255f565b87421115610ed75760405162461bcd60e51b81526004016104749061249f565b610ee1818b611779565b505050505b505050505050565b60096020526000908152604090205460ff1681565b6000600019861415610f185750600019610f3d565b610f3a86604051806060016040528060238152602001612795602391396112f6565b90505b6000604051610f4b9061234b565b6040805191829003822082820190915260078252660556e69737761760cc1b6020909201919091527f99c45e8ee5dde061ced9c812089094fbd28a020e7e37f2851198887e5ca64985610f9c611803565b30604051602001610fb0949392919061243e565b6040516020818303038152906040528051906020012090506000604051610fd690612340565b604080519182900382206001600160a01b038d166000908152600860209081529290208054600181019091556110189391928e928e928e9290918e91016123a6565b6040516020818303038152906040528051906020012090506000828260405160200161104592919061230f565b6040516020818303038152906040528051906020012090506000600182898989604051600081526020016040526040516110829493929190612473565b6020604051602081039080840390855afa1580156110a4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166110d75760405162461bcd60e51b81526004016104749061258f565b8b6001600160a01b0316816001600160a01b0316146111085760405162461bcd60e51b81526004016104749061259f565b884211156111285760405162461bcd60e51b81526004016104749061257f565b84600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160601b0302191690836001600160601b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925876040516111d891906125e6565b60405180910390a3505050505050505050505050565b6001600160a01b0391821660009081526003602090815260408083209390941682529190915220546001600160601b031690565b60405161077290612356565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6001546001600160a01b0316331461128d5760405162461bcd60e51b81526004016104749061254f565b6001546040517f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6916112cc916001600160a01b0390911690849061236f565b60405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b600081600160601b841061131d5760405162461bcd60e51b8152600401610474919061248e565b509192915050565b60008261133457506000610742565b8282028284828161134157fe5b04146108bf5760405162461bcd60e51b81526004016104749061251f565b60006108bf83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611807565b6000828201838110156108bf5760405162461bcd60e51b8152600401610474906124af565b6000838301826001600160601b0380871690831610156113f95760405162461bcd60e51b8152600401610474919061248e565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561142d57506000816001600160601b0316115b15610684576001600160a01b038316156114e5576001600160a01b03831660009081526007602052604081205463ffffffff16908161146d5760006114ac565b6001600160a01b0385166000908152600660209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b905060006114d3828560405180606001604052806027815260200161281160279139611594565b90506114e18684848461183e565b5050505b6001600160a01b03821615610684576001600160a01b03821660009081526007602052604081205463ffffffff16908161152057600061155f565b6001600160a01b0384166000908152600660209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061158682856040518060600160405280602681526020016127b8602691396113c6565b9050610ee68584848461183e565b6000836001600160601b0316836001600160601b0316111582906115cb5760405162461bcd60e51b8152600401610474919061248e565b505050900390565b6001600160a01b0383166115f95760405162461bcd60e51b81526004016104749061256f565b6001600160a01b03821661161f5760405162461bcd60e51b81526004016104749061250f565b6001600160a01b03831660009081526004602090815260409182902054825160608101909352603580845261166a936001600160601b03909216928592919061276090830139611594565b6001600160a01b03848116600090815260046020908152604080832080546001600160601b0319166001600160601b0396871617905592861682529082902054825160608101909352602f8084526116d294919091169285929091906128a2908301396113c6565b6001600160a01b038381166000818152600460205260409081902080546001600160601b0319166001600160601b0395909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061173f9085906125e6565b60405180910390a36001600160a01b0380841660009081526005602052604080822054858416835291205461068492918216911683611402565b6001600160a01b03808316600081815260056020818152604080842080546004845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46117fd828483611402565b50505050565b4690565b600081836118285760405162461bcd60e51b8152600401610474919061248e565b50600083858161183457fe5b0495945050505050565b6000611862436040518060600160405280603381526020016127de603391396119f3565b905060008463ffffffff161180156118ab57506001600160a01b038516600090815260066020908152604080832063ffffffff6000198901811685529252909120548282169116145b1561190a576001600160a01b0385166000908152600660209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b038516021790556119a9565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152600683528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600790935292909220805460018801909316929091169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516119e4929190612602565b60405180910390a25050505050565b600081600160201b841061131d5760405162461bcd60e51b8152600401610474919061248e565b604080518082019091526000808252602082015290565b8035610742816126aa565b8035610742816126be565b8035610742816126c7565b8035610742816126d0565b600060208284031215611a6f57600080fd5b6000611a7b8484611a31565b949350505050565b60008060408385031215611a9657600080fd5b6000611aa28585611a31565b9250506020611ab385828601611a31565b9150509250929050565b600080600060608486031215611ad257600080fd5b6000611ade8686611a31565b9350506020611aef86828701611a31565b9250506040611b0086828701611a3c565b9150509250925092565b600080600080600080600060e0888a031215611b2557600080fd5b6000611b318a8a611a31565b9750506020611b428a828b01611a31565b9650506040611b538a828b01611a3c565b9550506060611b648a828b01611a3c565b9450506080611b758a828b01611a52565b93505060a0611b868a828b01611a3c565b92505060c0611b978a828b01611a3c565b91505092959891949750929550565b60008060408385031215611bb957600080fd5b6000611bc58585611a31565b9250506020611ab385828601611a3c565b60008060008060008060c08789031215611bef57600080fd5b6000611bfb8989611a31565b9650506020611c0c89828a01611a3c565b9550506040611c1d89828a01611a3c565b9450506060611c2e89828a01611a52565b9350506080611c3f89828a01611a3c565b92505060a0611c5089828a01611a3c565b9150509295509295509295565b60008060408385031215611c7057600080fd5b6000611c7c8585611a31565b9250506020611ab385828601611a47565b611c968161262f565b82525050565b611c968161263a565b611c968161263f565b611c96611cba8261263f565b61263f565b6000611cca8261261d565b611cd48185612621565b9350611ce4818560208601612674565b611ced816126a0565b9093019392505050565b6000611d04602583612621565b7f556e693a3a64656c656761746542795369673a207369676e61747572652065788152641c1a5c995960da1b602082015260400192915050565b6000611d4b60028361262a565b61190160f01b815260020192915050565b6000611d69601b83612621565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000611da2602583612621565b7f556e693a3a64656c656761746542795369673a20696e76616c6964207369676e815264617475726560d81b602082015260400192915050565b6000611de9602683612621565b7f556e693a3a6765745072696f72566f7465733a206e6f742079657420646574658152651c9b5a5b995960d21b602082015260400192915050565b6000611e31602e83612621565b7f556e693a3a6d696e743a2063616e6e6f74207472616e7366657220746f20746881526d65207a65726f206164647265737360901b602082015260400192915050565b6000611e81600783612621565b6618db185a5b595960ca1b815260200192915050565b6000611ea460528361262a565b7f5065726d69742861646472657373206f776e65722c616464726573732073706581527f6e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63656020820152712c75696e7432353620646561646c696e652960701b604082015260520192915050565b6000611f1e602283612621565b7f556e693a3a6d696e743a206d696e74696e67206e6f7420616c6c6f7765642079815261195d60f21b602082015260400192915050565b6000611f6260438361262a565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000611fcd603983612621565b7f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726181527f6e7366657220746f20746865207a65726f206164647265737300000000000000602082015260400192915050565b600061202c602183612621565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061206f601c83612621565b7f556e693a3a6d696e743a206578636565646564206d696e742063617000000000815260200192915050565b60006120a8602383612621565b7f556e693a3a6d696e743a206f6e6c7920746865206d696e7465722063616e206d8152621a5b9d60ea1b602082015260400192915050565b60006120ed603d83612621565b7f556e693a3a7365744d696e7465723a206f6e6c7920746865206d696e7465722081527f63616e206368616e676520746865206d696e7465722061646472657373000000602082015260400192915050565b600061214c602183612621565b7f556e693a3a64656c656761746542795369673a20696e76616c6964206e6f6e638152606560f81b602082015260400192915050565b600061218f603b83612621565b7f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726181527f6e736665722066726f6d20746865207a65726f20616464726573730000000000602082015260400192915050565b60006121ee601e83612621565b7f556e693a3a7065726d69743a207369676e617475726520657870697265640000815260200192915050565b6000612227603a8361262a565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206e6f6e63652c75696e7432353620657870697279290000000000006020820152603a0192915050565b6000612286601e83612621565b7f556e693a3a7065726d69743a20696e76616c6964207369676e61747572650000815260200192915050565b60006122bf601983612621565b7f556e693a3a7065726d69743a20756e617574686f72697a656400000000000000815260200192915050565b611c968161264e565b611c9681612657565b611c9681612669565b611c968161265d565b600061231a82611d3e565b91506123268285611cae565b6020820191506123368284611cae565b5060200192915050565b600061074282611e97565b600061074282611f55565b60006107428261221a565b602081016107428284611c8d565b6040810161237d8285611c8d565b6108bf6020830184611c8d565b602081016107428284611c9c565b602081016107428284611ca5565b60c081016123b48289611ca5565b6123c16020830188611c8d565b6123ce6040830187611c8d565b6123db6060830186611ca5565b6123e86080830185611ca5565b6123f560a0830184611ca5565b979650505050505050565b6080810161240e8287611ca5565b61241b6020830186611c8d565b6124286040830185611ca5565b6124356060830184611ca5565b95945050505050565b6080810161244c8287611ca5565b6124596020830186611ca5565b6124666040830185611ca5565b6124356060830184611c8d565b608081016124818287611ca5565b61241b60208301866122f4565b602080825281016108bf8184611cbf565b6020808252810161074281611cf7565b6020808252810161074281611d5c565b6020808252810161074281611d95565b6020808252810161074281611ddc565b6020808252810161074281611e24565b6020808252810161074281611e74565b6020808252810161074281611f11565b6020808252810161074281611fc0565b602080825281016107428161201f565b6020808252810161074281612062565b602080825281016107428161209b565b60208082528101610742816120e0565b602080825281016107428161213f565b6020808252810161074281612182565b60208082528101610742816121e1565b6020808252810161074281612279565b60208082528101610742816122b2565b6020810161074282846122eb565b604081016125cb82856122eb565b6108bf6020830184612306565b6020810161074282846122f4565b6020810161074282846122fd565b602081016107428284612306565b6040810161261082856122fd565b6108bf60208301846122fd565b5190565b90815260200190565b919050565b600061074282612642565b151590565b90565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b6001600160601b031690565b60006107428261265d565b60005b8381101561268f578181015183820152602001612677565b838111156117fd5750506000910152565b601f01601f191690565b6126b38161262f565b81146109d657600080fd5b6126b38161263f565b6126b38161264e565b6126b38161265756fe556e693a3a6d696e743a207472616e7366657220616d6f756e74206f766572666c6f7773556e693a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365556e693a3a6d696e743a20746f74616c537570706c7920657863656564732039362062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365556e693a3a7065726d69743a20616d6f756e7420657863656564732039362062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773556e693a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773556e693a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473556e693a3a6d696e743a20616d6f756e7420657863656564732039362062697473556e693a3a617070726f76653a20616d6f756e7420657863656564732039362062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773a365627a7a72315820483a6edd3a5652c7a1d845940411b611b450c4ce254bca364443058c1de230726c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "return": "The number of tokens approved"
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "return": "Whether or not the approval succeeded"
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "return": "The number of tokens held"
      },
      "constructor": {
        "params": {
          "account": "The initial account to grant all the tokens",
          "minter_": "The account with minting ability",
          "mintingAllowedAfter_": "The timestamp after which minting may occur"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "return": "The number of current votes for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "return": "The number of votes the account had as of the given block"
      },
      "mint(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to be minted"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature"
        }
      },
      "setMinter(address)": {
        "params": {
          "minter_": "The address of the new minter"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "return": "Whether or not the transfer succeeded"
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "return": "Whether or not the transfer succeeded"
      }
    }
  },
  "userdoc": {
    "methods": {
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "constructor": "Construct a new Uni token",
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "mint(address,uint256)": {
        "notice": "Mint new tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spends"
      },
      "setMinter(address)": {
        "notice": "Change the minter address"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 262,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 264,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "minter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 266,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "mintingAllowedAfter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 280,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      },
      {
        "astId": 284,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 288,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "delegates",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 299,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "checkpoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)293_storage))"
      },
      {
        "astId": 303,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 322,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1529,
        "contract": "contracts/test/Uni.sol:Uni",
        "label": "claimed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)293_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct Uni.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)293_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)293_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct Uni.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)293_storage"
      },
      "t_struct(Checkpoint)293_storage": {
        "encoding": "inplace",
        "label": "struct Uni.Checkpoint",
        "members": [
          {
            "astId": 290,
            "contract": "contracts/test/Uni.sol:Uni",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 292,
            "contract": "contracts/test/Uni.sol:Uni",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}