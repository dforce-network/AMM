{
  "address": "0xa911353365504aa3b78C0b587efefF6A9477D4cC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defSwapFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defAdminFeeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairsAmount",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_auth",
          "type": "bool"
        }
      ],
      "name": "RemovePairType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_old",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "SetDefAdminFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_old",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "SetDefSwapFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_old",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "SetPairAdminFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_auth",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_old",
          "type": "address"
        }
      ],
      "name": "SetPairType",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        }
      ],
      "name": "addPairType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "atPairType",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "containsPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defAdminFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defSwapFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        }
      ],
      "name": "getPairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defSwapFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defAdminFeeRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "pairParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_auth",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairTypeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairTypeValues",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        }
      ],
      "name": "removePairType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defAdminFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setDefAdminFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defSwapFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setDefSwapFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        }
      ],
      "name": "setPairType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x67ac37da081d142432f03ddec611f5bc9e6a3f93f32bad09e7ffc7b470aab91e",
  "receipt": {
    "to": null,
    "from": "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "contractAddress": "0xa911353365504aa3b78C0b587efefF6A9477D4cC",
    "transactionIndex": 45,
    "gasUsed": "1527629",
    "logsBloom": "0x
    "blockHash": "0x1c465481172d5916c34aee72301bd4403f1fa6727250ed62ac9c3a71a1acbba3",
    "transactionHash": "0x67ac37da081d142432f03ddec611f5bc9e6a3f93f32bad09e7ffc7b470aab91e",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 8629100,
        "transactionHash": "0x67ac37da081d142432f03ddec611f5bc9e6a3f93f32bad09e7ffc7b470aab91e",
        "address": "0xa911353365504aa3b78C0b587efefF6A9477D4cC",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 118,
        "blockHash": "0x1c465481172d5916c34aee72301bd4403f1fa6727250ed62ac9c3a71a1acbba3"
      }
    ],
    "blockNumber": 8629100,
    "cumulativeGasUsed": "15837842",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "30000000",
    "5000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "51eb0f5abfb734e7e81e299507506614",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defSwapFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defAdminFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairsAmount\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_auth\",\"type\":\"bool\"}],\"name\":\"RemovePairType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"SetDefAdminFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"SetDefSwapFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"SetPairAdminFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_auth\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"}],\"name\":\"SetPairType\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"addPairType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"atPairType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"containsPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defAdminFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defSwapFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"}],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defSwapFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defAdminFeeRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pairParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_auth\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairTypeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairTypeValues\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"removePairType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defAdminFeeRate\",\"type\":\"uint256\"}],\"name\":\"setDefAdminFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defSwapFeeRate\",\"type\":\"uint256\"}],\"name\":\"setDefSwapFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"setPairType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PairFactory.sol\":\"PairFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/PairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./utils/Arrays.sol\\\";\\nimport \\\"./interface/IPairFactory.sol\\\";\\nimport { IPair } from \\\"./interface/IPair.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract PairFactory is IPairFactory, Initializable {\\n    using Arrays for address[];\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public manager;\\n    address public pendingManager;\\n\\n    uint256 public defSwapFeeRate;\\n    uint256 public defAdminFeeRate;\\n\\n    mapping(address => bool) public isPair;\\n    address[] public allPairs;\\n\\n    EnumerableSet.AddressSet internal pairImpls;\\n    mapping(uint8 => PairParams) public pairParams;\\n\\n    event PairCreated(address[] tokens, uint8 _type, address pair, uint256 pairsAmount);\\n    event SetDefAdminFeeRate(uint256 _old, uint256 _new);\\n    event SetDefSwapFeeRate(uint256 _old, uint256 _new);\\n    event SetPairAdminFeeRate(uint256 _old, uint256 _new);\\n    event SetPairType(address _impl, uint8 _type, bool _auth, address _old);\\n    event RemovePairType(address _impl, uint8 _type, bool _auth);\\n\\n    struct PairTokens {\\n        address _tokenA;\\n        address _tokenB;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"not manager\\\");\\n        _;\\n    }\\n\\n    function initialize(uint256 _defSwapFeeRate, uint256 _defAdminFeeRate) public initializer {\\n        manager = msg.sender;\\n        defSwapFeeRate = _defSwapFeeRate;\\n        defAdminFeeRate = _defAdminFeeRate;\\n    }\\n\\n    constructor(uint256 _defSwapFeeRate, uint256 _defAdminFeeRate) {\\n        initialize(_defSwapFeeRate, _defAdminFeeRate);\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function setManager(address _manager) external onlyManager {\\n        pendingManager = _manager;\\n    }\\n\\n    function acceptManager() external {\\n        require(msg.sender == pendingManager, \\\"not pending fee manager\\\");\\n        manager = pendingManager;\\n    }\\n\\n    function setDefAdminFeeRate(uint256 _defAdminFeeRate) external onlyManager {\\n        uint256 _old = defAdminFeeRate;\\n        defAdminFeeRate = _defAdminFeeRate;\\n        emit SetDefAdminFeeRate(_old, _defAdminFeeRate);\\n    }\\n\\n    function setDefSwapFeeRate(uint256 _defSwapFeeRate) external onlyManager {\\n        uint256 _old = defSwapFeeRate;\\n        defSwapFeeRate = _defSwapFeeRate;\\n        emit SetDefSwapFeeRate(_old, _defSwapFeeRate);\\n    }\\n\\n    function containsPair(address value) external view returns (bool) {\\n        return pairImpls.contains(value);\\n    }\\n\\n    function setPairType(address _impl) external onlyManager {\\n        uint8 _type = IPair(_impl).PAIR_TYPE();\\n        bool _auth = IPair(_impl).AUTH();\\n\\n        address _old = pairParams[_type]._impl;\\n        if (_old != address(0)) pairImpls.remove(_old);\\n\\n        require(pairImpls.add(_impl), \\\"Factory: This pair already exists\\\");\\n        pairParams[_type] = PairParams({ _impl: _impl, _auth: _auth });\\n\\n        emit SetPairType(_impl, _type, _auth, _old);\\n    }\\n\\n    function addPairType(address _impl) external onlyManager {\\n        uint8 _type = IPair(_impl).PAIR_TYPE();\\n        bool _auth = IPair(_impl).AUTH();\\n        require(pairParams[_type]._impl == address(0), \\\"Factory: This pair type already exists\\\");\\n\\n        require(pairImpls.add(_impl), \\\"Factory: This pair already exists\\\");\\n        pairParams[_type] = PairParams({ _impl: _impl, _auth: _auth });\\n\\n        emit SetPairType(_impl, _type, _auth, address(0));\\n    }\\n\\n    function removePairType(address _impl) external onlyManager {\\n        require(pairImpls.contains(_impl), \\\"Factory: This pair does not exist\\\");\\n\\n        uint8 _type = IPair(_impl).PAIR_TYPE();\\n\\n        pairImpls.remove(_impl);\\n        PairParams memory _old = pairParams[_type];\\n        delete pairParams[_type];\\n\\n        emit RemovePairType(_impl, _type, _old._auth);\\n    }\\n\\n    function pairTypeValues() external view returns (address[] memory) {\\n        return pairImpls.values();\\n    }\\n\\n    function pairTypeAmount() external view returns (uint256) {\\n        return pairImpls.length();\\n    }\\n\\n    function atPairType(uint256 _index) external view returns (address) {\\n        return pairImpls.at(_index);\\n    }\\n\\n    function getPairAddress(address[] memory _tokens, uint8 _pairType) public view returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(_tokens.sortArray(), _pairType));\\n        return Clones.predictDeterministicAddress(pairParams[_pairType]._impl, salt);\\n    }\\n\\n    function createPair(address[] memory _tokens, uint8 _pairType, bytes memory _data) external returns (address _pair) {\\n        _tokens = _tokens.sortArray();\\n\\n        require(!isPair[getPairAddress(_tokens, _pairType)], \\\"Factory: Pair already exists\\\");\\n\\n        bytes32 salt = keccak256(abi.encodePacked(_tokens, _pairType));\\n\\n        PairParams memory _params = pairParams[_pairType];\\n        if (_pairType == 1) {\\n            _data = abi.encode(defSwapFeeRate, defAdminFeeRate);\\n        }\\n        if (_params._auth) {\\n            require(manager == msg.sender, \\\"Factory: this pair type can only be created by manager\\\");\\n        }\\n        _pair = Clones.cloneDeterministic(_params._impl, salt);\\n\\n        IPair(_pair).initialize(_tokens, _data);\\n\\n        allPairs.push(_pair);\\n        isPair[_pair] = true;\\n\\n        emit PairCreated(_tokens, _pairType, _pair, allPairs.length);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1a1dffd6eaf622b4317034d411b828e2eeb0600d116ba5ba89cc174fe36ebf02\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPair {\\n    function getAmountOut(address from, address to, uint256 amount) external view returns (uint256);\\n\\n    function tokens() external returns (address[] memory);\\n\\n    function initialize(address[] memory _tokens, bytes memory _data) external;\\n\\n    function PAIR_TYPE() external view returns (uint8);\\n\\n    function AUTH() external view returns (bool);\\n}\\n\\ninterface IVolatilePair is IPair {\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\\ninterface IStablePair is IPair {\\n    function calculateTokenAmount(address[] calldata _tokens, uint256[] calldata _amounts, bool _deposit) external view returns (uint256);\\n\\n    function calculateRemoveLiquidityOneToken(address _token, uint256 _liquidity) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address[] calldata _tokens, uint256 _amount) external view returns (uint256[] memory);\\n\\n    function addLiquidity(\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts,\\n        uint256 _minToMint,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external payable returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 _amount,\\n        uint256[] calldata _minAmounts,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external payable returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        address _token,\\n        // uint256 _minAmount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        address[] memory _tokens,\\n        uint256[] calldata _amounts,\\n        // uint256 _maxBurnAmount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function lpToken() external view returns (address);\\n\\n    function swap(\\n        address _tokenFrom,\\n        address _tokenTo,\\n        uint256 _dx,\\n        uint256 _minDy,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x696b2fb9c765d610df549708ff0090db5e792d4bfa841ab42f88258735c184d8\",\"license\":\"MIT\"},\"contracts/interface/IPairFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPairFactory {\\n    //1: volatile pair, 2: stable pair, 3: yeild pair\\n    struct PairParams {\\n        address _impl;\\n        bool _auth;\\n    }\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function createPair(\\n        address[] memory _tokens,\\n        uint8 _pairType,\\n        bytes memory data\\n    ) external returns (address pair);\\n\\n    function manager() external view returns (address);\\n\\n    function getPairAddress(address[] memory _tokens, uint8 _type) external view returns (address);\\n\\n    function pairTypeValues() external view returns (address[] memory);\\n\\n    function atPairType(uint256 _index) external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x62262689113fab2ee588b8085eaa054703572747ec238ff77f773e51afa82c68\",\"license\":\"MIT\"},\"contracts/utils/Arrays.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nlibrary Arrays {\\n    function sortArray(address[] memory arr) internal pure returns (address[] memory) {\\n        uint256 l = arr.length;\\n        for (uint256 i = 0; i < l; i++) {\\n            for (uint256 j = i + 1; j < l; j++) {\\n                if (arr[i] > arr[j]) {\\n                    address temp = arr[i];\\n                    arr[i] = arr[j];\\n                    arr[j] = temp;\\n                }\\n            }\\n        }\\n        return arr;\\n    }\\n\\n    function copyAndAddOne(address[] memory arr, address _add) internal pure returns (address[] memory _result) {\\n        _result = new address[](arr.length + 1);\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            _result[i] = arr[i];\\n        }\\n        _result[arr.length] = _add;\\n    }\\n\\n    function removeEmpty(address[] memory arr) internal pure returns (address[] memory _new) {\\n        uint256 count;\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (arr[i] != address(0)) {\\n                count++;\\n            }\\n        }\\n        _new = new address[](count);\\n        uint256 j;\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (arr[i] == address(0)) {\\n                continue;\\n            }\\n            _new[j] = arr[i];\\n            j++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4c279c13ea1da01acc780c509ee099d27b12a1ad712fe1da5af966ee7a280ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b2938038062001b298339810160408190526200003491620001a3565b62000040828262000048565b5050620001c8565b600054610100900460ff1615808015620000695750600054600160ff909116105b8062000099575062000086306200019460201b62000f921760201c565b15801562000099575060005460ff166001145b620001015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff19166001179055801562000125576000805461ff0019166101001790555b6000805462010000600160b01b0319163362010000021790556002839055600382905580156200018f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b03163b151590565b60008060408385031215620001b757600080fd5b505080516020909101519092909150565b61195180620001d86000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063a5652b62116100b8578063d0ebdbe71161007c578063d0ebdbe7146102c8578063d3bd1f36146102db578063e0b3df17146102ee578063e4a3011614610301578063e5e31b1314610314578063fd8d63c21461033757600080fd5b8063a5652b621461027c578063a74ecadc14610285578063a908b0ac1461029a578063b9a59826146102ad578063cb4278e4146102c057600080fd5b8063574f2ba31161010a578063574f2ba3146101c45780636143f2f9146101cc5780636f627dbb14610220578063962912b2146102435780639d7169f414610256578063a00fff6f1461026957600080fd5b80631e3dd18b1461014757806323edcef8146101775780634380cd5b1461018e578063481c6a75146101a357806348ff15b3146101bc575b600080fd5b61015a610155366004611418565b61034a565b6040516001600160a01b0390911681526020015b60405180910390f35b61018060035481565b60405190815260200161016e565b6101a161019c366004611418565b610374565b005b60005461015a906201000090046001600160a01b031681565b6101a16103f3565b600554610180565b6102016101da366004611443565b6008602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b03909316835290151560208301520161016e565b61023361022e36600461147c565b610478565b604051901515815260200161016e565b6101a1610251366004611418565b61048b565b6101a161026436600461147c565b6104f9565b60015461015a906001600160a01b031681565b61018060025481565b61028d6106ef565b60405161016e91906114db565b61015a6102a83660046115bc565b610700565b6101a16102bb36600461147c565b6109c1565b610180610c00565b6101a16102d636600461147c565b610c0c565b6101a16102e936600461147c565b610c5e565b61015a6102fc366004611418565b610df6565b6101a161030f366004611685565b610e03565b61023361032236600461147c565b60046020526000908152604090205460ff1681565b61015a6103453660046116a7565b610f2d565b6005818154811061035a57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546201000090046001600160a01b031633146103ad5760405162461bcd60e51b81526004016103a4906116f9565b60405180910390fd5b600380549082905560408051828152602081018490527ff5ff144628b9e19f9a5d0286784d338c78a7410e0b25c01a8b4e674bc39b33bb91015b60405180910390a15050565b6001546001600160a01b0316331461044d5760405162461bcd60e51b815260206004820152601760248201527f6e6f742070656e64696e6720666565206d616e6167657200000000000000000060448201526064016103a4565b6001546000805462010000600160b01b0319166001600160a01b039092166201000002919091179055565b6000610485600683610fa1565b92915050565b6000546201000090046001600160a01b031633146104bb5760405162461bcd60e51b81526004016103a4906116f9565b600280549082905560408051828152602081018490527fbb556759cd184345231b8fc75d9ce4a3b6318068025c80048773e1880dd336e991016103e7565b6000546201000090046001600160a01b031633146105295760405162461bcd60e51b81526004016103a4906116f9565b6000816001600160a01b031663508d1e6b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d919061171e565b90506000826001600160a01b0316630a5623fb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f3919061173b565b60ff83166000908152600860205260409020549091506001600160a01b0316801561062557610623600682610fc6565b505b610630600685610fdb565b61064c5760405162461bcd60e51b81526004016103a49061175d565b6040805180820182526001600160a01b03868116808352851515602080850182815260ff8a166000818152600884528890209651875492511515600160a01b026001600160a81b03199093169087161791909117909555855192835282019390935292830191909152821660608201527f1400ba2558efe19fc8d7538b626f52083999103aea4d54d27d2511017e95e2d49060800160405180910390a150505050565b60606106fb6006610ff0565b905090565b600061070b84610ffd565b93506004600061071b8686610f2d565b6001600160a01b0316815260208101919091526040016000205460ff16156107855760405162461bcd60e51b815260206004820152601c60248201527f466163746f72793a205061697220616c7265616479206578697374730000000060448201526064016103a4565b6000848460405160200161079a92919061179e565b60408051601f19818403018152828252805160209182012060ff80891660008181526008855285902086860190955293546001600160a01b0381168652600160a01b900416151591840191909152925060010361081b5760025460035460408051602081019390935282015260600160405160208183030381529060405293505b8060200151156108a4576000546201000090046001600160a01b031633146108a45760405162461bcd60e51b815260206004820152603660248201527f466163746f72793a2074686973207061697220747970652063616e206f6e6c796044820152751031329031b932b0ba32b210313c9036b0b730b3b2b960511b60648201526084016103a4565b80516108b0908361113d565b604051631cd3c49560e31b81529093506001600160a01b0384169063e69e24a8906108e190899088906004016117f1565b600060405180830381600087803b1580156108fb57600080fd5b505af115801561090f573d6000803e3d6000fd5b505060058054600180820183557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090910180546001600160a01b0319166001600160a01b03891690811790915560009081526004602052604090819020805460ff1916909217909155905490517fb1424b6c1e4d8dcbe71c791ebb0fd69752e4c4ce8ce2d5fa660ea942aaa2d3de93506109b0925089918991889190611856565b60405180910390a150509392505050565b6000546201000090046001600160a01b031633146109f15760405162461bcd60e51b81526004016103a4906116f9565b6000816001600160a01b031663508d1e6b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a55919061171e565b90506000826001600160a01b0316630a5623fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb919061173b565b60ff83166000908152600860205260409020549091506001600160a01b031615610b365760405162461bcd60e51b815260206004820152602660248201527f466163746f72793a20546869732070616972207479706520616c72656164792060448201526565786973747360d01b60648201526084016103a4565b610b41600684610fdb565b610b5d5760405162461bcd60e51b81526004016103a49061175d565b6040805180820182526001600160a01b03858116808352841515602080850182815260ff89166000818152600884528881209751885493511515600160a01b026001600160a81b03199094169716969096179190911790955585519283528201939093529283019190915260608201527f1400ba2558efe19fc8d7538b626f52083999103aea4d54d27d2511017e95e2d4906080015b60405180910390a1505050565b60006106fb60066111da565b6000546201000090046001600160a01b03163314610c3c5760405162461bcd60e51b81526004016103a4906116f9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546201000090046001600160a01b03163314610c8e5760405162461bcd60e51b81526004016103a4906116f9565b610c99600682610fa1565b610cef5760405162461bcd60e51b815260206004820152602160248201527f466163746f72793a2054686973207061697220646f6573206e6f7420657869736044820152601d60fa1b60648201526084016103a4565b6000816001600160a01b031663508d1e6b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d53919061171e565b9050610d60600683610fc6565b5060ff81811660008181526008602081815260408084208151808301835281546001600160a01b038082168352600160a01b82049099161515828601908152968890529484526001600160a81b031990941690559251835195881686529085019390935291151590830152907f626aa489691af84bf64ea4aa134b8304d7f9b324e1200a8b03fef32d2ca08e6790606001610bf3565b60006104856006836111e4565b600054610100900460ff1615808015610e235750600054600160ff909116105b80610e3d5750303b158015610e3d575060005460ff166001145b610ea05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103a4565b6000805460ff191660011790558015610ec3576000805461ff0019166101001790555b6000805462010000600160b01b031916336201000002179055600283905560038290558015610f28576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610bf3565b505050565b600080610f3984610ffd565b83604051602001610f4b92919061179e565b60408051601f19818403018152918152815160209283012060ff861660009081526008909352912054909150610f8a906001600160a01b0316826111f0565b949350505050565b6001600160a01b03163b151590565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000610fbf836001600160a01b038416611250565b6000610fbf836001600160a01b038416611343565b60606000610fbf83611392565b805160609060005b8181101561113557600061101a8260016118a7565b90505b8281101561112257848181518110611037576110376118bf565b60200260200101516001600160a01b031685838151811061105a5761105a6118bf565b60200260200101516001600160a01b03161115611110576000858381518110611085576110856118bf565b602002602001015190508582815181106110a1576110a16118bf565b60200260200101518684815181106110bb576110bb6118bf565b60200260200101906001600160a01b031690816001600160a01b031681525050808683815181106110ee576110ee6118bf565b60200260200101906001600160a01b031690816001600160a01b031681525050505b8061111a816118d5565b91505061101d565b508061112d816118d5565b915050611005565b509192915050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f590506001600160a01b0381166104855760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016103a4565b6000610485825490565b6000610fbf83836113ee565b6040513060388201526f5af43d82803e903d91602b57fd5bf3ff602482015260148101839052733d602d80600a3d3981f3363d3d373d3d3d363d738152605881018290526037600c82012060788201526055604390910120600090610fbf565b600081815260018301602052604081205480156113395760006112746001836118ee565b8554909150600090611288906001906118ee565b90508181146112ed5760008660000182815481106112a8576112a86118bf565b90600052602060002001549050808760000184815481106112cb576112cb6118bf565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806112fe576112fe611905565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610485565b6000915050610485565b600081815260018301602052604081205461138a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610485565b506000610485565b6060816000018054806020026020016040519081016040528092919081815260200182805480156113e257602002820191906000526020600020905b8154815260200190600101908083116113ce575b50505050509050919050565b6000826000018281548110611405576114056118bf565b9060005260206000200154905092915050565b60006020828403121561142a57600080fd5b5035919050565b60ff8116811461144057600080fd5b50565b60006020828403121561145557600080fd5b8135610fbf81611431565b80356001600160a01b038116811461147757600080fd5b919050565b60006020828403121561148e57600080fd5b610fbf82611460565b600081518084526020808501945080840160005b838110156114d05781516001600160a01b0316875295820195908201906001016114ab565b509495945050505050565b602081526000610fbf6020830184611497565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561152d5761152d6114ee565b604052919050565b600082601f83011261154657600080fd5b8135602067ffffffffffffffff821115611562576115626114ee565b8160051b611571828201611504565b928352848101820192828101908785111561158b57600080fd5b83870192505b848310156115b1576115a283611460565b82529183019190830190611591565b979650505050505050565b6000806000606084860312156115d157600080fd5b833567ffffffffffffffff808211156115e957600080fd5b6115f587838801611535565b9450602091508186013561160881611431565b935060408601358181111561161c57600080fd5b8601601f8101881361162d57600080fd5b80358281111561163f5761163f6114ee565b611651601f8201601f19168501611504565b9250808352888482840101111561166757600080fd5b80848301858501376000848285010152505080925050509250925092565b6000806040838503121561169857600080fd5b50508035926020909101359150565b600080604083850312156116ba57600080fd5b823567ffffffffffffffff8111156116d157600080fd5b6116dd85828601611535565b92505060208301356116ee81611431565b809150509250929050565b6020808252600b908201526a3737ba1036b0b730b3b2b960a91b604082015260600190565b60006020828403121561173057600080fd5b8151610fbf81611431565b60006020828403121561174d57600080fd5b81518015158114610fbf57600080fd5b60208082526021908201527f466163746f72793a2054686973207061697220616c72656164792065786973746040820152607360f81b606082015260800190565b825160009082906020808701845b838110156117d15781516001600160a01b0316855293820193908201906001016117ac565b5050505060f89390931b6001600160f81b03191683525050600101919050565b6040815260006118046040830185611497565b602083820381850152845180835260005b81811015611830578681018301518482018401528201611815565b818111156118415760008383860101525b50601f01601f19169190910101949350505050565b6080815260006118696080830187611497565b60ff959095166020830152506001600160a01b03929092166040830152606090910152919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156118ba576118ba611891565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600182016118e7576118e7611891565b5060010190565b60008282101561190057611900611891565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207f00fb25b6a83ecb479aed96af144ed63df6a62a63f98eeae60a9b3b67ae6b7f64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1168,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "manager",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1170,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "pendingManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1172,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "defSwapFeeRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1174,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "defAdminFeeRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1178,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "isPair",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1181,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1184,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "pairImpls",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)858_storage"
      },
      {
        "astId": 1189,
        "contract": "contracts/PairFactory.sol:PairFactory",
        "label": "pairParams",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint8,t_struct(PairParams)1934_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_struct(PairParams)1934_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct IPairFactory.PairParams)",
        "numberOfBytes": "32",
        "value": "t_struct(PairParams)1934_storage"
      },
      "t_struct(AddressSet)858_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 857,
            "contract": "contracts/PairFactory.sol:PairFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)543_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PairParams)1934_storage": {
        "encoding": "inplace",
        "label": "struct IPairFactory.PairParams",
        "members": [
          {
            "astId": 1931,
            "contract": "contracts/PairFactory.sol:PairFactory",
            "label": "_impl",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1933,
            "contract": "contracts/PairFactory.sol:PairFactory",
            "label": "_auth",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)543_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 538,
            "contract": "contracts/PairFactory.sol:PairFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 542,
            "contract": "contracts/PairFactory.sol:PairFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}