{
  "address": "0x7FE77f3922c8eaF7E8e127e414884c3b8f0d4bbd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "NewAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "NewSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "NewWithdrawFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "swapFees",
          "type": "uint256[]"
        }
      ],
      "name": "SwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "soldId",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "boughtId",
          "type": "uint128"
        }
      ],
      "name": "TokenSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAIR_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minToMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFees",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPrecise",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getAdminBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dx",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_futureTime",
          "type": "uint256"
        }
      ],
      "name": "rampA",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_minAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "setAdminFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopRampA",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapStorage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "initialA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialATime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureATime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        },
        {
          "internalType": "contract LPToken",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6da0cee52825989c81400bf026243376b3bf2e57fabfb04f9880086288b72549",
  "receipt": {
    "to": null,
    "from": "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "contractAddress": "0x7FE77f3922c8eaF7E8e127e414884c3b8f0d4bbd",
    "transactionIndex": 31,
    "gasUsed": "2844259",
    "logsBloom": "0x
    "blockHash": "0xce2a1c28777394cbeb1c40fb9e7d0473c97717cd3a8bdf689fa2675079428ec4",
    "transactionHash": "0x6da0cee52825989c81400bf026243376b3bf2e57fabfb04f9880086288b72549",
    "logs": [],
    "blockNumber": 8687056,
    "cumulativeGasUsed": "8362155",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "74d525d72fc5a5aa3e0a9e519ce6b097",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"NewSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFees\",\"type\":\"uint256[]\"}],\"name\":\"SwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"soldId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"boughtId\",\"type\":\"uint128\"}],\"name\":\"TokenSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAIR_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minToMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPrecise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAdminBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dx\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_futureTime\",\"type\":\"uint256\"}],\"name\":\"rampA\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAdminFee\",\"type\":\"uint256\"}],\"name\":\"setAdminFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRampA\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"contract LPToken\",\"name\":\"lpToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's deployment size.\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(address[],uint256[],uint256,address,uint256)\":{\"params\":{\"_amounts\":\"the amounts of each token to add, in their native precision,corresponding to param _tokens\",\"_deadline\":\"latest timestamp to accept this transaction\",\"_minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\",\"_receiver\":\"recipient address\",\"_tokens\":\"token address list\"},\"returns\":{\"_0\":\"amount of LP token user minted and received\"}},\"calculateRemoveLiquidity(address[],uint256)\":{\"params\":{\"_amount\":\"the amount of LP tokens that would be burned on withdrawal\",\"_tokens\":\"token address list\"},\"returns\":{\"_0\":\"array of token balances that the user will receive\"}},\"calculateRemoveLiquidityOneToken(address,uint256)\":{\"params\":{\"_token\":\"address of tokens that will be withdrawn\",\"_tokenAmount\":\"the amount of LP token to burn\"},\"returns\":{\"_0\":\"calculated amount of underlying token available to withdraw\"}},\"calculateTokenAmount(address[],uint256[],bool)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"_amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to param _tokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"_deposit\":\"whether this is a deposit or a withdrawal\",\"_tokens\":\"an array of all token addresses for the pair,\"},\"returns\":{\"_0\":\"token amount the user will receive\"}},\"getA()\":{\"details\":\"See the StableSwap paper for details\",\"returns\":{\"_0\":\"A parameter\"}},\"getAPrecise()\":{\"details\":\"See the StableSwap paper for details\",\"returns\":{\"_0\":\"A parameter in its raw precision form\"}},\"getAdminBalance(uint256)\":{\"params\":{\"_index\":\"Index of the pooled token\"},\"returns\":{\"_0\":\"admin's token balance in the token's precision\"}},\"getAmountOut(address,address,uint256)\":{\"params\":{\"_dx\":\"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"_tokenFrom\":\"the token address the user wants to sell\",\"_tokenTo\":\"the token address the user wants to buy\"},\"returns\":{\"_0\":\"amount of tokens the user will receive\"}},\"getToken(uint8)\":{\"params\":{\"_index\":\"the index of the token\"},\"returns\":{\"_0\":\"address of the token at given index\"}},\"getTokenBalance(uint8)\":{\"params\":{\"_index\":\"the index of the token\"},\"returns\":{\"_0\":\"current balance of the pooled token at given index with token's native precision\"}},\"getTokenBalances()\":{\"returns\":{\"_0\":\"current balances of the pooled tokens\"}},\"getTokenIndex(address)\":{\"params\":{\"_tokenAddress\":\"address of the token\"},\"returns\":{\"_0\":\"the index of the given token address\"}},\"getVirtualPrice()\":{\"returns\":{\"_0\":\"the virtual price, scaled to the POOL_PRECISION_DECIMALS\"}},\"lpToken()\":{\"returns\":{\"_0\":\"lpToken addresse\"}},\"rampA(uint256,uint256)\":{\"params\":{\"_futureA\":\"the new A to ramp towards\",\"_futureTime\":\"timestamp when the new A should be reached\"}},\"removeLiquidity(uint256,address[],uint256[],address,uint256)\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"_amount\":\"the amount of LP tokens to burn\",\"_deadline\":\"latest timestamp to accept this transaction\",\"_minAmounts\":\"the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation\",\"_receiver\":\"recipient address\",\"_tokens\":\"token address list\"},\"returns\":{\"_0\":\"amounts of tokens user received\"}},\"removeLiquidityImbalance(address[],uint256[],uint256,address,uint256)\":{\"params\":{\"_amounts\":\"how much of each token to withdraw\",\"_deadline\":\"latest timestamp to accept this transaction\",\"_maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\",\"_receiver\":\"recipient address\",\"_tokens\":\"token address list\"},\"returns\":{\"_0\":\"amount of LP tokens burned\"}},\"removeLiquidityOneToken(uint256,address,uint256,address,uint256)\":{\"params\":{\"_deadline\":\"latest timestamp to accept this transaction\",\"_minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"_receiver\":\"recipient address\",\"_token\":\"address of the token you want to receive\",\"_tokenAmount\":\"the amount of the token you want to receive\"},\"returns\":{\"_0\":\"amount of chosen token user received\"}},\"setAdminFeeRate(uint256)\":{\"params\":{\"_newAdminFee\":\"new admin fee to be applied on future transactions\"}},\"setSwapFee(uint256)\":{\"params\":{\"_newSwapFee\":\"new swap fee to be applied on future transactions\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"_deadline\":\"latest timestamp to accept this transaction\",\"_dx\":\"the amount of tokens the user wants to swap from\",\"_minDy\":\"the min amount the user would like to receive, or revert.\",\"_receiver\":\"recipient address\",\"_tokenFrom\":\"the token address the user wants to sell\",\"_tokenTo\":\"the token address the user wants to buy\"}},\"tokens()\":{\"returns\":{\"_0\":\"all token addresses\"}}},\"title\":\"Swap - A StableSwap implementation in solidity.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address[],uint256[],uint256,address,uint256)\":{\"notice\":\"Add liquidity to the pool with the given amounts of tokens\"},\"calculateRemoveLiquidity(address[],uint256)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateRemoveLiquidityOneToken(address,uint256)\":{\"notice\":\"Calculate the amount of underlying token available to withdraw when withdrawing via only single token\"},\"calculateTokenAmount(address[],uint256[],bool)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running\"},\"claimFees()\":{\"notice\":\"Withdraw all admin fees to the contract factory manager\"},\"getA()\":{\"notice\":\"Return A, the amplification coefficient * n * (n - 1)\"},\"getAPrecise()\":{\"notice\":\"Return A in its raw precision form\"},\"getAdminBalance(uint256)\":{\"notice\":\"This function reads the accumulated amount of admin fees of the token with given index\"},\"getAmountOut(address,address,uint256)\":{\"notice\":\"Calculate amount of tokens you receive on swap\"},\"getToken(uint8)\":{\"notice\":\"Return address of the pooled token at given index. Reverts if _tokenIndex is out of range.\"},\"getTokenBalance(uint8)\":{\"notice\":\"Return current balance of the pooled token at given index\"},\"getTokenBalances()\":{\"notice\":\"Return current balances of the pooled tokens\"},\"getTokenIndex(address)\":{\"notice\":\"Return the index of the given token address. Reverts if no matching token is found.\"},\"getVirtualPrice()\":{\"notice\":\"Get the virtual price, to help calculate profit\"},\"lpToken()\":{\"notice\":\"Query lpToken addresse.\"},\"rampA(uint256,uint256)\":{\"notice\":\"Start ramping up or down A parameter towards given futureA and futureTime Checks if the change is too rapid, and commits the new A value only when it falls under the limit range.\"},\"removeLiquidity(uint256,address[],uint256[],address,uint256)\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"removeLiquidityImbalance(address[],uint256[],uint256,address,uint256)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"removeLiquidityOneToken(uint256,address,uint256,address,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"setAdminFeeRate(uint256)\":{\"notice\":\"Update the admin fee. Admin fee takes portion of the swap fee.\"},\"setSwapFee(uint256)\":{\"notice\":\"Update the swap fee to be applied on swaps\"},\"stopRampA()\":{\"notice\":\"Stop ramping A immediately. Reverts if ramp A is already stopped.\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Calculate amount of tokens you receive on swap\"},\"tokens()\":{\"notice\":\"Query all token addresses in pair.\"}},\"notice\":\"This contract is responsible for custody of closely pegged assets (eg. group of stablecoins) and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens in desired ratios for an exchange of the pool token that represents their share of the pool. Users can burn pool tokens and withdraw their share of token(s). Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets distributed to the LPs. In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which stops the ratio of the tokens in the pool from changing. Users can always withdraw their tokens via multi-asset withdraws.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StablePair.sol\":\"StablePair\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/StablePair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./utils/SwapUtils.sol\\\";\\nimport \\\"./utils/AmplificationUtils.sol\\\";\\nimport \\\"./utils/ERC20Call.sol\\\";\\nimport \\\"./interface/IPairERC20.sol\\\";\\nimport \\\"./interface/IPairFactory.sol\\\";\\n\\n/**\\n * @title Swap - A StableSwap implementation in solidity.\\n * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)\\n * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens\\n * in desired ratios for an exchange of the pool token that represents their share of the pool.\\n * Users can burn pool tokens and withdraw their share of token(s).\\n *\\n * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\\n * distributed to the LPs.\\n *\\n * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\\n * stops the ratio of the tokens in the pool from changing.\\n * Users can always withdraw their tokens via multi-asset withdraws.\\n *\\n * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's\\n * deployment size.\\n */\\ncontract StablePair is Initializable {\\n    using SwapUtils for SwapUtils.Swap;\\n    using AmplificationUtils for SwapUtils.Swap;\\n    using ERC20Call for address;\\n\\n    uint8 public constant PAIR_TYPE = 2;\\n    bool public constant AUTH = true;\\n\\n    address public factory;\\n\\n    uint256 private unlocked_;\\n\\n    // Struct storing data responsible for automatic market maker functionalities. In order to\\n    // access this data, this contract uses SwapUtils library. For more details, see SwapUtils.sol\\n    SwapUtils.Swap public swapStorage;\\n\\n    // Maps token address to an index in the pool. Used to prevent duplicate tokens in the pool.\\n    // getTokenIndex function also relies on this mapping to retrieve token index.\\n    mapping(address => uint8) internal tokenIndexes_;\\n\\n    /*** EVENTS ***/\\n\\n    // events replicated from SwapUtils to make the ABI easier for dumb\\n    // clients\\n    event TokenSwap(address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId);\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply);\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event SwapFee(address[] tokens, uint256[] swapFees);\\n    event NewAdminFee(uint256 newAdminFee);\\n    event NewSwapFee(uint256 newSwapFee);\\n    event NewWithdrawFee(uint256 newWithdrawFee);\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n    function initialize(address[] calldata _tokens, bytes calldata _data) external initializer {\\n        factory = msg.sender;\\n        unlocked_ = 1;\\n        string memory _lpTokenName = \\\"DForce Stable AMM - \\\";\\n        string memory _lpTokenSymbol = \\\"dAMM-Stable-\\\";\\n        string memory _separator = \\\"-\\\";\\n        uint8[] memory _decimals = new uint8[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _decimals[i] = IPairERC20(_tokens[i]).decimals();\\n            string memory _tokenSymbol = _tokens[i].callSymbol();\\n            if (i == _tokens.length - 1) _separator = \\\"\\\";\\n            _lpTokenName = string(abi.encodePacked(_lpTokenName, _tokenSymbol, _separator));\\n            _lpTokenSymbol = string(abi.encodePacked(_lpTokenSymbol, _tokenSymbol, _separator));\\n        }\\n\\n        (uint256 _swapFee, uint256 _adminFeeRate, uint256 _a, address _lpTokenTargetAddress) = abi.decode(\\n            _data,\\n            (uint256, uint256, uint256, address)\\n        );\\n        __SwapV2_init(_tokens, _decimals, _lpTokenName, _lpTokenSymbol, _a, _swapFee, _adminFeeRate, _lpTokenTargetAddress);\\n    }\\n\\n    /**\\n     * @notice Initializes this Swap contract with the given parameters.\\n     * This will also clone a LPToken contract that represents users'\\n     * LP positions. The owner of LPToken will be this contract - which means\\n     * only this contract is allowed to mint/burn tokens.\\n     *\\n     * @param _pooledTokens an array of ERC20s this pool will accept\\n     * @param _decimals the decimals to use for each pooled token,\\n     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS\\n     * @param _lpTokenName the long-form name of the token to be deployed\\n     * @param _lpTokenSymbol the short symbol for the token to be deployed\\n     * @param _a the amplification coefficient * n * (n - 1). See the\\n     * StableSwap paper for details\\n     * @param _fee default swap fee to be initialized with\\n     * @param _adminFee default adminFee to be initialized with\\n     * @param _lpTokenTargetAddress the address of an existing LPToken contract to use as a target\\n     */\\n    function __SwapV2_init(\\n        address[] memory _pooledTokens,\\n        uint8[] memory _decimals,\\n        string memory _lpTokenName,\\n        string memory _lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        address _lpTokenTargetAddress\\n    ) internal virtual {\\n        // Check _pooledTokens and precisions parameter\\n        require(_pooledTokens.length > 1, \\\"_pooledTokens.length <= 1\\\");\\n        require(_pooledTokens.length <= 32, \\\"_pooledTokens.length > 32\\\");\\n        require(_pooledTokens.length == _decimals.length, \\\"_pooledTokens decimals mismatch\\\");\\n\\n        uint256[] memory _precisionMultipliers = new uint256[](_decimals.length);\\n        IERC20[] memory _poolTokens = new IERC20[](_decimals.length);\\n\\n        for (uint8 i = 0; i < _pooledTokens.length; i++) {\\n            if (i > 0) {\\n                // Check if index is already used. Check if 0th element is a duplicate.\\n                require(tokenIndexes_[_pooledTokens[i]] == 0 && _pooledTokens[0] != _pooledTokens[i], \\\"Duplicate tokens\\\");\\n            }\\n            require(_pooledTokens[i] != address(0) && _pooledTokens[i] != address(this), \\\"The 0 address isn't an ERC-20\\\");\\n            require(_decimals[i] <= SwapUtils.POOL_PRECISION_DECIMALS, \\\"Token decimals exceeds max\\\");\\n            _precisionMultipliers[i] = 10 ** (uint256(SwapUtils.POOL_PRECISION_DECIMALS) - uint256(_decimals[i]));\\n            _poolTokens[i] = IERC20(_pooledTokens[i]);\\n            tokenIndexes_[_pooledTokens[i]] = i;\\n        }\\n\\n        // Check _a, _fee, _adminFee, _withdrawFee parameters\\n        require(_a < AmplificationUtils.MAX_A, \\\"_a exceeds maximum\\\");\\n        require(_fee < SwapUtils.MAX_SWAP_FEE, \\\"_fee exceeds maximum\\\");\\n        require(_adminFee < SwapUtils.MAX_ADMIN_FEE, \\\"_adminFee exceeds maximum\\\");\\n\\n        // Clone and initialize a LPToken contract\\n        LPToken _lpToken = LPToken(Clones.clone(_lpTokenTargetAddress));\\n        require(_lpToken.initialize(_lpTokenName, _lpTokenSymbol), \\\"could not init lpToken clone\\\");\\n\\n        // Initialize swapStorage struct\\n        swapStorage.lpToken = _lpToken;\\n        swapStorage.pooledTokens = _poolTokens;\\n        swapStorage.tokenPrecisionMultipliers = _precisionMultipliers;\\n        swapStorage.balances = new uint256[](_pooledTokens.length);\\n        swapStorage.initialA = _a * AmplificationUtils.A_PRECISION;\\n        swapStorage.futureA = _a * AmplificationUtils.A_PRECISION;\\n        // swapStorage.initialATime = 0;\\n        // swapStorage.futureATime = 0;\\n        swapStorage.swapFee = _fee;\\n        swapStorage.adminFee = _adminFee;\\n    }\\n\\n    /*** MODIFIERS ***/\\n\\n    /**\\n     * @notice Modifier to check sender against factory manager.\\n     */\\n    modifier onlyManager() {\\n        require(factory == msg.sender || IPairFactory(factory).manager() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice contract function lock modifier.\\n     */\\n    modifier lock() {\\n        require(unlocked_ == 1, \\\"Pair: LOCKED\\\");\\n        unlocked_ = 0;\\n        _;\\n        unlocked_ = 1;\\n    }\\n\\n    /**\\n     * @notice Modifier to check _deadline against current timestamp\\n     * @param _deadline latest timestamp to accept this transaction\\n     */\\n    modifier deadlineCheck(uint256 _deadline) {\\n        require(block.timestamp <= _deadline, \\\"Deadline not met\\\");\\n        _;\\n    }\\n\\n    /*** VIEW FUNCTIONS ***/\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @return A parameter\\n     */\\n    function getA() external view virtual returns (uint256) {\\n        return swapStorage.getA();\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision form\\n     * @dev See the StableSwap paper for details\\n     * @return A parameter in its raw precision form\\n     */\\n    function getAPrecise() external view virtual returns (uint256) {\\n        return swapStorage.getAPrecise();\\n    }\\n\\n    /**\\n     * @notice Return address of the pooled token at given index. Reverts if _tokenIndex is out of range.\\n     * @param _index the index of the token\\n     * @return address of the token at given index\\n     */\\n    function getToken(uint8 _index) public view virtual returns (address) {\\n        require(_index < swapStorage.pooledTokens.length, \\\"Out of range\\\");\\n        return address(swapStorage.pooledTokens[_index]);\\n    }\\n\\n    /**\\n     * @notice Query all token addresses in pair.\\n     * @return all token addresses\\n     */\\n    function tokens() external view returns (IERC20[] memory) {\\n        return swapStorage.pooledTokens;\\n    }\\n\\n    /**\\n     * @notice Query lpToken addresse.\\n     * @return lpToken addresse\\n     */\\n    function lpToken() external view returns (address) {\\n        return address(swapStorage.lpToken);\\n    }\\n\\n    /**\\n     * @notice Return the index of the given token address. Reverts if no matching\\n     * token is found.\\n     * @param _tokenAddress address of the token\\n     * @return the index of the given token address\\n     */\\n    function getTokenIndex(address _tokenAddress) external view virtual returns (uint8) {\\n        uint8 _index = tokenIndexes_[_tokenAddress];\\n        require(getToken(_index) == _tokenAddress, \\\"Token does not exist\\\");\\n        return _index;\\n    }\\n\\n    /**\\n     * @notice Return current balance of the pooled token at given index\\n     * @param _index the index of the token\\n     * @return current balance of the pooled token at given index with token's native precision\\n     */\\n    function getTokenBalance(uint8 _index) external view virtual returns (uint256) {\\n        require(_index < swapStorage.pooledTokens.length, \\\"Index out of range\\\");\\n        return swapStorage.balances[_index];\\n    }\\n\\n    /**\\n     * @notice Return current balances of the pooled tokens\\n     * @return current balances of the pooled tokens\\n     */\\n    function getTokenBalances() external view virtual returns (uint256[] memory) {\\n        return swapStorage.balances;\\n    }\\n\\n    /**\\n     * @notice Get the virtual price, to help calculate profit\\n     * @return the virtual price, scaled to the POOL_PRECISION_DECIMALS\\n     */\\n    function getVirtualPrice() external view virtual returns (uint256) {\\n        return swapStorage.getVirtualPrice();\\n    }\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param _tokenFrom the token address the user wants to sell\\n     * @param _tokenTo the token address the user wants to buy\\n     * @param _dx the amount of tokens the user wants to sell. If the token charges\\n     * a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return amount of tokens the user will receive\\n     */\\n    function getAmountOut(address _tokenFrom, address _tokenTo, uint256 _dx) external view returns (uint256) {\\n        return swapStorage.calculateSwap(tokenIndexes_[_tokenFrom], tokenIndexes_[_tokenTo], _dx);\\n    }\\n\\n    /**\\n     * @notice Convert the array index, according to tokenIndexes_.\\n     * @param _tokens an array of all token addresses for the pair,\\n     * @param _amounts an array of token amounts, corresponding to param _tokens.\\n     * @return _newAmounts amount of tokens after conversion\\n     */\\n    function _convertIndex(address[] calldata _tokens, uint256[] calldata _amounts) internal view returns (uint256[] memory _newAmounts) {\\n        _newAmounts = _amounts;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _newAmounts[tokenIndexes_[_tokens[i]]] = _amounts[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param _tokens an array of all token addresses for the pair,\\n     * @param _amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to param _tokens. The amount should be in each\\n     * pooled token's native precision. If a token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @param _deposit whether this is a deposit or a withdrawal\\n     * @return token amount the user will receive\\n     */\\n    function calculateTokenAmount(\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts,\\n        bool _deposit\\n    ) external view virtual returns (uint256) {\\n        return swapStorage.calculateTokenAmount(_convertIndex(_tokens, _amounts), _deposit);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of LP tokens\\n     * @param _tokens token address list\\n     * @param _amount the amount of LP tokens that would be burned on withdrawal\\n     * @return array of token balances that the user will receive\\n     */\\n    function calculateRemoveLiquidity(address[] calldata _tokens, uint256 _amount) external view virtual returns (uint256[] memory) {\\n        uint256[] memory _amounts = swapStorage.calculateRemoveLiquidity(_amount);\\n        uint256[] memory _actualAmounts = _amounts;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _actualAmounts[i] = _amounts[tokenIndexes_[_tokens[i]]];\\n        }\\n        return _actualAmounts;\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of underlying token available to withdraw\\n     * when withdrawing via only single token\\n     * @param _token address of tokens that will be withdrawn\\n     * @param _tokenAmount the amount of LP token to burn\\n     * @return calculated amount of underlying token\\n     * available to withdraw\\n     */\\n    function calculateRemoveLiquidityOneToken(address _token, uint256 _tokenAmount) external view virtual returns (uint256) {\\n        return swapStorage.calculateWithdrawOneToken(_tokenAmount, tokenIndexes_[_token]);\\n    }\\n\\n    /**\\n     * @notice This function reads the accumulated amount of admin fees of the token with given index\\n     * @param _index Index of the pooled token\\n     * @return admin's token balance in the token's precision\\n     */\\n    function getAdminBalance(uint256 _index) external view virtual returns (uint256) {\\n        return swapStorage.getAdminBalance(_index);\\n    }\\n\\n    /*** STATE MODIFYING FUNCTIONS ***/\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param _tokenFrom the token address the user wants to sell\\n     * @param _tokenTo the token address the user wants to buy\\n     * @param _dx the amount of tokens the user wants to swap from\\n     * @param _minDy the min amount the user would like to receive, or revert.\\n     * @param _receiver recipient address\\n     * @param _deadline latest timestamp to accept this transaction\\n     */\\n    function swap(\\n        address _tokenFrom,\\n        address _tokenTo,\\n        uint256 _dx,\\n        uint256 _minDy,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external lock deadlineCheck(_deadline) returns (uint256) {\\n        return swapStorage.swap(tokenIndexes_[_tokenFrom], tokenIndexes_[_tokenTo], _dx, _minDy, _receiver);\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool with the given amounts of tokens\\n     * @param _tokens token address list\\n     * @param _amounts the amounts of each token to add, in their native precision,corresponding to param _tokens\\n     * @param _minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @param _receiver recipient address\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return amount of LP token user minted and received\\n     */\\n    function addLiquidity(\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts,\\n        uint256 _minToMint,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external lock deadlineCheck(_deadline) returns (uint256) {\\n        return swapStorage.addLiquidity(_convertIndex(_tokens, _amounts), _minToMint, _receiver);\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param _amount the amount of LP tokens to burn\\n     * @param _tokens token address list\\n     * @param _minAmounts the minimum amounts of each token in the pool\\n     *        acceptable for this burn. Useful as a front-running mitigation\\n     * @param _receiver recipient address\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return amounts of tokens user received\\n     */\\n    function removeLiquidity(\\n        uint256 _amount,\\n        address[] calldata _tokens,\\n        uint256[] calldata _minAmounts,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external payable virtual lock deadlineCheck(_deadline) returns (uint256[] memory) {\\n        return swapStorage.removeLiquidity(_amount, _convertIndex(_tokens, _minAmounts), _receiver);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param _tokenAmount the amount of the token you want to receive\\n     * @param _token address of the token you want to receive\\n     * @param _minAmount the minimum amount to withdraw, otherwise revert\\n     * @param _receiver recipient address\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return amount of chosen token user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 _tokenAmount,\\n        address _token,\\n        uint256 _minAmount,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external lock deadlineCheck(_deadline) returns (uint256) {\\n        return swapStorage.removeLiquidityOneToken(_tokenAmount, tokenIndexes_[_token], _minAmount, _receiver);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param _tokens token address list\\n     * @param _amounts how much of each token to withdraw\\n     * @param _maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param _receiver recipient address\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalance(\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts,\\n        uint256 _maxBurnAmount,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external lock deadlineCheck(_deadline) returns (uint256) {\\n        return swapStorage.removeLiquidityImbalance(_convertIndex(_tokens, _amounts), _maxBurnAmount, _receiver);\\n    }\\n\\n    /*** ADMIN FUNCTIONS ***/\\n\\n    /**\\n     * @notice Withdraw all admin fees to the contract factory manager\\n     */\\n    function claimFees() external returns (uint256[] memory) {\\n        return swapStorage.withdrawAdminFees(IPairFactory(factory).manager());\\n    }\\n\\n    /**\\n     * @notice Update the admin fee. Admin fee takes portion of the swap fee.\\n     * @param _newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setAdminFeeRate(uint256 _newAdminFee) external onlyManager {\\n        swapStorage.setAdminFee(_newAdminFee);\\n    }\\n\\n    /**\\n     * @notice Update the swap fee to be applied on swaps\\n     * @param _newSwapFee new swap fee to be applied on future transactions\\n     */\\n    function setSwapFee(uint256 _newSwapFee) external payable onlyManager {\\n        swapStorage.setSwapFee(_newSwapFee);\\n    }\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA and futureTime\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param _futureA the new A to ramp towards\\n     * @param _futureTime timestamp when the new A should be reached\\n     */\\n    function rampA(uint256 _futureA, uint256 _futureTime) external payable onlyManager {\\n        swapStorage.rampA(_futureA, _futureTime);\\n    }\\n\\n    /**\\n     * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.\\n     */\\n    function stopRampA() external payable onlyManager {\\n        swapStorage.stopRampA();\\n    }\\n}\\n\",\"keccak256\":\"0x36a372f9955b12ab4f3b2146dbd0c423ea4e4d6639859ef89db965651a6dfeb5\",\"license\":\"MIT\"},\"contracts/interface/IPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0x598229a9afa6b18137787a078544ce8fa412e47fe88f6f0426afb94bc081cbf0\",\"license\":\"MIT\"},\"contracts/interface/IPairFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPairFactory {\\n    //1: volatile pair, 2: stable pair, 3: yeild pair\\n    struct PairParams {\\n        address _impl;\\n        bool _auth;\\n    }\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function createPair(\\n        address[] memory _tokens,\\n        uint8 _pairType,\\n        bytes memory data\\n    ) external returns (address pair);\\n\\n    function manager() external view returns (address);\\n\\n    function getPairAddress(address[] memory _tokens, uint8 _type) external view returns (address);\\n\\n    function pairTypeValues() external view returns (address[] memory);\\n\\n    function atPairType(uint256 _index) external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x62262689113fab2ee588b8085eaa054703572747ec238ff77f773e51afa82c68\",\"license\":\"MIT\"},\"contracts/lib/PairERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interface/IPairERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nabstract contract PairERC20 is IPairERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId = block.chainid;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"), keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), chainId, address(this))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"PairERC20: EXPIRED\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"PairERC20: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n\\n    function _setNameAndSymbol(string memory _name, string memory _symbol) internal {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n}\\n\",\"keccak256\":\"0x4cd88ef95ee21f38e612bdf5bde9190cc2de340580f7982824ce582933de8f5b\",\"license\":\"MIT\"},\"contracts/utils/AmplificationUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./SwapUtils.sol\\\";\\n\\n/**\\n * @title AmplificationUtils library\\n * @notice A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct.\\n * This library assumes the struct is fully validated.\\n */\\nlibrary AmplificationUtils {\\n    event RampA(\\n        uint256 oldA,\\n        uint256 newA,\\n        uint256 initialTime,\\n        uint256 futureTime\\n    );\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n    // Constant values used in ramping A calculations\\n    uint256 internal constant A_PRECISION = 100;\\n    uint256 internal constant MAX_A = 10**6;\\n    uint256 private constant MAX_A_CHANGE = 2;\\n    uint256 private constant MIN_RAMP_TIME = 14 days;\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter\\n     */\\n    function getA(SwapUtils.Swap storage self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (_getAPrecise(self) / A_PRECISION);\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function getAPrecise(SwapUtils.Swap storage self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function _getAPrecise(SwapUtils.Swap storage self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 t1 = self.futureATime; // time when ramp is finished\\n        uint256 a1 = self.futureA; // final A value when ramp is finished\\n\\n        if (block.timestamp < t1) {\\n            uint256 t0 = self.initialATime; // time when ramp is started\\n            uint256 a0 = self.initialA; // initial A value when ramp is started\\n            if (a1 > a0) {\\n                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\\n                return a0 + (((a1 - a0) * (block.timestamp - t0)) / (t1 - t0));\\n            } else {\\n                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\\n                return a0 - (((a0 - a1) * (block.timestamp - t0)) / (t1 - t0));\\n            }\\n        } else {\\n            return a1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param self Swap struct to update\\n     * @param futureA_ the new A to ramp towards\\n     * @param futureTime_ timestamp when the new A should be reached\\n     */\\n    function rampA(\\n        SwapUtils.Swap storage self,\\n        uint256 futureA_,\\n        uint256 futureTime_\\n    ) internal {\\n        require(\\n            block.timestamp >= (self.initialATime + (1 days)),\\n            \\\"Wait 1 day before starting ramp\\\"\\n        );\\n        require(\\n            futureTime_ >= (block.timestamp + MIN_RAMP_TIME),\\n            \\\"Insufficient ramp time\\\"\\n        );\\n        require(\\n            futureA_ > 0 && futureA_ < MAX_A,\\n            \\\"futureA_ must be > 0 and < MAX_A\\\"\\n        );\\n\\n        uint256 initialAPrecise = _getAPrecise(self);\\n        uint256 futureAPrecise = futureA_ * A_PRECISION;\\n\\n        if (futureAPrecise < initialAPrecise) {\\n            require(\\n                (futureAPrecise * MAX_A_CHANGE) >= initialAPrecise,\\n                \\\"futureA_ is too small\\\"\\n            );\\n        } else {\\n            require(\\n                futureAPrecise <= (initialAPrecise * MAX_A_CHANGE),\\n                \\\"futureA_ is too large\\\"\\n            );\\n        }\\n\\n        self.initialA = initialAPrecise;\\n        self.futureA = futureAPrecise;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = futureTime_;\\n\\n        emit RampA(\\n            initialAPrecise,\\n            futureAPrecise,\\n            block.timestamp,\\n            futureTime_\\n        );\\n    }\\n\\n    /**\\n     * @notice Stops ramping A immediately. Once this function is called, rampA()\\n     * cannot be called for another 24 hours\\n     * @param self Swap struct to update\\n     */\\n    function stopRampA(SwapUtils.Swap storage self) internal {\\n        require(self.futureATime > block.timestamp, \\\"Ramp is already stopped\\\");\\n\\n        uint256 currentA = _getAPrecise(self);\\n        self.initialA = currentA;\\n        self.futureA = currentA;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = block.timestamp;\\n\\n        emit StopRampA(currentA, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x357843dadc784aac211563379ff9cf1e0755b232e945b8cb454ff7a074f5ffad\",\"license\":\"MIT\"},\"contracts/utils/ERC20Call.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nlibrary ERC20Call {\\n    function callSymbol(\\n        address _token\\n    ) internal view returns (string memory _symbol) {\\n        if (_token != address(0)) {\\n            (bool _success, bytes memory _res) = _token.staticcall(\\n                abi.encodeWithSignature(\\\"symbol()\\\")\\n            );\\n            if (_success)\\n                _symbol = _res.length == 32\\n                    ? bytes32ToString(abi.decode(_res, (bytes32)))\\n                    : abi.decode(_res, (string));\\n        }\\n    }\\n\\n    function bytes32ToString(\\n        bytes32 _bytes32\\n    ) internal pure returns (string memory _result) {\\n        uint8 _length = 0;\\n        while (_bytes32[_length] != 0 && _length < 32) {\\n            _length++;\\n        }\\n        assembly {\\n            _result := mload(0x40)\\n            // new \\\"memory end\\\" including padding (the string isn't larger than 32 bytes)\\n            mstore(0x40, add(_result, 0x40))\\n            // store length in memory\\n            mstore(_result, _length)\\n            // write actual data\\n            mstore(add(_result, 0x20), _bytes32)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40cbf1c3deba1fe780b8e0bfe4ce3f7cb845f7e82300070f4ad9f73ac1e1805c\",\"license\":\"MIT\"},\"contracts/utils/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// import \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../lib/PairERC20.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\n */\\ncontract LPToken is OwnableUpgradeable, PairERC20 {\\n    /**\\n     * @notice Initializes this LPToken contract with the given name and symbol\\n     * @dev The caller of this function will become the owner. A Swap contract should call this\\n     * in its initializer function.\\n     * @param name name of this token\\n     * @param symbol symbol of this token\\n     */\\n    function initialize(string memory name, string memory symbol)\\n        external\\n        initializer\\n        returns (bool)\\n    {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        _setNameAndSymbol(name, symbol);\\n        return true;\\n    }\\n\\n    modifier addressCheck(address recipient) {\\n        require(recipient != address(this), \\\"LPToken: cannot send to itself\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Mints the given amount of LPToken to the recipient.\\n     * @dev only owner can call this mint function\\n     * @param recipient address of account to receive the tokens\\n     * @param amount amount of tokens to mint\\n     */\\n    function mint(address recipient, uint256 amount) external onlyOwner addressCheck(recipient) {\\n        require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n        _mint(recipient, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal override addressCheck(to) {\\n        super._transfer(from, to, value);\\n    }\\n\\n    function burnFrom(address from, uint256 value) external {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender] - value;\\n        }\\n        _burn(from, value);\\n    }\\n}\\n\",\"keccak256\":\"0xad56ca3807f0fa19dc4e7d73936b92be429adf16f874f25a06f2a75e015c95e8\",\"license\":\"MIT\"},\"contracts/utils/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title MathUtils library\\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\\n * differences between two uint256.\\n */\\nlibrary MathUtils {\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n        return (difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\",\"keccak256\":\"0x83a8d3eac7ac6cc3a3bbb2607208a9798c889a5418ffb4b13219851a62e91012\",\"license\":\"MIT\"},\"contracts/utils/SwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./AmplificationUtils.sol\\\";\\nimport \\\"./LPToken.sol\\\";\\nimport \\\"./MathUtils.sol\\\";\\n\\n/**\\n * @title SwapUtils library\\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\\n * Admin functions should be protected within contracts using this library.\\n */\\nlibrary SwapUtils {\\n    using SafeERC20 for IERC20;\\n    using MathUtils for uint256;\\n\\n    /*** EVENTS ***/\\n\\n    event TokenSwap(\\n        address indexed buyer,\\n        uint256 tokensSold,\\n        uint256 tokensBought,\\n        uint128 soldId,\\n        uint128 boughtId\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n\\n    event SwapFee(address[] tokens, uint256[] swapFees);\\n    event NewAdminFee(uint256 newAdminFee);\\n    event NewSwapFee(uint256 newSwapFee);\\n\\n    struct Swap {\\n        // variables around the ramp management of A,\\n        // the amplification coefficient * n * (n - 1)\\n        // see https://www.curve.fi/stableswap-paper.pdf for details\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // fee calculation\\n        uint256 swapFee;\\n        uint256 adminFee;\\n        LPToken lpToken;\\n        // contract references for all tokens being pooled\\n        IERC20[] pooledTokens;\\n        // multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS\\n        // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC\\n        // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10\\n        uint256[] tokenPrecisionMultipliers;\\n        // the pool balance of each token, in the token's precision\\n        // the contract's actual token balance might differ\\n        uint256[] balances;\\n    }\\n\\n    // Struct storing variables used in calculations in the\\n    // calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n    struct CalculateWithdrawOneTokenDYInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 newY;\\n        uint256 feePerToken;\\n        uint256 preciseA;\\n    }\\n\\n    // Struct storing variables used in calculations in the\\n    // {add,remove}Liquidity functions to avoid stack too deep errors\\n    struct ManageLiquidityInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 d2;\\n        uint256 preciseA;\\n        LPToken lpToken;\\n        uint256 totalSupply;\\n        uint256[] balances;\\n        uint256[] multipliers;\\n    }\\n\\n    struct SwapFeeInfo {\\n        uint256 adminFee;\\n        address[] tokens;\\n        uint256[] swapFees;\\n    }\\n\\n    // the precision all pools tokens will be converted to\\n    uint8 public constant POOL_PRECISION_DECIMALS = 18;\\n\\n    // the denominator used to calculate admin and LP fees. For example, an\\n    // LP fee might be something like tradeAmount * (fee) / (FEE_DENOMINATOR)\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    // Max swap fee is 1% or 100bps of each swap\\n    uint256 public constant MAX_SWAP_FEE = 10**8;\\n\\n    // Max adminFee is 100% of the swapFee\\n    // adminFee does not add additional fee on top of swapFee\\n    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\\n    // users but only on the earnings of LPs\\n    uint256 public constant MAX_ADMIN_FEE = 10**10;\\n\\n    // Constant value used as max loop limit\\n    uint256 private constant MAX_LOOP_LIMIT = 256;\\n\\n    /*** VIEW & PURE FUNCTIONS ***/\\n\\n    function _getAPrecise(Swap storage self) internal view returns (uint256) {\\n        return AmplificationUtils._getAPrecise(self);\\n    }\\n\\n    /**\\n     * @notice Calculate the dy, the amount of selected token that user receives and\\n     * the fee of withdrawing in one token\\n     * @param tokenAmount the amount to withdraw in the pool's precision\\n     * @param tokenIndex which token will be withdrawn\\n     * @param self Swap struct to read from\\n     * @return the amount of token user will receive\\n     */\\n    function calculateWithdrawOneToken(\\n        Swap storage self,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256) {\\n        (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\\n            self,\\n            tokenAmount,\\n            tokenIndex,\\n            self.lpToken.totalSupply()\\n        );\\n        return availableTokenAmount;\\n    }\\n\\n    function _calculateWithdrawOneToken(\\n        Swap storage self,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 totalSupply\\n    ) internal view returns (uint256, uint256) {\\n        uint256 dy;\\n        uint256 newY;\\n        uint256 currentY;\\n\\n        (dy, newY, currentY) = calculateWithdrawOneTokenDY(\\n            self,\\n            tokenIndex,\\n            tokenAmount,\\n            totalSupply\\n        );\\n\\n        // dy_0 (without fees)\\n        // dy, dy_0 - dy\\n\\n        uint256 dySwapFee = ((currentY - newY) /\\n            self.tokenPrecisionMultipliers[tokenIndex]) - dy;\\n\\n        return (dy, dySwapFee);\\n    }\\n\\n    /**\\n     * @notice Calculate the dy of withdrawing in one token\\n     * @param self Swap struct to read from\\n     * @param tokenIndex which token will be withdrawn\\n     * @param tokenAmount the amount to withdraw in the pools precision\\n     * @return the d and the new y after withdrawing one token\\n     */\\n    function calculateWithdrawOneTokenDY(\\n        Swap storage self,\\n        uint8 tokenIndex,\\n        uint256 tokenAmount,\\n        uint256 totalSupply\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Get the current D, then solve the stableswap invariant\\n        // y_i for D - tokenAmount\\n        uint256[] memory xp = _xp(self);\\n\\n        require(tokenIndex < xp.length, \\\"Token index out of range\\\");\\n\\n        CalculateWithdrawOneTokenDYInfo\\n            memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n        v.preciseA = _getAPrecise(self);\\n        v.d0 = getD(xp, v.preciseA);\\n        v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\\n\\n        require(tokenAmount <= xp[tokenIndex], \\\"Withdraw exceeds available\\\");\\n\\n        v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);\\n\\n        uint256[] memory xpReduced = new uint256[](xp.length);\\n\\n        v.feePerToken = _feePerToken(self.swapFee, xp.length);\\n        for (uint256 i = 0; i < xp.length; i++) {\\n            uint256 xpi = xp[i];\\n            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\\n            // else dxExpected = xp[i] - (xp[i] * d1 / d0)\\n            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\\n            xpReduced[i] =\\n                xpi -\\n                (((\\n                    (i == tokenIndex)\\n                        ? ((xpi * v.d1) / v.d0) - v.newY\\n                        : xpi - ((xpi * v.d1) / v.d0)\\n                ) * v.feePerToken) / FEE_DENOMINATOR);\\n        }\\n\\n        uint256 dy = xpReduced[tokenIndex] -\\n            (getYD(v.preciseA, tokenIndex, xpReduced, v.d1));\\n        dy = (dy - 1) / self.tokenPrecisionMultipliers[tokenIndex];\\n\\n        return (dy, v.newY, xp[tokenIndex]);\\n    }\\n\\n    /**\\n     * @notice Calculate the price of a token in the pool with given\\n     * precision-adjusted balances and a particular D.\\n     *\\n     * @dev This is accomplished via solving the invariant iteratively.\\n     * See the StableSwap paper and Curve.fi implementation for further details.\\n     *\\n     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     * x_1**2 + b*x_1 = c\\n     * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     *\\n     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\\n     * @param tokenIndex Index of token we are calculating for.\\n     * @param xp a precision-adjusted set of pool balances. Array should be\\n     * the same cardinality as the pool.\\n     * @param d the stableswap invariant\\n     * @return the price of the token, in the same precision as in xp\\n     */\\n    function getYD(\\n        uint256 a,\\n        uint8 tokenIndex,\\n        uint256[] memory xp,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        uint256 numTokens = xp.length;\\n        require(tokenIndex < numTokens, \\\"Token not found\\\");\\n\\n        uint256 c = d;\\n        uint256 s;\\n        uint256 nA = a * (numTokens);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (i != tokenIndex) {\\n                s = s + xp[i];\\n                c = (c * d) / (xp[i] * (numTokens));\\n                // If we were to protect the division loss we would have to keep the denominator separate\\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n                // c = c * D * D * D * ... overflow!\\n            }\\n        }\\n        c = (c * d * AmplificationUtils.A_PRECISION) / (nA * numTokens);\\n\\n        uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\\n        uint256 yPrev;\\n        uint256 y = d;\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = ((y * y) + c) / ((y * 2) + b - d);\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\\n     * as the pool.\\n     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n     * See the StableSwap paper for details\\n     * @return the invariant, at the precision of the pool\\n     */\\n    function getD(uint256[] memory xp, uint256 a)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 numTokens = xp.length;\\n        uint256 s;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            s = s + xp[i];\\n        }\\n        if (s == 0) {\\n            return 0;\\n        }\\n\\n        uint256 prevD;\\n        uint256 d = s;\\n        uint256 nA = a * numTokens;\\n\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            uint256 dP = d;\\n            for (uint256 j = 0; j < numTokens; j++) {\\n                dP = (dP * d) / (xp[j] * numTokens);\\n                // If we were to protect the division loss we would have to keep the denominator separate\\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n                // dP = dP * D * D * D * ... overflow!\\n            }\\n            prevD = d;\\n            d =\\n                ((((nA * s) / AmplificationUtils.A_PRECISION) +\\n                    (dP * numTokens)) * d) /\\n                ((((nA - AmplificationUtils.A_PRECISION) * d) /\\n                    AmplificationUtils.A_PRECISION) + ((numTokens + 1) * dP));\\n            if (d.within1(prevD)) {\\n                return d;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"D does not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Given a set of balances and precision multipliers, return the\\n     * precision-adjusted balances.\\n     *\\n     * @param balances an array of token balances, in their native precisions.\\n     * These should generally correspond with pooled tokens.\\n     *\\n     * @param precisionMultipliers an array of multipliers, corresponding to\\n     * the amounts in the balances array. When multiplied together they\\n     * should yield amounts at the pool's precision.\\n     *\\n     * @return an array of amounts \\\"scaled\\\" to the pool's precision\\n     */\\n    function _xp(\\n        uint256[] memory balances,\\n        uint256[] memory precisionMultipliers\\n    ) internal pure returns (uint256[] memory) {\\n        uint256 numTokens = balances.length;\\n        require(\\n            numTokens == precisionMultipliers.length,\\n            \\\"Balances must match multipliers\\\"\\n        );\\n        uint256[] memory xp = new uint256[](numTokens);\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            xp[i] = balances[i] * precisionMultipliers[i];\\n        }\\n        return xp;\\n    }\\n\\n    /**\\n     * @notice Return the precision-adjusted balances of all tokens in the pool\\n     * @param self Swap struct to read from\\n     * @return the pool balances \\\"scaled\\\" to the pool's precision, allowing\\n     * them to be more easily compared.\\n     */\\n    function _xp(Swap storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenPrecisionMultipliers);\\n    }\\n\\n    /**\\n     * @notice Get the virtual price, to help calculate profit\\n     * @param self Swap struct to read from\\n     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\\n     */\\n    function getVirtualPrice(Swap storage self)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 d = getD(_xp(self), _getAPrecise(self));\\n        LPToken lpToken = self.lpToken;\\n        uint256 supply = lpToken.totalSupply();\\n        if (supply > 0) {\\n            return (d * (10**uint256(POOL_PRECISION_DECIMALS))) / supply;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate the new balances of the tokens given the indexes of the token\\n     * that is swapped from (FROM) and the token that is swapped to (TO).\\n     * This function is used as a helper function to calculate how much TO token\\n     * the user should receive on swap.\\n     *\\n     * @param preciseA precise form of amplification coefficient\\n     * @param tokenIndexFrom index of FROM token\\n     * @param tokenIndexTo index of TO token\\n     * @param x the new total amount of FROM token\\n     * @param xp balances of the tokens in the pool\\n     * @return the amount of TO token that should remain in the pool\\n     */\\n    function getY(\\n        uint256 preciseA,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 x,\\n        uint256[] memory xp\\n    ) internal pure returns (uint256) {\\n        uint256 numTokens = xp.length;\\n        require(\\n            tokenIndexFrom != tokenIndexTo,\\n            \\\"Can't compare token to itself\\\"\\n        );\\n        require(\\n            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\\n            \\\"Tokens must be in pool\\\"\\n        );\\n\\n        uint256 d = getD(xp, preciseA);\\n        uint256 c = d;\\n        uint256 s;\\n        uint256 nA = numTokens * preciseA;\\n\\n        uint256 _x;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (i == tokenIndexFrom) {\\n                _x = x;\\n            } else if (i != tokenIndexTo) {\\n                _x = xp[i];\\n            } else {\\n                continue;\\n            }\\n            s = s + _x;\\n            c = (c * d) / (_x * numTokens);\\n            // If we were to protect the division loss we would have to keep the denominator separate\\n            // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n            // c = c * D * D * D * ... overflow!\\n        }\\n        c = (c * d * AmplificationUtils.A_PRECISION) / (nA * numTokens);\\n        uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\\n        uint256 yPrev;\\n        uint256 y = d;\\n\\n        // iterative approximation\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (y * 2 + b - d);\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Externally calculates a swap between two tokens.\\n     * @param self Swap struct to read from\\n     * @param tokenIndexFrom the token to sell\\n     * @param tokenIndexTo the token to buy\\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @return dy the number of tokens the user will get\\n     */\\n    function calculateSwap(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 dy) {\\n        (dy, ) = _calculateSwap(\\n            self,\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            dx,\\n            self.balances\\n        );\\n    }\\n\\n    /**\\n     * @notice Internally calculates a swap between two tokens.\\n     *\\n     * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n     * using the token contracts.\\n     *\\n     * @param self Swap struct to read from\\n     * @param tokenIndexFrom the token to sell\\n     * @param tokenIndexTo the token to buy\\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @return dy the number of tokens the user will get\\n     * @return dyFee the associated fee\\n     */\\n    function _calculateSwap(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256[] memory balances\\n    ) internal view returns (uint256 dy, uint256 dyFee) {\\n        uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n        uint256[] memory xp = _xp(balances, multipliers);\\n        require(\\n            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,\\n            \\\"Token index out of range\\\"\\n        );\\n        uint256 x = dx * multipliers[tokenIndexFrom] + xp[tokenIndexFrom];\\n        uint256 y = getY(\\n            _getAPrecise(self),\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            x,\\n            xp\\n        );\\n        dy = xp[tokenIndexTo] - y - 1;\\n        dyFee = (dy * self.swapFee) / FEE_DENOMINATOR;\\n        dy = (dy - dyFee) / multipliers[tokenIndexTo];\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of\\n     * LP tokens\\n     *\\n     * @param amount the amount of LP tokens that would to be burned on\\n     * withdrawal\\n     * @return array of amounts of tokens user will receive\\n     */\\n    function calculateRemoveLiquidity(Swap storage self, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return\\n            _calculateRemoveLiquidity(\\n                self.balances,\\n                amount,\\n                self.lpToken.totalSupply()\\n            );\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        uint256[] memory balances,\\n        uint256 amount,\\n        uint256 totalSupply\\n    ) internal pure returns (uint256[] memory) {\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256[] memory amounts = new uint256[](balances.length);\\n\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amounts[i] = (balances[i] * amount) / totalSupply;\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param self Swap struct to read from\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pooledTokens. The amount should be in each\\n     * pooled token's native precision. If a token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return if deposit was true, total amount of lp token that will be minted and if\\n     * deposit was false, total amount of lp token that will be burned\\n     */\\n    function calculateTokenAmount(\\n        Swap storage self,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 a = _getAPrecise(self);\\n        uint256[] memory balances = self.balances;\\n        uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n\\n        uint256 d0 = getD(_xp(balances, multipliers), a);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            if (deposit) {\\n                balances[i] = balances[i] + amounts[i];\\n            } else {\\n                if (amounts[i] > balances[i]) {\\n                    revert(\\\"Cannot withdraw more than available\\\");\\n                } else {\\n                    unchecked {\\n                        balances[i] = balances[i] - amounts[i];\\n                    }\\n                }\\n            }\\n        }\\n        uint256 d1 = getD(_xp(balances, multipliers), a);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (deposit) {\\n            return (((d1 - d0) * totalSupply) / d0);\\n        } else {\\n            return (((d0 - d1) * totalSupply) / d0);\\n        }\\n    }\\n\\n    /**\\n     * @notice return accumulated amount of admin fees of the token with given index\\n     * @param self Swap struct to read from\\n     * @param index Index of the pooled token\\n     * @return admin balance in the token's precision\\n     */\\n    function getAdminBalance(Swap storage self, uint256 index)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(index < self.pooledTokens.length, \\\"Token index out of range\\\");\\n        return\\n            self.pooledTokens[index].balanceOf(address(this)) -\\n            self.balances[index];\\n    }\\n\\n    /**\\n     * @notice internal helper function to calculate fee per token multiplier used in\\n     * swap fee calculations\\n     * @param swapFee swap fee for the tokens\\n     * @param numTokens number of tokens pooled\\n     */\\n    function _feePerToken(uint256 swapFee, uint256 numTokens)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return ((swapFee * numTokens) / ((numTokens - 1) * 4));\\n    }\\n\\n    /*** STATE MODIFYING FUNCTIONS ***/\\n\\n    /**\\n     * @notice swap two tokens in the pool\\n     * @param self Swap struct to read from and write to\\n     * @param tokenIndexFrom the token the user wants to sell\\n     * @param tokenIndexTo the token the user wants to buy\\n     * @param dx the amount of tokens the user wants to sell\\n     * @param minDy the min amount the user would like to receive, or revert.\\n     * @param receiver recipient address\\n     * @return amount of token user received on swap\\n     */\\n    function swap(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address receiver\\n    ) external returns (uint256) {\\n        {\\n            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\\n            require(\\n                dx <= tokenFrom.balanceOf(msg.sender),\\n                \\\"Cannot swap more than you own\\\"\\n            );\\n            // Transfer tokens first to see if a fee was charged on transfer\\n            uint256 beforeBalance = tokenFrom.balanceOf(address(this));\\n            tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\\n\\n            // Use the actual transferred amount for AMM math\\n            dx = tokenFrom.balanceOf(address(this)) - beforeBalance;\\n        }\\n\\n        uint256 dy;\\n        uint256 dyFee;\\n        uint256[] memory balances = self.balances;\\n        (dy, dyFee) = _calculateSwap(\\n            self,\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            dx,\\n            balances\\n        );\\n        require(dy >= minDy, \\\"Swap didn't result in min tokens\\\");\\n\\n        uint256 dyAdminFee = (((dyFee * self.adminFee) / FEE_DENOMINATOR) /\\n            self.tokenPrecisionMultipliers[tokenIndexTo]);\\n\\n        self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\n        self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\n\\n        self.pooledTokens[tokenIndexTo].safeTransfer(receiver, dy);\\n\\n        emit TokenSwap(receiver, dx, dy, tokenIndexFrom, tokenIndexTo);\\n        SwapFeeInfo memory swapFeeInfo;\\n        swapFeeInfo.tokens = new address[](1);\\n        swapFeeInfo.swapFees = new uint256[](1);\\n        swapFeeInfo.tokens[0] = address(self.pooledTokens[tokenIndexTo]);\\n        swapFeeInfo.swapFees[0] = dyFee - dyAdminFee;\\n        emit SwapFee(swapFeeInfo.tokens, swapFeeInfo.swapFees);\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool\\n     * @param self Swap struct to read from and write to\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\n     * @param receiver recipient address\\n     * @return amount of LP token user received\\n     */\\n    function addLiquidity(\\n        Swap storage self,\\n        uint256[] memory amounts,\\n        uint256 minToMint,\\n        address receiver\\n    ) external returns (uint256) {\\n        IERC20[] memory pooledTokens = self.pooledTokens;\\n        require(\\n            amounts.length == pooledTokens.length,\\n            \\\"Amounts must match pooled tokens\\\"\\n        );\\n\\n        // current state\\n        ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n            0,\\n            0,\\n            0,\\n            _getAPrecise(self),\\n            self.lpToken,\\n            0,\\n            self.balances,\\n            self.tokenPrecisionMultipliers\\n        );\\n        v.totalSupply = v.lpToken.totalSupply();\\n\\n        if (v.totalSupply != 0) {\\n            v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\\n        }\\n\\n        uint256[] memory newBalances = new uint256[](pooledTokens.length);\\n\\n        for (uint256 i = 0; i < pooledTokens.length; i++) {\\n            require(\\n                v.totalSupply != 0 || amounts[i] > 0,\\n                \\\"Must supply all tokens in pool\\\"\\n            );\\n\\n            // Transfer tokens first to see if a fee was charged on transfer\\n            if (amounts[i] != 0) {\\n                uint256 beforeBalance = pooledTokens[i].balanceOf(\\n                    address(this)\\n                );\\n                pooledTokens[i].safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    amounts[i]\\n                );\\n\\n                // Update the amounts[] with actual transfer amount\\n                amounts[i] =\\n                    pooledTokens[i].balanceOf(address(this)) -\\n                    beforeBalance;\\n            }\\n\\n            newBalances[i] = v.balances[i] + amounts[i];\\n        }\\n        // invariant after change\\n        v.d1 = getD(_xp(newBalances, v.multipliers), v.preciseA);\\n        require(v.d1 > v.d0, \\\"D should increase\\\");\\n        // updated to reflect fees and calculate the user's LP tokens\\n        v.d2 = v.d1;\\n        uint256[] memory fees = new uint256[](pooledTokens.length);\\n\\n        if (v.totalSupply != 0) {\\n            uint256 feePerToken = _feePerToken(\\n                self.swapFee,\\n                pooledTokens.length\\n            );\\n            SwapFeeInfo memory swapFeeInfo;\\n            swapFeeInfo.tokens = new address[](fees.length);\\n            swapFeeInfo.swapFees = new uint256[](fees.length);\\n            for (uint256 i = 0; i < pooledTokens.length; i++) {\\n                uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n                fees[i] =\\n                    (feePerToken * idealBalance.difference(newBalances[i])) /\\n                    FEE_DENOMINATOR;\\n                swapFeeInfo.adminFee = (fees[i] * self.adminFee) / FEE_DENOMINATOR;\\n                self.balances[i] =\\n                    newBalances[i] - swapFeeInfo.adminFee;\\n                    // newBalances[i] -\\n                    // ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] = newBalances[i] - fees[i];\\n                swapFeeInfo.tokens[i] = address(pooledTokens[i]);\\n                swapFeeInfo.swapFees[i] = fees[i] - swapFeeInfo.adminFee;\\n            }\\n            emit SwapFee(swapFeeInfo.tokens, swapFeeInfo.swapFees);\\n            v.d2 = getD(_xp(newBalances, v.multipliers), v.preciseA);\\n        } else {\\n            // the initial depositor doesn't pay fees\\n            self.balances = newBalances;\\n        }\\n\\n        uint256 toMint;\\n        if (v.totalSupply == 0) {\\n            toMint = v.d1;\\n        } else {\\n            toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\\n        }\\n\\n        require(toMint >= minToMint, \\\"Couldn't mint min requested\\\");\\n\\n        // mint the user's LP tokens\\n        v.lpToken.mint(receiver, toMint);\\n\\n        emit AddLiquidity(\\n            receiver,\\n            amounts,\\n            fees,\\n            v.d1,\\n            v.totalSupply + toMint\\n        );\\n\\n        return toMint;\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param self Swap struct to read from and write to\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     * acceptable for this burn. Useful as a front-running mitigation\\n     * @param receiver recipient address\\n     * @return amounts of tokens the user received\\n     */\\n    function removeLiquidity(\\n        Swap storage self,\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        address receiver\\n    ) external returns (uint256[] memory) {\\n        LPToken lpToken = self.lpToken;\\n        IERC20[] memory pooledTokens = self.pooledTokens;\\n        require(amount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n        require(\\n            minAmounts.length == pooledTokens.length,\\n            \\\"minAmounts must match poolTokens\\\"\\n        );\\n\\n        uint256[] memory balances = self.balances;\\n        uint256 totalSupply = lpToken.totalSupply();\\n\\n        uint256[] memory amounts = _calculateRemoveLiquidity(\\n            balances,\\n            amount,\\n            totalSupply\\n        );\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"amounts[i] < minAmounts[i]\\\");\\n            self.balances[i] = balances[i] - amounts[i];\\n            pooledTokens[i].safeTransfer(receiver, amounts[i]);\\n        }\\n\\n        lpToken.burnFrom(msg.sender, amount);\\n\\n        emit RemoveLiquidity(receiver, amounts, totalSupply - amount);\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token.\\n     * @param self Swap struct to read from and write to\\n     * @param tokenAmount the amount of the lp tokens to burn\\n     * @param tokenIndex the index of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @param receiver recipient address\\n     * @return amount chosen token that user received\\n     */\\n    function removeLiquidityOneToken(\\n        Swap storage self,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        address receiver\\n    ) external returns (uint256) {\\n        LPToken lpToken = self.lpToken;\\n        IERC20[] memory pooledTokens = self.pooledTokens;\\n\\n        require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n        require(tokenIndex < pooledTokens.length, \\\"Token not found\\\");\\n\\n        uint256 totalSupply = lpToken.totalSupply();\\n\\n        (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(\\n            self,\\n            tokenAmount,\\n            tokenIndex,\\n            totalSupply\\n        );\\n\\n        require(dy >= minAmount, \\\"dy < minAmount\\\");\\n\\n        uint256 dyAdminFee = (dyFee * self.adminFee) / FEE_DENOMINATOR;\\n        self.balances[tokenIndex] =\\n            self.balances[tokenIndex] -\\n            (dy + dyAdminFee);\\n            // (dy + ((dyFee * self.adminFee) / FEE_DENOMINATOR));\\n        lpToken.burnFrom(msg.sender, tokenAmount);\\n        pooledTokens[tokenIndex].safeTransfer(receiver, dy);\\n\\n        emit RemoveLiquidityOne(\\n            receiver,\\n            tokenAmount,\\n            totalSupply,\\n            tokenIndex,\\n            dy\\n        );\\n\\n        SwapFeeInfo memory swapFeeInfo;\\n        swapFeeInfo.tokens = new address[](1);\\n        swapFeeInfo.swapFees = new uint256[](1);\\n        swapFeeInfo.tokens[0] = address(pooledTokens[tokenIndex]);\\n        swapFeeInfo.swapFees[0] = dyFee - dyAdminFee;\\n        emit SwapFee(swapFeeInfo.tokens, swapFeeInfo.swapFees);\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param amounts how much of each token to withdraw\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param receiver recipient address\\n     * @return actual amount of LP tokens burned in the withdrawal\\n     */\\n    function removeLiquidityImbalance(\\n        Swap storage self,\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        address receiver\\n    ) external returns (uint256) {\\n        ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n            0,\\n            0,\\n            0,\\n            _getAPrecise(self),\\n            self.lpToken,\\n            0,\\n            self.balances,\\n            self.tokenPrecisionMultipliers\\n        );\\n        v.totalSupply = v.lpToken.totalSupply();\\n\\n        IERC20[] memory pooledTokens = self.pooledTokens;\\n\\n        require(\\n            amounts.length == pooledTokens.length,\\n            \\\"Amounts should match pool tokens\\\"\\n        );\\n\\n        require(\\n            maxBurnAmount <= v.lpToken.balanceOf(msg.sender) &&\\n                maxBurnAmount != 0,\\n            \\\">LP.balanceOf\\\"\\n        );\\n\\n        uint256 feePerToken = _feePerToken(self.swapFee, pooledTokens.length);\\n        uint256[] memory fees = new uint256[](pooledTokens.length);\\n        {\\n            uint256[] memory balances1 = new uint256[](pooledTokens.length);\\n            v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\\n            for (uint256 i = 0; i < pooledTokens.length; i++) {\\n                if (amounts[i] > v.balances[i]) {\\n                    revert(\\\"Cannot withdraw more than available\\\");\\n                } else {\\n                    unchecked {\\n                        balances1[i] = v.balances[i] - amounts[i];\\n                    }\\n                }\\n            }\\n            v.d1 = getD(_xp(balances1, v.multipliers), v.preciseA);\\n\\n            SwapFeeInfo memory swapFeeInfo;\\n            swapFeeInfo.tokens = new address[](fees.length);\\n            swapFeeInfo.swapFees = new uint256[](fees.length);\\n            for (uint256 i = 0; i < pooledTokens.length; i++) {\\n                uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n                uint256 difference = idealBalance.difference(balances1[i]);\\n                fees[i] = (feePerToken * difference) / FEE_DENOMINATOR;\\n                swapFeeInfo.adminFee = (fees[i] * self.adminFee) / FEE_DENOMINATOR;\\n                self.balances[i] =\\n                    balances1[i] - swapFeeInfo.adminFee;\\n                    // balances1[i] -\\n                    // ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                balances1[i] = balances1[i] - fees[i];\\n                swapFeeInfo.tokens[i] = address(pooledTokens[i]);\\n                swapFeeInfo.swapFees[i] = fees[i] - swapFeeInfo.adminFee;\\n            }\\n            emit SwapFee(swapFeeInfo.tokens, swapFeeInfo.swapFees);\\n\\n            v.d2 = getD(_xp(balances1, v.multipliers), v.preciseA);\\n        }\\n        uint256 tokenAmount = ((v.d0 - v.d2) * v.totalSupply) / v.d0;\\n        require(tokenAmount != 0, \\\"Burnt amount cannot be zero\\\");\\n        tokenAmount = tokenAmount + 1;\\n\\n        require(tokenAmount <= maxBurnAmount, \\\"tokenAmount > maxBurnAmount\\\");\\n\\n        v.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n        for (uint256 i = 0; i < pooledTokens.length; i++) {\\n            pooledTokens[i].safeTransfer(receiver, amounts[i]);\\n        }\\n\\n        emit RemoveLiquidityImbalance(\\n            receiver,\\n            amounts,\\n            fees,\\n            v.d1,\\n            v.totalSupply - tokenAmount\\n        );\\n\\n        return tokenAmount;\\n    }\\n\\n    /**\\n     * @notice withdraw all admin fees to a given address\\n     * @param self Swap struct to withdraw fees from\\n     * @param to Address to send the fees to\\n     */\\n    function withdrawAdminFees(\\n        Swap storage self,\\n        address to\\n    ) external returns (uint256[] memory) {\\n        IERC20[] memory pooledTokens = self.pooledTokens;\\n        uint256[] memory amounts = new uint256[](pooledTokens.length);\\n        for (uint256 i = 0; i < pooledTokens.length; i++) {\\n            IERC20 token = pooledTokens[i];\\n            uint256 balance = token.balanceOf(address(this)) - self.balances[i];\\n            amounts[i] = balance;\\n            if (balance != 0) {\\n                token.safeTransfer(to, balance);\\n            }\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Sets the admin fee\\n     * @dev adminFee cannot be higher than 100% of the swap fee\\n     * @param self Swap struct to update\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setAdminFee(Swap storage self, uint256 newAdminFee) external {\\n        require(newAdminFee <= MAX_ADMIN_FEE, \\\"Fee is too high\\\");\\n        self.adminFee = newAdminFee;\\n\\n        emit NewAdminFee(newAdminFee);\\n    }\\n\\n    /**\\n     * @notice update the swap fee\\n     * @dev fee cannot be higher than 1% of each swap\\n     * @param self Swap struct to update\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     */\\n    function setSwapFee(Swap storage self, uint256 newSwapFee) external {\\n        require(newSwapFee <= MAX_SWAP_FEE, \\\"Fee is too high\\\");\\n        self.swapFee = newSwapFee;\\n\\n        emit NewSwapFee(newSwapFee);\\n    }\\n}\\n\",\"keccak256\":\"0xc616fa26a6b4a1586dfb673283e16ef22025866d68259eaa35dad04f84c74ef1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061327d806100206000396000f3fe6080604052600436106101c25760003560e01c80637f9731b2116100f7578063c45a015511610095578063dfb56c2411610064578063dfb56c2414610527578063e25aa5fa1461053a578063e69e24a81461054f578063ef0a712f1461056f57600080fd5b8063c45a0155146104cf578063c4db7fa0146104f5578063d294f093146104fd578063d46300fd1461051257600080fd5b80639908fc8b116100d15780639908fc8b146104585780639d63848a14610478578063a1dc90311461049a578063b36a5af3146104af57600080fd5b80637f9731b2146103f857806382b866001461041857806391ceb3eb1461043857600080fd5b8063508d1e6b116101645780635fd65f0f1161013e5780635fd65f0f146103225780635fe192c61461039857806366c0bd24146103b85780636fa99f3d146103d857600080fd5b8063508d1e6b146102b6578063593d132c146102dd5780635fcbd285146102f057600080fd5b806334e19907116101a057806334e19907146102345780633c1a4cb0146102495780634aa06652146102695780634bd92a0d1461028957600080fd5b80630a5623fb146101c75780630ba81959146101f15780632a94e3f714610214575b600080fd5b3480156101d357600080fd5b506101dc600181565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061020661058f565b6040519081526020016101e8565b34801561022057600080fd5b5061020661022f36600461275a565b6105a0565b6102476102423660046127dd565b610634565b005b34801561025557600080fd5b5061020661026436600461280b565b61075f565b34801561027557600080fd5b50610206610284366004612837565b610806565b34801561029557600080fd5b506102a96102a4366004612878565b6108be565b6040516101e891906128c3565b3480156102c257600080fd5b506102cb600281565b60405160ff90911681526020016101e8565b6102476102eb366004612907565b6109ee565b3480156102fc57600080fd5b506008546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b34801561032e57600080fd5b5060025460035460045460055460065460075460085461035a969594939291906001600160a01b031687565b604080519788526020880196909652948601939093526060850191909152608084015260a08301526001600160a01b031660c082015260e0016101e8565b3480156103a457600080fd5b506102066103b3366004612929565b610ab2565b3480156103c457600080fd5b506102cb6103d336600461297b565b610bba565b3480156103e457600080fd5b506102066103f3366004612998565b610c31565b34801561040457600080fd5b50610206610413366004612998565b610d16565b34801561042457600080fd5b5061030a610433366004612a3d565b610d88565b34801561044457600080fd5b50610206610453366004612a3d565b610e00565b34801561046457600080fd5b50610206610473366004612a5a565b610e75565b34801561048457600080fd5b5061048d610f8e565b6040516101e89190612ac1565b3480156104a657600080fd5b506102a9610ff3565b3480156104bb57600080fd5b506102476104ca3660046127dd565b61104d565b3480156104db57600080fd5b5060005461030a906201000090046001600160a01b031681565b610247611140565b34801561050957600080fd5b506102a9611200565b34801561051e57600080fd5b50610206611309565b6102a9610535366004612b02565b611315565b34801561054657600080fd5b506102066113ed565b34801561055b57600080fd5b5061024761056a366004612b81565b611464565b34801561057b57600080fd5b5061020661058a3660046127dd565b611815565b600061059b6002611893565b905090565b600073EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A5163834b491060026105ca8989898961189e565b856040518463ffffffff1660e01b81526004016105e993929190612c52565b602060405180830381865af4158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190612c7d565b9695505050505050565b6000546201000090046001600160a01b03163314806106cc57506000546040805163481c6a7560e01b8152905133926201000090046001600160a01b03169163481c6a759160048083019260209291908290030181865afa15801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190612c96565b6001600160a01b0316145b6106f15760405162461bcd60e51b81526004016106e890612cb3565b60405180910390fd5b60405163119f861b60e21b8152600260048201526024810182905273EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A519063467e186c906044015b60006040518083038186803b15801561074457600080fd5b505af4158015610758573d6000803e3d6000fd5b5050505050565b6001600160a01b0382166000908152600c602052604080822054905163703493a160e11b8152600260048201526024810184905260ff909116604482015273EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A519063e069274290606401602060405180830381865af41580156107d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fd9190612c7d565b90505b92915050565b6001600160a01b038381166000908152600c60205260408082205492851682528082205490516312c8d80f60e21b81526002600482015260ff938416602482015292166044830152606482018390529073EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A5190634b23603c90608401602060405180830381865af4158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190612c7d565b949350505050565b6040516338381f2560e11b8152600260048201526024810182905260609060009073EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A51906370703e4a90604401600060405180830381865af415801561091b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109439190810190612d2e565b90508060005b858110156109e45782600c600089898581811061096857610968612dd3565b905060200201602081019061097d919061297b565b6001600160a01b03168152602081019190915260400160002054815160ff9091169081106109ad576109ad612dd3565b60200260200101518282815181106109c7576109c7612dd3565b6020908102919091010152806109dc81612dff565b915050610949565b5095945050505050565b6000546201000090046001600160a01b0316331480610a8657506000546040805163481c6a7560e01b8152905133926201000090046001600160a01b03169163481c6a759160048083019260209291908290030181865afa158015610a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7b9190612c96565b6001600160a01b0316145b610aa25760405162461bcd60e51b81526004016106e890612cb3565b610aae60028383611979565b5050565b6000600154600114610ad65760405162461bcd60e51b81526004016106e890612e18565b60006001558142811015610afc5760405162461bcd60e51b81526004016106e890612e3e565b6001600160a01b038681166000908152600c602052604090819020549051630f28f48560e41b815260026004820152602481018a905260ff909116604482015260648101879052908516608482015273EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A519063f28f48509060a401602060405180830381865af4158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190612c7d565b60018055979650505050505050565b6001600160a01b0381166000818152600c6020526040812054909160ff90911690610be482610d88565b6001600160a01b0316146108005760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016106e8565b6000600154600114610c555760405162461bcd60e51b81526004016106e890612e18565b60006001558142811015610c7b5760405162461bcd60e51b81526004016106e890612e3e565b73EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A5163b3bcd4c96002610ca38c8c8c8c61189e565b88886040518563ffffffff1660e01b8152600401610cc49493929190612e68565b602060405180830381865af4158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190612c7d565b600180559998505050505050505050565b6000600154600114610d3a5760405162461bcd60e51b81526004016106e890612e18565b60006001558142811015610d605760405162461bcd60e51b81526004016106e890612e3e565b73EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A5163241609966002610ca38c8c8c8c61189e565b60095460009060ff831610610dce5760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064016106e8565b6009805460ff8416908110610de557610de5612dd3565b6000918252602090912001546001600160a01b031692915050565b60095460009060ff831610610e4c5760405162461bcd60e51b8152602060048201526012602482015271496e646578206f7574206f662072616e676560701b60448201526064016106e8565b600b805460ff8416908110610e6357610e63612dd3565b90600052602060002001549050919050565b6000600154600114610e995760405162461bcd60e51b81526004016106e890612e18565b60006001558142811015610ebf5760405162461bcd60e51b81526004016106e890612e3e565b6001600160a01b038881166000908152600c6020526040808220548a841683529181902054905163f356255360e01b81526002600482015260ff928316602482015291166044820152606481018890526084810187905290851660a482015273EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A519063f35625539060c401602060405180830381865af4158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190612c7d565b6001805598975050505050505050565b60606002600701805480602002602001604051908101604052809291908181526020018280548015610fe957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fcb575b5050505050905090565b60606002600901805480602002602001604051908101604052809291908181526020018280548015610fe957602002820191906000526020600020905b815481526020019060010190808311611030575050505050905090565b6000546201000090046001600160a01b03163314806110e557506000546040805163481c6a7560e01b8152905133926201000090046001600160a01b03169163481c6a759160048083019260209291908290030181865afa1580156110b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110da9190612c96565b6001600160a01b0316145b6111015760405162461bcd60e51b81526004016106e890612cb3565b604051633823393b60e11b8152600260048201526024810182905273EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A519063704672769060440161072c565b6000546201000090046001600160a01b03163314806111d857506000546040805163481c6a7560e01b8152905133926201000090046001600160a01b03169163481c6a759160048083019260209291908290030181865afa1580156111a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cd9190612c96565b6001600160a01b0316145b6111f45760405162461bcd60e51b81526004016106e890612cb3565b6111fe6002611bb9565b565b6060600273EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A516324c5c7519091600060029054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112979190612c96565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381865af41580156112e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261059b9190810190612d2e565b600061059b6002611c76565b60606001546001146113395760405162461bcd60e51b81526004016106e890612e18565b6000600155814281101561135f5760405162461bcd60e51b81526004016106e890612e3e565b73EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A5163abbce08360028b6113888c8c8c8c61189e565b886040518563ffffffff1660e01b81526004016113a89493929190612ea2565b600060405180830381865af41580156113c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d059190810190612d2e565b604051631c641b0b60e21b81526002600482015260009073EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A51906371906c2c90602401602060405180830381865af4158015611440573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b9190612c7d565b600054610100900460ff16158080156114845750600054600160ff909116105b8061149e5750303b15801561149e575060005460ff166001145b6115015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106e8565b6000805460ff191660011790558015611524576000805461ff0019166101001790555b6000805462010000600160b01b031916336201000002178155600180805560408051808201825260148152730222337b931b29029ba30b136329020a6a69016960651b60208083019190915282518084018452600c81526b64414d4d2d537461626c652d60a01b818301528351808501909452938352602d60f81b9083015292876001600160401b038111156115bc576115bc612ce8565b6040519080825280602002602001820160405280156115e5578160200160208202803683370190505b50905060005b888110156117615789898281811061160557611605612dd3565b905060200201602081019061161a919061297b565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167b9190612eda565b82828151811061168d5761168d612dd3565b602002602001019060ff16908160ff168152505060006116db8b8b848181106116b8576116b8612dd3565b90506020020160208101906116cd919061297b565b6001600160a01b0316611c8d565b90506116e860018b612ef7565b8203611701576040518060200160405280600081525093505b85818560405160200161171693929190612f3e565b604051602081830303815290604052955084818560405160200161173c93929190612f3e565b604051602081830303815290604052945050808061175990612dff565b9150506115eb565b5060008080806117738a8c018c612f81565b93509350935093506117c08d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992508c91508b905086898988611d75565b50505050505050508015610758576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050505050565b6040516303e8240b60e51b8152600260048201526024810182905260009073EEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A5190637d04816090604401602060405180830381865af415801561186f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108009190612c7d565b6000610800826124a5565b606082828080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509394505050505b84811015611970578383828181106118f0576118f0612dd3565b9050602002013582600c600089898681811061190e5761190e612dd3565b9050602002016020810190611923919061297b565b6001600160a01b03168152602081019190915260400160002054815160ff90911690811061195357611953612dd3565b60209081029190910101528061196881612dff565b9150506118d6565b50949350505050565b600283015461198b9062015180612fc2565b4210156119da5760405162461bcd60e51b815260206004820152601f60248201527f57616974203120646179206265666f7265207374617274696e672072616d700060448201526064016106e8565b6119e76212750042612fc2565b811015611a2f5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e742072616d702074696d6560501b60448201526064016106e8565b600082118015611a415750620f424082105b611a8d5760405162461bcd60e51b815260206004820181905260248201527f667574757265415f206d757374206265203e203020616e64203c204d41585f4160448201526064016106e8565b6000611a98846124a5565b90506000611aa7606485612fda565b905081811015611b085781611abd600283612fda565b1015611b035760405162461bcd60e51b8152602060048201526015602482015274199d5d1d5c995057c81a5cc81d1bdbc81cdb585b1b605a1b60448201526064016106e8565b611b5a565b611b13600283612fda565b811115611b5a5760405162461bcd60e51b8152602060048201526015602482015274667574757265415f20697320746f6f206c6172676560581b60448201526064016106e8565b81855560018501819055426002860181905560038601849055604080518481526020810184905290810191909152606081018490527fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c25490608001611806565b42816003015411611c0c5760405162461bcd60e51b815260206004820152601760248201527f52616d7020697320616c72656164792073746f7070656400000000000000000060448201526064016106e8565b6000611c17826124a5565b808355600183018190554260028401819055600384018190556040519192507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc20193891611c6a91848252602082015260400190565b60405180910390a15050565b60006064611c83836124a5565b6108009190612ff9565b60606001600160a01b03821615611d705760408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160009182916001600160a01b03861691611ce19161301b565b600060405180830381855afa9150503d8060008114611d1c576040519150601f19603f3d011682016040523d82523d6000602084013e611d21565b606091505b50915091508115611d6d578051602014611d4e5780806020019051810190611d499190613037565b611d6a565b611d6a81806020019051810190611d659190612c7d565b612549565b92505b50505b919050565b6001885111611dc65760405162461bcd60e51b815260206004820152601960248201527f5f706f6f6c6564546f6b656e732e6c656e677468203c3d20310000000000000060448201526064016106e8565b602088511115611e185760405162461bcd60e51b815260206004820152601960248201527f5f706f6f6c6564546f6b656e732e6c656e677468203e2033320000000000000060448201526064016106e8565b8651885114611e695760405162461bcd60e51b815260206004820152601f60248201527f5f706f6f6c6564546f6b656e7320646563696d616c73206d69736d617463680060448201526064016106e8565b600087516001600160401b03811115611e8457611e84612ce8565b604051908082528060200260200182016040528015611ead578160200160208202803683370190505b509050600088516001600160401b03811115611ecb57611ecb612ce8565b604051908082528060200260200182016040528015611ef4578160200160208202803683370190505b50905060005b8a518160ff1610156122295760ff811615611fe357600c60008c8360ff1681518110611f2857611f28612dd3565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16158015611fa457508a8160ff1681518110611f6c57611f6c612dd3565b60200260200101516001600160a01b03168b600081518110611f9057611f90612dd3565b60200260200101516001600160a01b031614155b611fe35760405162461bcd60e51b815260206004820152601060248201526f4475706c696361746520746f6b656e7360801b60448201526064016106e8565b60006001600160a01b03168b8260ff168151811061200357612003612dd3565b60200260200101516001600160a01b0316141580156120505750306001600160a01b03168b8260ff168151811061203c5761203c612dd3565b60200260200101516001600160a01b031614155b61209c5760405162461bcd60e51b815260206004820152601d60248201527f546865203020616464726573732069736e277420616e204552432d323000000060448201526064016106e8565b601260ff168a8260ff16815181106120b6576120b6612dd3565b602002602001015160ff16111561210f5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e20646563696d616c732065786365656473206d617800000000000060448201526064016106e8565b898160ff168151811061212457612124612dd3565b602002602001015160ff16601260ff1661213e9190612ef7565b61214990600a6131a5565b838260ff168151811061215e5761215e612dd3565b6020026020010181815250508a8160ff168151811061217f5761217f612dd3565b6020026020010151828260ff168151811061219c5761219c612dd3565b60200260200101906001600160a01b031690816001600160a01b03168152505080600c60008d8460ff16815181106121d6576121d6612dd3565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080612221906131b1565b915050611efa565b50620f424086106122715760405162461bcd60e51b81526020600482015260126024820152715f612065786365656473206d6178696d756d60701b60448201526064016106e8565b6305f5e10085106122bb5760405162461bcd60e51b81526020600482015260146024820152735f6665652065786365656473206d6178696d756d60601b60448201526064016106e8565b6402540be400841061230f5760405162461bcd60e51b815260206004820152601960248201527f5f61646d696e4665652065786365656473206d6178696d756d0000000000000060448201526064016106e8565b600061231a846125b4565b60405163266c45bb60e11b81529091506001600160a01b03821690634cd88b769061234b908c908c906004016131fc565b6020604051808303816000875af115801561236a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238e919061322a565b6123da5760405162461bcd60e51b815260206004820152601c60248201527f636f756c64206e6f7420696e6974206c70546f6b656e20636c6f6e650000000060448201526064016106e8565b600880546001600160a01b0319166001600160a01b0383161790558151612408906009906020850190612649565b50825161241c90600a9060208601906126ae565b508a516001600160401b0381111561243657612436612ce8565b60405190808252806020026020018201604052801561245f578160200160208202803683370190505b50805161247491600b916020909101906126ae565b50612480606488612fda565b60025561248e606488612fda565b600355505050600692909255600755505050505050565b600381015460018201546000919042821115612542576002840154845480831115612506576124d48285612ef7565b6124de8342612ef7565b6124e88386612ef7565b6124f29190612fda565b6124fc9190612ff9565b61062a9082612fc2565b6125108285612ef7565b61251a8342612ef7565b6125248584612ef7565b61252e9190612fda565b6125389190612ff9565b61062a9082612ef7565b9392505050565b606060005b828160ff166020811061256357612563612dd3565b1a60f81b6001600160f81b03191615801590612582575060208160ff16105b156125995780612591816131b1565b91505061254e565b60405191506040820160405280825282602083015250919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116611d705760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016106e8565b82805482825590600052602060002090810192821561269e579160200282015b8281111561269e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612669565b506126aa9291506126e9565b5090565b82805482825590600052602060002090810192821561269e579160200282015b8281111561269e5782518255916020019190600101906126ce565b5b808211156126aa57600081556001016126ea565b60008083601f84011261271057600080fd5b5081356001600160401b0381111561272757600080fd5b6020830191508360208260051b850101111561274257600080fd5b9250929050565b801515811461275757600080fd5b50565b60008060008060006060868803121561277257600080fd5b85356001600160401b038082111561278957600080fd5b61279589838a016126fe565b909750955060208801359150808211156127ae57600080fd5b506127bb888289016126fe565b90945092505060408601356127cf81612749565b809150509295509295909350565b6000602082840312156127ef57600080fd5b5035919050565b6001600160a01b038116811461275757600080fd5b6000806040838503121561281e57600080fd5b8235612829816127f6565b946020939093013593505050565b60008060006060848603121561284c57600080fd5b8335612857816127f6565b92506020840135612867816127f6565b929592945050506040919091013590565b60008060006040848603121561288d57600080fd5b83356001600160401b038111156128a357600080fd5b6128af868287016126fe565b909790965060209590950135949350505050565b6020808252825182820181905260009190848201906040850190845b818110156128fb578351835292840192918401916001016128df565b50909695505050505050565b6000806040838503121561291a57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561294157600080fd5b853594506020860135612953816127f6565b935060408601359250606086013561296a816127f6565b949793965091946080013592915050565b60006020828403121561298d57600080fd5b8135612542816127f6565b600080600080600080600060a0888a0312156129b357600080fd5b87356001600160401b03808211156129ca57600080fd5b6129d68b838c016126fe565b909950975060208a01359150808211156129ef57600080fd5b506129fc8a828b016126fe565b909650945050604088013592506060880135612a17816127f6565b809250506080880135905092959891949750929550565b60ff8116811461275757600080fd5b600060208284031215612a4f57600080fd5b813561254281612a2e565b60008060008060008060c08789031215612a7357600080fd5b8635612a7e816127f6565b95506020870135612a8e816127f6565b945060408701359350606087013592506080870135612aac816127f6565b8092505060a087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156128fb5783516001600160a01b031683529284019291840191600101612add565b600080600080600080600060a0888a031215612b1d57600080fd5b8735965060208801356001600160401b0380821115612b3b57600080fd5b612b478b838c016126fe565b909850965060408a0135915080821115612b6057600080fd5b50612b6d8a828b016126fe565b9095509350506060880135612a17816127f6565b60008060008060408587031215612b9757600080fd5b84356001600160401b0380821115612bae57600080fd5b612bba888389016126fe565b90965094506020870135915080821115612bd357600080fd5b818701915087601f830112612be757600080fd5b813581811115612bf657600080fd5b886020828501011115612c0857600080fd5b95989497505060200194505050565b600081518084526020808501945080840160005b83811015612c4757815187529582019590820190600101612c2b565b509495945050505050565b838152606060208201526000612c6b6060830185612c17565b90508215156040830152949350505050565b600060208284031215612c8f57600080fd5b5051919050565b600060208284031215612ca857600080fd5b8151612542816127f6565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612d2657612d26612ce8565b604052919050565b60006020808385031215612d4157600080fd5b82516001600160401b0380821115612d5857600080fd5b818501915085601f830112612d6c57600080fd5b815181811115612d7e57612d7e612ce8565b8060051b9150612d8f848301612cfe565b8181529183018401918481019088841115612da957600080fd5b938501935b83851015612dc757845182529385019390850190612dae565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612e1157612e11612de9565b5060010190565b6020808252600c908201526b14185a5c8e881313d0d2d15160a21b604082015260600190565b60208082526010908201526f111958591b1a5b99481b9bdd081b595d60821b604082015260600190565b848152608060208201526000612e816080830186612c17565b6040830194909452506001600160a01b039190911660609091015292915050565b848152836020820152608060408201526000612ec16080830185612c17565b905060018060a01b038316606083015295945050505050565b600060208284031215612eec57600080fd5b815161254281612a2e565b600082821015612f0957612f09612de9565b500390565b60005b83811015612f29578181015183820152602001612f11565b83811115612f38576000848401525b50505050565b60008451612f50818460208901612f0e565b845190830190612f64818360208901612f0e565b8451910190612f77818360208801612f0e565b0195945050505050565b60008060008060808587031215612f9757600080fd5b8435935060208501359250604085013591506060850135612fb7816127f6565b939692955090935050565b60008219821115612fd557612fd5612de9565b500190565b6000816000190483118215151615612ff457612ff4612de9565b500290565b60008261301657634e487b7160e01b600052601260045260246000fd5b500490565b6000825161302d818460208701612f0e565b9190910192915050565b60006020828403121561304957600080fd5b81516001600160401b038082111561306057600080fd5b818401915084601f83011261307457600080fd5b81518181111561308657613086612ce8565b613099601f8201601f1916602001612cfe565b91508082528560208285010111156130b057600080fd5b611970816020840160208601612f0e565b600181815b808511156130fc5781600019048211156130e2576130e2612de9565b808516156130ef57918102915b93841c93908002906130c6565b509250929050565b60008261311357506001610800565b8161312057506000610800565b816001811461313657600281146131405761315c565b6001915050610800565b60ff84111561315157613151612de9565b50506001821b610800565b5060208310610133831016604e8410600b841016171561317f575081810a610800565b61318983836130c1565b806000190482111561319d5761319d612de9565b029392505050565b60006107fd8383613104565b600060ff821660ff81036131c7576131c7612de9565b60010192915050565b600081518084526131e8816020860160208601612f0e565b601f01601f19169290920160200192915050565b60408152600061320f60408301856131d0565b828103602084015261322181856131d0565b95945050505050565b60006020828403121561323c57600080fd5b81516125428161274956fea26469706673582212208eb00e868f8da0a6d508ec9eaba9eb110f388851e0491e0bf82254708f7ec01d64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80637f9731b2116100f7578063c45a015511610095578063dfb56c2411610064578063dfb56c2414610527578063e25aa5fa1461053a578063e69e24a81461054f578063ef0a712f1461056f57600080fd5b8063c45a0155146104cf578063c4db7fa0146104f5578063d294f093146104fd578063d46300fd1461051257600080fd5b80639908fc8b116100d15780639908fc8b146104585780639d63848a14610478578063a1dc90311461049a578063b36a5af3146104af57600080fd5b80637f9731b2146103f857806382b866001461041857806391ceb3eb1461043857600080fd5b8063508d1e6b116101645780635fd65f0f1161013e5780635fd65f0f146103225780635fe192c61461039857806366c0bd24146103b85780636fa99f3d146103d857600080fd5b8063508d1e6b146102b6578063593d132c146102dd5780635fcbd285146102f057600080fd5b806334e19907116101a057806334e19907146102345780633c1a4cb0146102495780634aa06652146102695780634bd92a0d1461028957600080fd5b80630a5623fb146101c75780630ba81959146101f15780632a94e3f714610214575b600080fd5b3480156101d357600080fd5b506101dc600181565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061020661058f565b6040519081526020016101e8565b34801561022057600080fd5b5061020661022f36600461275a565b6105a0565b6102476102423660046127dd565b610634565b005b34801561025557600080fd5b5061020661026436600461280b565b61075f565b34801561027557600080fd5b50610206610284366004612837565b610806565b34801561029557600080fd5b506102a96102a4366004612878565b6108be565b6040516101e891906128c3565b3480156102c257600080fd5b506102cb600281565b60405160ff90911681526020016101e8565b6102476102eb366004612907565b6109ee565b3480156102fc57600080fd5b506008546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b34801561032e57600080fd5b5060025460035460045460055460065460075460085461035a969594939291906001600160a01b031687565b604080519788526020880196909652948601939093526060850191909152608084015260a08301526001600160a01b031660c082015260e0016101e8565b3480156103a457600080fd5b506102066103b3366004612929565b610ab2565b3480156103c457600080fd5b506102cb6103d336600461297b565b610bba565b3480156103e457600080fd5b506102066103f3366004612998565b610c31565b34801561040457600080fd5b50610206610413366004612998565b610d16565b34801561042457600080fd5b5061030a610433366004612a3d565b610d88565b34801561044457600080fd5b50610206610453366004612a3d565b610e00565b34801561046457600080fd5b50610206610473366004612a5a565b610e75565b34801561048457600080fd5b5061048d610f8e565b6040516101e89190612ac1565b3480156104a657600080fd5b506102a9610ff3565b3480156104bb57600080fd5b506102476104ca3660046127dd565b61104d565b3480156104db57600080fd5b5060005461030a906201000090046001600160a01b031681565b610247611140565b34801561050957600080fd5b506102a9611200565b34801561051e57600080fd5b50610206611309565b6102a9610535366004612b02565b611315565b34801561054657600080fd5b506102066113ed565b34801561055b57600080fd5b5061024761056a366004612b81565b611464565b34801561057b57600080fd5b5061020661058a3660046127dd565b611815565b600061059b6002611893565b905090565b600073__$4f9bc9d987b626ebf927a63757d74ce646$__63834b491060026105ca8989898961189e565b856040518463ffffffff1660e01b81526004016105e993929190612c52565b602060405180830381865af4158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190612c7d565b9695505050505050565b6000546201000090046001600160a01b03163314806106cc57506000546040805163481c6a7560e01b8152905133926201000090046001600160a01b03169163481c6a759160048083019260209291908290030181865afa15801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190612c96565b6001600160a01b0316145b6106f15760405162461bcd60e51b81526004016106e890612cb3565b60405180910390fd5b60405163119f861b60e21b8152600260048201526024810182905273__$4f9bc9d987b626ebf927a63757d74ce646$__9063467e186c906044015b60006040518083038186803b15801561074457600080fd5b505af4158015610758573d6000803e3d6000fd5b5050505050565b6001600160a01b0382166000908152600c602052604080822054905163703493a160e11b8152600260048201526024810184905260ff909116604482015273__$4f9bc9d987b626ebf927a63757d74ce646$__9063e069274290606401602060405180830381865af41580156107d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fd9190612c7d565b90505b92915050565b6001600160a01b038381166000908152600c60205260408082205492851682528082205490516312c8d80f60e21b81526002600482015260ff938416602482015292166044830152606482018390529073__$4f9bc9d987b626ebf927a63757d74ce646$__90634b23603c90608401602060405180830381865af4158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190612c7d565b949350505050565b6040516338381f2560e11b8152600260048201526024810182905260609060009073__$4f9bc9d987b626ebf927a63757d74ce646$__906370703e4a90604401600060405180830381865af415801561091b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109439190810190612d2e565b90508060005b858110156109e45782600c600089898581811061096857610968612dd3565b905060200201602081019061097d919061297b565b6001600160a01b03168152602081019190915260400160002054815160ff9091169081106109ad576109ad612dd3565b60200260200101518282815181106109c7576109c7612dd3565b6020908102919091010152806109dc81612dff565b915050610949565b5095945050505050565b6000546201000090046001600160a01b0316331480610a8657506000546040805163481c6a7560e01b8152905133926201000090046001600160a01b03169163481c6a759160048083019260209291908290030181865afa158015610a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7b9190612c96565b6001600160a01b0316145b610aa25760405162461bcd60e51b81526004016106e890612cb3565b610aae60028383611979565b5050565b6000600154600114610ad65760405162461bcd60e51b81526004016106e890612e18565b60006001558142811015610afc5760405162461bcd60e51b81526004016106e890612e3e565b6001600160a01b038681166000908152600c602052604090819020549051630f28f48560e41b815260026004820152602481018a905260ff909116604482015260648101879052908516608482015273__$4f9bc9d987b626ebf927a63757d74ce646$__9063f28f48509060a401602060405180830381865af4158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190612c7d565b60018055979650505050505050565b6001600160a01b0381166000818152600c6020526040812054909160ff90911690610be482610d88565b6001600160a01b0316146108005760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016106e8565b6000600154600114610c555760405162461bcd60e51b81526004016106e890612e18565b60006001558142811015610c7b5760405162461bcd60e51b81526004016106e890612e3e565b73__$4f9bc9d987b626ebf927a63757d74ce646$__63b3bcd4c96002610ca38c8c8c8c61189e565b88886040518563ffffffff1660e01b8152600401610cc49493929190612e68565b602060405180830381865af4158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190612c7d565b600180559998505050505050505050565b6000600154600114610d3a5760405162461bcd60e51b81526004016106e890612e18565b60006001558142811015610d605760405162461bcd60e51b81526004016106e890612e3e565b73__$4f9bc9d987b626ebf927a63757d74ce646$__63241609966002610ca38c8c8c8c61189e565b60095460009060ff831610610dce5760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064016106e8565b6009805460ff8416908110610de557610de5612dd3565b6000918252602090912001546001600160a01b031692915050565b60095460009060ff831610610e4c5760405162461bcd60e51b8152602060048201526012602482015271496e646578206f7574206f662072616e676560701b60448201526064016106e8565b600b805460ff8416908110610e6357610e63612dd3565b90600052602060002001549050919050565b6000600154600114610e995760405162461bcd60e51b81526004016106e890612e18565b60006001558142811015610ebf5760405162461bcd60e51b81526004016106e890612e3e565b6001600160a01b038881166000908152600c6020526040808220548a841683529181902054905163f356255360e01b81526002600482015260ff928316602482015291166044820152606481018890526084810187905290851660a482015273__$4f9bc9d987b626ebf927a63757d74ce646$__9063f35625539060c401602060405180830381865af4158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190612c7d565b6001805598975050505050505050565b60606002600701805480602002602001604051908101604052809291908181526020018280548015610fe957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fcb575b5050505050905090565b60606002600901805480602002602001604051908101604052809291908181526020018280548015610fe957602002820191906000526020600020905b815481526020019060010190808311611030575050505050905090565b6000546201000090046001600160a01b03163314806110e557506000546040805163481c6a7560e01b8152905133926201000090046001600160a01b03169163481c6a759160048083019260209291908290030181865afa1580156110b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110da9190612c96565b6001600160a01b0316145b6111015760405162461bcd60e51b81526004016106e890612cb3565b604051633823393b60e11b8152600260048201526024810182905273__$4f9bc9d987b626ebf927a63757d74ce646$__9063704672769060440161072c565b6000546201000090046001600160a01b03163314806111d857506000546040805163481c6a7560e01b8152905133926201000090046001600160a01b03169163481c6a759160048083019260209291908290030181865afa1580156111a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cd9190612c96565b6001600160a01b0316145b6111f45760405162461bcd60e51b81526004016106e890612cb3565b6111fe6002611bb9565b565b6060600273__$4f9bc9d987b626ebf927a63757d74ce646$__6324c5c7519091600060029054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112979190612c96565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381865af41580156112e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261059b9190810190612d2e565b600061059b6002611c76565b60606001546001146113395760405162461bcd60e51b81526004016106e890612e18565b6000600155814281101561135f5760405162461bcd60e51b81526004016106e890612e3e565b73__$4f9bc9d987b626ebf927a63757d74ce646$__63abbce08360028b6113888c8c8c8c61189e565b886040518563ffffffff1660e01b81526004016113a89493929190612ea2565b600060405180830381865af41580156113c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d059190810190612d2e565b604051631c641b0b60e21b81526002600482015260009073__$4f9bc9d987b626ebf927a63757d74ce646$__906371906c2c90602401602060405180830381865af4158015611440573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b9190612c7d565b600054610100900460ff16158080156114845750600054600160ff909116105b8061149e5750303b15801561149e575060005460ff166001145b6115015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106e8565b6000805460ff191660011790558015611524576000805461ff0019166101001790555b6000805462010000600160b01b031916336201000002178155600180805560408051808201825260148152730222337b931b29029ba30b136329020a6a69016960651b60208083019190915282518084018452600c81526b64414d4d2d537461626c652d60a01b818301528351808501909452938352602d60f81b9083015292876001600160401b038111156115bc576115bc612ce8565b6040519080825280602002602001820160405280156115e5578160200160208202803683370190505b50905060005b888110156117615789898281811061160557611605612dd3565b905060200201602081019061161a919061297b565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167b9190612eda565b82828151811061168d5761168d612dd3565b602002602001019060ff16908160ff168152505060006116db8b8b848181106116b8576116b8612dd3565b90506020020160208101906116cd919061297b565b6001600160a01b0316611c8d565b90506116e860018b612ef7565b8203611701576040518060200160405280600081525093505b85818560405160200161171693929190612f3e565b604051602081830303815290604052955084818560405160200161173c93929190612f3e565b604051602081830303815290604052945050808061175990612dff565b9150506115eb565b5060008080806117738a8c018c612f81565b93509350935093506117c08d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992508c91508b905086898988611d75565b50505050505050508015610758576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050505050565b6040516303e8240b60e51b8152600260048201526024810182905260009073__$4f9bc9d987b626ebf927a63757d74ce646$__90637d04816090604401602060405180830381865af415801561186f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108009190612c7d565b6000610800826124a5565b606082828080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509394505050505b84811015611970578383828181106118f0576118f0612dd3565b9050602002013582600c600089898681811061190e5761190e612dd3565b9050602002016020810190611923919061297b565b6001600160a01b03168152602081019190915260400160002054815160ff90911690811061195357611953612dd3565b60209081029190910101528061196881612dff565b9150506118d6565b50949350505050565b600283015461198b9062015180612fc2565b4210156119da5760405162461bcd60e51b815260206004820152601f60248201527f57616974203120646179206265666f7265207374617274696e672072616d700060448201526064016106e8565b6119e76212750042612fc2565b811015611a2f5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e742072616d702074696d6560501b60448201526064016106e8565b600082118015611a415750620f424082105b611a8d5760405162461bcd60e51b815260206004820181905260248201527f667574757265415f206d757374206265203e203020616e64203c204d41585f4160448201526064016106e8565b6000611a98846124a5565b90506000611aa7606485612fda565b905081811015611b085781611abd600283612fda565b1015611b035760405162461bcd60e51b8152602060048201526015602482015274199d5d1d5c995057c81a5cc81d1bdbc81cdb585b1b605a1b60448201526064016106e8565b611b5a565b611b13600283612fda565b811115611b5a5760405162461bcd60e51b8152602060048201526015602482015274667574757265415f20697320746f6f206c6172676560581b60448201526064016106e8565b81855560018501819055426002860181905560038601849055604080518481526020810184905290810191909152606081018490527fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c25490608001611806565b42816003015411611c0c5760405162461bcd60e51b815260206004820152601760248201527f52616d7020697320616c72656164792073746f7070656400000000000000000060448201526064016106e8565b6000611c17826124a5565b808355600183018190554260028401819055600384018190556040519192507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc20193891611c6a91848252602082015260400190565b60405180910390a15050565b60006064611c83836124a5565b6108009190612ff9565b60606001600160a01b03821615611d705760408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160009182916001600160a01b03861691611ce19161301b565b600060405180830381855afa9150503d8060008114611d1c576040519150601f19603f3d011682016040523d82523d6000602084013e611d21565b606091505b50915091508115611d6d578051602014611d4e5780806020019051810190611d499190613037565b611d6a565b611d6a81806020019051810190611d659190612c7d565b612549565b92505b50505b919050565b6001885111611dc65760405162461bcd60e51b815260206004820152601960248201527f5f706f6f6c6564546f6b656e732e6c656e677468203c3d20310000000000000060448201526064016106e8565b602088511115611e185760405162461bcd60e51b815260206004820152601960248201527f5f706f6f6c6564546f6b656e732e6c656e677468203e2033320000000000000060448201526064016106e8565b8651885114611e695760405162461bcd60e51b815260206004820152601f60248201527f5f706f6f6c6564546f6b656e7320646563696d616c73206d69736d617463680060448201526064016106e8565b600087516001600160401b03811115611e8457611e84612ce8565b604051908082528060200260200182016040528015611ead578160200160208202803683370190505b509050600088516001600160401b03811115611ecb57611ecb612ce8565b604051908082528060200260200182016040528015611ef4578160200160208202803683370190505b50905060005b8a518160ff1610156122295760ff811615611fe357600c60008c8360ff1681518110611f2857611f28612dd3565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16158015611fa457508a8160ff1681518110611f6c57611f6c612dd3565b60200260200101516001600160a01b03168b600081518110611f9057611f90612dd3565b60200260200101516001600160a01b031614155b611fe35760405162461bcd60e51b815260206004820152601060248201526f4475706c696361746520746f6b656e7360801b60448201526064016106e8565b60006001600160a01b03168b8260ff168151811061200357612003612dd3565b60200260200101516001600160a01b0316141580156120505750306001600160a01b03168b8260ff168151811061203c5761203c612dd3565b60200260200101516001600160a01b031614155b61209c5760405162461bcd60e51b815260206004820152601d60248201527f546865203020616464726573732069736e277420616e204552432d323000000060448201526064016106e8565b601260ff168a8260ff16815181106120b6576120b6612dd3565b602002602001015160ff16111561210f5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e20646563696d616c732065786365656473206d617800000000000060448201526064016106e8565b898160ff168151811061212457612124612dd3565b602002602001015160ff16601260ff1661213e9190612ef7565b61214990600a6131a5565b838260ff168151811061215e5761215e612dd3565b6020026020010181815250508a8160ff168151811061217f5761217f612dd3565b6020026020010151828260ff168151811061219c5761219c612dd3565b60200260200101906001600160a01b031690816001600160a01b03168152505080600c60008d8460ff16815181106121d6576121d6612dd3565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080612221906131b1565b915050611efa565b50620f424086106122715760405162461bcd60e51b81526020600482015260126024820152715f612065786365656473206d6178696d756d60701b60448201526064016106e8565b6305f5e10085106122bb5760405162461bcd60e51b81526020600482015260146024820152735f6665652065786365656473206d6178696d756d60601b60448201526064016106e8565b6402540be400841061230f5760405162461bcd60e51b815260206004820152601960248201527f5f61646d696e4665652065786365656473206d6178696d756d0000000000000060448201526064016106e8565b600061231a846125b4565b60405163266c45bb60e11b81529091506001600160a01b03821690634cd88b769061234b908c908c906004016131fc565b6020604051808303816000875af115801561236a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238e919061322a565b6123da5760405162461bcd60e51b815260206004820152601c60248201527f636f756c64206e6f7420696e6974206c70546f6b656e20636c6f6e650000000060448201526064016106e8565b600880546001600160a01b0319166001600160a01b0383161790558151612408906009906020850190612649565b50825161241c90600a9060208601906126ae565b508a516001600160401b0381111561243657612436612ce8565b60405190808252806020026020018201604052801561245f578160200160208202803683370190505b50805161247491600b916020909101906126ae565b50612480606488612fda565b60025561248e606488612fda565b600355505050600692909255600755505050505050565b600381015460018201546000919042821115612542576002840154845480831115612506576124d48285612ef7565b6124de8342612ef7565b6124e88386612ef7565b6124f29190612fda565b6124fc9190612ff9565b61062a9082612fc2565b6125108285612ef7565b61251a8342612ef7565b6125248584612ef7565b61252e9190612fda565b6125389190612ff9565b61062a9082612ef7565b9392505050565b606060005b828160ff166020811061256357612563612dd3565b1a60f81b6001600160f81b03191615801590612582575060208160ff16105b156125995780612591816131b1565b91505061254e565b60405191506040820160405280825282602083015250919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116611d705760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016106e8565b82805482825590600052602060002090810192821561269e579160200282015b8281111561269e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612669565b506126aa9291506126e9565b5090565b82805482825590600052602060002090810192821561269e579160200282015b8281111561269e5782518255916020019190600101906126ce565b5b808211156126aa57600081556001016126ea565b60008083601f84011261271057600080fd5b5081356001600160401b0381111561272757600080fd5b6020830191508360208260051b850101111561274257600080fd5b9250929050565b801515811461275757600080fd5b50565b60008060008060006060868803121561277257600080fd5b85356001600160401b038082111561278957600080fd5b61279589838a016126fe565b909750955060208801359150808211156127ae57600080fd5b506127bb888289016126fe565b90945092505060408601356127cf81612749565b809150509295509295909350565b6000602082840312156127ef57600080fd5b5035919050565b6001600160a01b038116811461275757600080fd5b6000806040838503121561281e57600080fd5b8235612829816127f6565b946020939093013593505050565b60008060006060848603121561284c57600080fd5b8335612857816127f6565b92506020840135612867816127f6565b929592945050506040919091013590565b60008060006040848603121561288d57600080fd5b83356001600160401b038111156128a357600080fd5b6128af868287016126fe565b909790965060209590950135949350505050565b6020808252825182820181905260009190848201906040850190845b818110156128fb578351835292840192918401916001016128df565b50909695505050505050565b6000806040838503121561291a57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561294157600080fd5b853594506020860135612953816127f6565b935060408601359250606086013561296a816127f6565b949793965091946080013592915050565b60006020828403121561298d57600080fd5b8135612542816127f6565b600080600080600080600060a0888a0312156129b357600080fd5b87356001600160401b03808211156129ca57600080fd5b6129d68b838c016126fe565b909950975060208a01359150808211156129ef57600080fd5b506129fc8a828b016126fe565b909650945050604088013592506060880135612a17816127f6565b809250506080880135905092959891949750929550565b60ff8116811461275757600080fd5b600060208284031215612a4f57600080fd5b813561254281612a2e565b60008060008060008060c08789031215612a7357600080fd5b8635612a7e816127f6565b95506020870135612a8e816127f6565b945060408701359350606087013592506080870135612aac816127f6565b8092505060a087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156128fb5783516001600160a01b031683529284019291840191600101612add565b600080600080600080600060a0888a031215612b1d57600080fd5b8735965060208801356001600160401b0380821115612b3b57600080fd5b612b478b838c016126fe565b909850965060408a0135915080821115612b6057600080fd5b50612b6d8a828b016126fe565b9095509350506060880135612a17816127f6565b60008060008060408587031215612b9757600080fd5b84356001600160401b0380821115612bae57600080fd5b612bba888389016126fe565b90965094506020870135915080821115612bd357600080fd5b818701915087601f830112612be757600080fd5b813581811115612bf657600080fd5b886020828501011115612c0857600080fd5b95989497505060200194505050565b600081518084526020808501945080840160005b83811015612c4757815187529582019590820190600101612c2b565b509495945050505050565b838152606060208201526000612c6b6060830185612c17565b90508215156040830152949350505050565b600060208284031215612c8f57600080fd5b5051919050565b600060208284031215612ca857600080fd5b8151612542816127f6565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612d2657612d26612ce8565b604052919050565b60006020808385031215612d4157600080fd5b82516001600160401b0380821115612d5857600080fd5b818501915085601f830112612d6c57600080fd5b815181811115612d7e57612d7e612ce8565b8060051b9150612d8f848301612cfe565b8181529183018401918481019088841115612da957600080fd5b938501935b83851015612dc757845182529385019390850190612dae565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612e1157612e11612de9565b5060010190565b6020808252600c908201526b14185a5c8e881313d0d2d15160a21b604082015260600190565b60208082526010908201526f111958591b1a5b99481b9bdd081b595d60821b604082015260600190565b848152608060208201526000612e816080830186612c17565b6040830194909452506001600160a01b039190911660609091015292915050565b848152836020820152608060408201526000612ec16080830185612c17565b905060018060a01b038316606083015295945050505050565b600060208284031215612eec57600080fd5b815161254281612a2e565b600082821015612f0957612f09612de9565b500390565b60005b83811015612f29578181015183820152602001612f11565b83811115612f38576000848401525b50505050565b60008451612f50818460208901612f0e565b845190830190612f64818360208901612f0e565b8451910190612f77818360208801612f0e565b0195945050505050565b60008060008060808587031215612f9757600080fd5b8435935060208501359250604085013591506060850135612fb7816127f6565b939692955090935050565b60008219821115612fd557612fd5612de9565b500190565b6000816000190483118215151615612ff457612ff4612de9565b500290565b60008261301657634e487b7160e01b600052601260045260246000fd5b500490565b6000825161302d818460208701612f0e565b9190910192915050565b60006020828403121561304957600080fd5b81516001600160401b038082111561306057600080fd5b818401915084601f83011261307457600080fd5b81518181111561308657613086612ce8565b613099601f8201601f1916602001612cfe565b91508082528560208285010111156130b057600080fd5b611970816020840160208601612f0e565b600181815b808511156130fc5781600019048211156130e2576130e2612de9565b808516156130ef57918102915b93841c93908002906130c6565b509250929050565b60008261311357506001610800565b8161312057506000610800565b816001811461313657600281146131405761315c565b6001915050610800565b60ff84111561315157613151612de9565b50506001821b610800565b5060208310610133831016604e8410600b841016171561317f575081810a610800565b61318983836130c1565b806000190482111561319d5761319d612de9565b029392505050565b60006107fd8383613104565b600060ff821660ff81036131c7576131c7612de9565b60010192915050565b600081518084526131e8816020860160208601612f0e565b601f01601f19169290920160200192915050565b60408152600061320f60408301856131d0565b828103602084015261322181856131d0565b95945050505050565b60006020828403121561323c57600080fd5b81516125428161274956fea26469706673582212208eb00e868f8da0a6d508ec9eaba9eb110f388851e0491e0bf82254708f7ec01d64736f6c634300080d0033",
  "libraries": {
    "SwapUtils": "0xEEAd4d4e539A8c63fC9c0Cc66c29e6bD54425A51"
  },
  "devdoc": {
    "details": "Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's deployment size.",
    "kind": "dev",
    "methods": {
      "addLiquidity(address[],uint256[],uint256,address,uint256)": {
        "params": {
          "_amounts": "the amounts of each token to add, in their native precision,corresponding to param _tokens",
          "_deadline": "latest timestamp to accept this transaction",
          "_minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation",
          "_receiver": "recipient address",
          "_tokens": "token address list"
        },
        "returns": {
          "_0": "amount of LP token user minted and received"
        }
      },
      "calculateRemoveLiquidity(address[],uint256)": {
        "params": {
          "_amount": "the amount of LP tokens that would be burned on withdrawal",
          "_tokens": "token address list"
        },
        "returns": {
          "_0": "array of token balances that the user will receive"
        }
      },
      "calculateRemoveLiquidityOneToken(address,uint256)": {
        "params": {
          "_token": "address of tokens that will be withdrawn",
          "_tokenAmount": "the amount of LP token to burn"
        },
        "returns": {
          "_0": "calculated amount of underlying token available to withdraw"
        }
      },
      "calculateTokenAmount(address[],uint256[],bool)": {
        "details": "This shouldn't be used outside frontends for user estimates.",
        "params": {
          "_amounts": "an array of token amounts to deposit or withdrawal, corresponding to param _tokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "_deposit": "whether this is a deposit or a withdrawal",
          "_tokens": "an array of all token addresses for the pair,"
        },
        "returns": {
          "_0": "token amount the user will receive"
        }
      },
      "getA()": {
        "details": "See the StableSwap paper for details",
        "returns": {
          "_0": "A parameter"
        }
      },
      "getAPrecise()": {
        "details": "See the StableSwap paper for details",
        "returns": {
          "_0": "A parameter in its raw precision form"
        }
      },
      "getAdminBalance(uint256)": {
        "params": {
          "_index": "Index of the pooled token"
        },
        "returns": {
          "_0": "admin's token balance in the token's precision"
        }
      },
      "getAmountOut(address,address,uint256)": {
        "params": {
          "_dx": "the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "_tokenFrom": "the token address the user wants to sell",
          "_tokenTo": "the token address the user wants to buy"
        },
        "returns": {
          "_0": "amount of tokens the user will receive"
        }
      },
      "getToken(uint8)": {
        "params": {
          "_index": "the index of the token"
        },
        "returns": {
          "_0": "address of the token at given index"
        }
      },
      "getTokenBalance(uint8)": {
        "params": {
          "_index": "the index of the token"
        },
        "returns": {
          "_0": "current balance of the pooled token at given index with token's native precision"
        }
      },
      "getTokenBalances()": {
        "returns": {
          "_0": "current balances of the pooled tokens"
        }
      },
      "getTokenIndex(address)": {
        "params": {
          "_tokenAddress": "address of the token"
        },
        "returns": {
          "_0": "the index of the given token address"
        }
      },
      "getVirtualPrice()": {
        "returns": {
          "_0": "the virtual price, scaled to the POOL_PRECISION_DECIMALS"
        }
      },
      "lpToken()": {
        "returns": {
          "_0": "lpToken addresse"
        }
      },
      "rampA(uint256,uint256)": {
        "params": {
          "_futureA": "the new A to ramp towards",
          "_futureTime": "timestamp when the new A should be reached"
        }
      },
      "removeLiquidity(uint256,address[],uint256[],address,uint256)": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "_amount": "the amount of LP tokens to burn",
          "_deadline": "latest timestamp to accept this transaction",
          "_minAmounts": "the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation",
          "_receiver": "recipient address",
          "_tokens": "token address list"
        },
        "returns": {
          "_0": "amounts of tokens user received"
        }
      },
      "removeLiquidityImbalance(address[],uint256[],uint256,address,uint256)": {
        "params": {
          "_amounts": "how much of each token to withdraw",
          "_deadline": "latest timestamp to accept this transaction",
          "_maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.",
          "_receiver": "recipient address",
          "_tokens": "token address list"
        },
        "returns": {
          "_0": "amount of LP tokens burned"
        }
      },
      "removeLiquidityOneToken(uint256,address,uint256,address,uint256)": {
        "params": {
          "_deadline": "latest timestamp to accept this transaction",
          "_minAmount": "the minimum amount to withdraw, otherwise revert",
          "_receiver": "recipient address",
          "_token": "address of the token you want to receive",
          "_tokenAmount": "the amount of the token you want to receive"
        },
        "returns": {
          "_0": "amount of chosen token user received"
        }
      },
      "setAdminFeeRate(uint256)": {
        "params": {
          "_newAdminFee": "new admin fee to be applied on future transactions"
        }
      },
      "setSwapFee(uint256)": {
        "params": {
          "_newSwapFee": "new swap fee to be applied on future transactions"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "_deadline": "latest timestamp to accept this transaction",
          "_dx": "the amount of tokens the user wants to swap from",
          "_minDy": "the min amount the user would like to receive, or revert.",
          "_receiver": "recipient address",
          "_tokenFrom": "the token address the user wants to sell",
          "_tokenTo": "the token address the user wants to buy"
        }
      },
      "tokens()": {
        "returns": {
          "_0": "all token addresses"
        }
      }
    },
    "title": "Swap - A StableSwap implementation in solidity.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(address[],uint256[],uint256,address,uint256)": {
        "notice": "Add liquidity to the pool with the given amounts of tokens"
      },
      "calculateRemoveLiquidity(address[],uint256)": {
        "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
      },
      "calculateRemoveLiquidityOneToken(address,uint256)": {
        "notice": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token"
      },
      "calculateTokenAmount(address[],uint256[],bool)": {
        "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running"
      },
      "claimFees()": {
        "notice": "Withdraw all admin fees to the contract factory manager"
      },
      "getA()": {
        "notice": "Return A, the amplification coefficient * n * (n - 1)"
      },
      "getAPrecise()": {
        "notice": "Return A in its raw precision form"
      },
      "getAdminBalance(uint256)": {
        "notice": "This function reads the accumulated amount of admin fees of the token with given index"
      },
      "getAmountOut(address,address,uint256)": {
        "notice": "Calculate amount of tokens you receive on swap"
      },
      "getToken(uint8)": {
        "notice": "Return address of the pooled token at given index. Reverts if _tokenIndex is out of range."
      },
      "getTokenBalance(uint8)": {
        "notice": "Return current balance of the pooled token at given index"
      },
      "getTokenBalances()": {
        "notice": "Return current balances of the pooled tokens"
      },
      "getTokenIndex(address)": {
        "notice": "Return the index of the given token address. Reverts if no matching token is found."
      },
      "getVirtualPrice()": {
        "notice": "Get the virtual price, to help calculate profit"
      },
      "lpToken()": {
        "notice": "Query lpToken addresse."
      },
      "rampA(uint256,uint256)": {
        "notice": "Start ramping up or down A parameter towards given futureA and futureTime Checks if the change is too rapid, and commits the new A value only when it falls under the limit range."
      },
      "removeLiquidity(uint256,address[],uint256[],address,uint256)": {
        "notice": "Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "removeLiquidityImbalance(address[],uint256[],uint256,address,uint256)": {
        "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "removeLiquidityOneToken(uint256,address,uint256,address,uint256)": {
        "notice": "Remove liquidity from the pool all in one token. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "setAdminFeeRate(uint256)": {
        "notice": "Update the admin fee. Admin fee takes portion of the swap fee."
      },
      "setSwapFee(uint256)": {
        "notice": "Update the swap fee to be applied on swaps"
      },
      "stopRampA()": {
        "notice": "Stop ramping A immediately. Reverts if ramp A is already stopped."
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Calculate amount of tokens you receive on swap"
      },
      "tokens()": {
        "notice": "Query all token addresses in pair."
      }
    },
    "notice": "This contract is responsible for custody of closely pegged assets (eg. group of stablecoins) and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens in desired ratios for an exchange of the pool token that represents their share of the pool. Users can burn pool tokens and withdraw their share of token(s). Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets distributed to the LPs. In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which stops the ratio of the tokens in the pool from changing. Users can always withdraw their tokens via multi-asset withdraws.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/StablePair.sol:StablePair",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/StablePair.sol:StablePair",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3543,
        "contract": "contracts/StablePair.sol:StablePair",
        "label": "factory",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3545,
        "contract": "contracts/StablePair.sol:StablePair",
        "label": "unlocked_",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3548,
        "contract": "contracts/StablePair.sol:StablePair",
        "label": "swapStorage",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Swap)9977_storage"
      },
      {
        "astId": 3552,
        "contract": "contracts/StablePair.sol:StablePair",
        "label": "tokenIndexes_",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)787)dyn_storage": {
        "base": "t_contract(IERC20)787",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)787": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LPToken)9813": {
        "encoding": "inplace",
        "label": "contract LPToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(Swap)9977_storage": {
        "encoding": "inplace",
        "label": "struct SwapUtils.Swap",
        "members": [
          {
            "astId": 9953,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "initialA",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9955,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "futureA",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9957,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "initialATime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9959,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "futureATime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9961,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "swapFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9963,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "adminFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9966,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "lpToken",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(LPToken)9813"
          },
          {
            "astId": 9970,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "pooledTokens",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_contract(IERC20)787)dyn_storage"
          },
          {
            "astId": 9973,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "tokenPrecisionMultipliers",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9976,
            "contract": "contracts/StablePair.sol:StablePair",
            "label": "balances",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}