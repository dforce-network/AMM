{
  "address": "0xf9B434C01D3860bb329fdD2353a3f99543C2e0d2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "pairType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "SetPairTypes",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountDesireds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsMin",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountDesireds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsMin",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            }
          ],
          "internalType": "struct Router.Route[]",
          "name": "_routes",
          "type": "tuple[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            }
          ],
          "internalType": "struct Router.Route[]",
          "name": "_routes",
          "type": "tuple[]"
        }
      ],
      "name": "getAmountsOutPath",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_has",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        }
      ],
      "name": "pairTypes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountDesireds",
          "type": "uint256[]"
        }
      ],
      "name": "quoteAddLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amountIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        }
      ],
      "name": "quoteRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "quoteRemoveLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        }
      ],
      "name": "quoteRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsMin",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsMin",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsMin",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalanceETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityImbalanceETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_actualBurnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityImbalanceWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_actualBurnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneTokenETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityOneTokenETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityOneTokenWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsMin",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairRouter",
          "type": "address"
        }
      ],
      "name": "setPairTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            }
          ],
          "internalType": "struct Router.Route[]",
          "name": "_routes",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            }
          ],
          "internalType": "struct Router.Route[]",
          "name": "_routes",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x681287b0563ae099088cd040f9d2c1151db9f008cbbd8a42241499b973f97398",
  "receipt": {
    "to": null,
    "from": "0x655284BebCC6e1DfFd098Ec538750D43B57bC743",
    "contractAddress": "0xf9B434C01D3860bb329fdD2353a3f99543C2e0d2",
    "transactionIndex": 6,
    "gasUsed": "21889288",
    "logsBloom": "0x
    "blockHash": "0xc1f7471aec5f73798d7fcb97fc26af81b3b09a831131aa347a454059b91f6d68",
    "transactionHash": "0x681287b0563ae099088cd040f9d2c1151db9f008cbbd8a42241499b973f97398",
    "logs": [],
    "blockNumber": 95654194,
    "cumulativeGasUsed": "26408261",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x422a86f57b6b6F1e557d406331c25EEeD075E7aA",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"
  ],
  "numDeployments": 1,
  "solcInputHash": "9b21e319764618c9d948ab61837fddc4",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pairType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"SetPairTypes\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountDesireds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsMin\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountDesireds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsMin\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"internalType\":\"struct Router.Route[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"internalType\":\"struct Router.Route[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsOutPath\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_has\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"}],\"name\":\"pairTypes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountDesireds\",\"type\":\"uint256[]\"}],\"name\":\"quoteAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amountIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"quoteRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"quoteRemoveLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"quoteRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsMin\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsMin\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsMin\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalanceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityImbalanceETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualBurnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityImbalanceWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualBurnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneTokenETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityOneTokenETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityOneTokenWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsMin\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairRouter\",\"type\":\"address\"}],\"name\":\"setPairTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"internalType\":\"struct Router.Route[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"internalType\":\"struct Router.Route[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract handles the routing of tokens in the dForce AMM ecosystem\",\"events\":{\"SetPairTypes(uint8,address)\":{\"details\":\"Event emitted when a pair type is set\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint8,address[],uint256[],uint256[],uint256,address,uint256)\":{\"details\":\"Adds liquidity to a given pair\",\"params\":{\"_amountDesireds\":\"The desired amounts of each token to add liquidity for\",\"_amountsMin\":\"The minimum amounts of each token to add liquidity for\",\"_deadline\":\"The deadline for the transaction\",\"_minLiquidity\":\"The minimum liquidity to add\",\"_pairType\":\"The pair type\",\"_to\":\"The address to send the liquidity to\",\"_tokens\":\"The tokens to add liquidity for\"},\"returns\":{\"_amounts\":\"The amounts of tokens added\",\"_liquidity\":\"The amount of liquidity added\"}},\"addLiquidityETH(uint8,address[],uint256[],uint256[],uint256,address,uint256)\":{\"details\":\"Adds liquidity to a given pair with ETH\",\"params\":{\"_amountDesireds\":\"The desired amounts of each token to add liquidity for\",\"_amountsMin\":\"The minimum amounts of each token to add liquidity for\",\"_deadline\":\"The deadline for the transaction\",\"_minLiquidity\":\"The minimum liquidity to add\",\"_pairType\":\"The pair type\",\"_to\":\"The address to send the liquidity to\",\"_tokens\":\"The tokens to add liquidity for\"},\"returns\":{\"_amounts\":\"The amounts of tokens added\",\"_liquidity\":\"The amount of liquidity added\"}},\"constructor\":{\"details\":\"Constructor function for the Router contract\",\"params\":{\"_factory\":\"Address of the factory contract\",\"_weth\":\"Address of the WETH contract\"}},\"getAmountsOut(uint256,(address,address,address)[])\":{\"details\":\"Returns the amount of tokens that will be received for a given input amount and route\",\"params\":{\"_amountIn\":\"The input amount\",\"_routes\":\"The route to take\"}},\"getAmountsOutPath(uint256,(address,address,address)[])\":{\"details\":\"Returns the amount of tokens that will be received for a given input amount and route\",\"params\":{\"_amountIn\":\"The input amount\",\"_routes\":\"The route to take\"}},\"getReserves(address[])\":{\"details\":\"Returns the reserves of the volatile pair for the given tokens\",\"params\":{\"_tokens\":\"The tokens to get the reserves for\"},\"returns\":{\"_reserveA\":\"The reserve of token A\",\"_reserveB\":\"The reserve of token B\"}},\"initialize(address,address)\":{\"details\":\"Initializes the Router contract\",\"params\":{\"_factory\":\"Address of the factory contract\",\"_weth\":\"Address of the WETH contract\"}},\"pairFor(address[],uint8)\":{\"details\":\"Returns the address of the pair for the given tokens and pair type\",\"params\":{\"_tokens\":\"The tokens to get the pair address for\",\"_type\":\"The pair type\"},\"returns\":{\"_has\":\"Whether or not the pair exists\",\"_pair\":\"The address of the pair\"}},\"pairTypes(uint8)\":{\"details\":\"Returns the address of the router contract for a given pair type\",\"params\":{\"_pairType\":\"The pair type\"}},\"quoteAddLiquidity(uint8,address[],uint256[])\":{\"details\":\"Returns the amount of tokens required to add liquidity to a given pair\",\"params\":{\"_amountDesireds\":\"The desired amounts of each token to add liquidity for\",\"_pairType\":\"The pair type\",\"_tokens\":\"The tokens to add liquidity for\"}},\"quoteRemoveLiquidity(uint8,address[],uint256)\":{\"details\":\"Returns the amount of tokens that will be received when removing liquidity from a given pair\",\"params\":{\"_liquidity\":\"The amount of liquidity to remove\",\"_pairType\":\"The pair type\",\"_tokens\":\"The tokens to remove liquidity for\"}},\"quoteRemoveLiquidityImbalance(uint8,address[],uint256[])\":{\"details\":\"Returns the amount of tokens that will be removed when removing liquidity from a given pair\",\"params\":{\"_amounts\":\"The desired amounts of each token to remove liquidity for\",\"_pairType\":\"The pair type\",\"_tokens\":\"The tokens to remove liquidity for\"}},\"quoteRemoveLiquidityOneToken(uint8,address[],address,uint256)\":{\"details\":\"Returns the amount of a specific token that will be received when removing liquidity from a given pair\",\"params\":{\"_liquidity\":\"The amount of liquidity to remove\",\"_pairType\":\"The pair type\",\"_token\":\"The token to receive\",\"_tokens\":\"The tokens to remove liquidity for\"}},\"removeLiquidity(uint8,address[],uint256,uint256[],address,uint256)\":{\"details\":\"Removes liquidity from a given pair\",\"params\":{\"_amountsMin\":\"The minimum amounts of each token to receive\",\"_deadline\":\"The deadline for the transaction\",\"_liquidity\":\"The amount of liquidity to remove\",\"_pairType\":\"The pair type\",\"_to\":\"The address to send the tokens to\",\"_tokens\":\"The tokens to remove liquidity for\"},\"returns\":{\"_amounts\":\"The amounts of tokens received\"}},\"removeLiquidityETH(uint8,address[],uint256,uint256[],address,uint256)\":{\"details\":\"Removes liquidity from a given pair with ETH\",\"params\":{\"_amountsMin\":\"The minimum amounts of each token to receive\",\"_deadline\":\"The deadline for the transaction\",\"_liquidity\":\"The amount of liquidity to remove\",\"_pairType\":\"The pair type\",\"_to\":\"The address to send the tokens to\",\"_tokens\":\"The tokens to remove liquidity for\"},\"returns\":{\"_amounts\":\"The amounts of tokens received\"}},\"removeLiquidityETHWithPermit(uint8,address[],uint256,uint256[],address,uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"Removes liquidity from a given pair with a permit\",\"params\":{\"_amountsMin\":\"The minimum amounts of each token to remove\",\"_approveMax\":\"Whether to approve the maximum amount\",\"_deadline\":\"The deadline for the transaction\",\"_liquidity\":\"The amount of liquidity to remove\",\"_pairType\":\"The pair type\",\"_r\":\"The r value of the permit signature\",\"_s\":\"The s value of the permit signature\",\"_to\":\"The address to send the tokens to\",\"_tokens\":\"The tokens to remove liquidity for\",\"_v\":\"The v value of the permit signature\"},\"returns\":{\"_amounts\":\"The amounts of tokens removed\"}},\"removeLiquidityImbalance(uint8,address[],uint256[],uint256,address,uint256)\":{\"details\":\"Removes liquidity from a given pair with an imbalance of tokens\",\"params\":{\"_amounts\":\"The amounts of each token to remove\",\"_deadline\":\"The deadline for the transaction\",\"_maxBurnAmount\":\"The maximum amount of liquidity to remove\",\"_pairType\":\"The pair type\",\"_to\":\"The address to send the tokens to\",\"_tokens\":\"The tokens to remove liquidity for\"},\"returns\":{\"_amount\":\"The amount of liquidity removed\"}},\"removeLiquidityImbalanceETH(uint8,address[],uint256[],uint256,address,uint256)\":{\"details\":\"Removes liquidity from a given pair with an imbalance of ETH and tokens\",\"params\":{\"_amounts\":\"The amounts of each token to remove\",\"_deadline\":\"The deadline for the transaction\",\"_maxBurnAmount\":\"The maximum amount of liquidity to remove\",\"_pairType\":\"The type of pair\",\"_to\":\"The address to send the tokens to\",\"_tokens\":\"The tokens to remove liquidity for\"},\"returns\":{\"_amount\":\"The amount of liquidity removed\"}},\"removeLiquidityImbalanceETHWithPermit(uint8,address[],uint256[],uint256,address,uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"Removes liquidity imbalance for multiple tokens with a permit\",\"params\":{\"_amounts\":\"The amounts of tokens to remove\",\"_approveMax\":\"Whether to approve the maximum amount\",\"_deadline\":\"The deadline for the transaction\",\"_maxBurnAmount\":\"The maximum amount of liquidity to remove\",\"_pairType\":\"The type of pair\",\"_r\":\"The r value of the permit signature\",\"_s\":\"The s value of the permit signature\",\"_to\":\"The address to send the tokens to\",\"_tokens\":\"The tokens to remove liquidity for\",\"_v\":\"The v value of the permit signature\"},\"returns\":{\"_actualBurnAmount\":\"The actual amount of liquidity removed\"}},\"removeLiquidityImbalanceWithPermit(uint8,address[],uint256[],uint256,address,uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"Removes liquidity imbalance for multiple tokens with a permit\",\"params\":{\"_amounts\":\"The amounts of tokens to remove\",\"_approveMax\":\"Whether to approve the maximum amount\",\"_deadline\":\"The deadline for the transaction\",\"_maxBurnAmount\":\"The maximum amount of liquidity to remove\",\"_pairType\":\"The type of pair\",\"_r\":\"The r value of the permit signature\",\"_s\":\"The s value of the permit signature\",\"_to\":\"The address to send the tokens to\",\"_tokens\":\"The tokens to remove liquidity for\",\"_v\":\"The v value of the permit signature\"},\"returns\":{\"_actualBurnAmount\":\"The actual amount of liquidity removed\"}},\"removeLiquidityOneToken(uint8,address[],uint256,address,uint256,address,uint256)\":{\"details\":\"Removes liquidity for a single token from a given pair\",\"params\":{\"_deadline\":\"The deadline for the transaction\",\"_liquidity\":\"The amount of liquidity to remove\",\"_minAmount\":\"The minimum amount of token to receive\",\"_pairType\":\"The pair type\",\"_to\":\"The address to send the token to\",\"_token\":\"The token to receive\",\"_tokens\":\"The tokens to remove liquidity for\"},\"returns\":{\"_amount\":\"The amount of token received\"}},\"removeLiquidityOneTokenETH(uint8,address[],uint256,address,uint256,address,uint256)\":{\"details\":\"Removes liquidity for a single token from a given pair with ETH\",\"params\":{\"_deadline\":\"The deadline for the transaction\",\"_liquidity\":\"The amount of liquidity to remove\",\"_minAmount\":\"The minimum amount of token to receive\",\"_pairType\":\"The pair type\",\"_to\":\"The address to send the token to\",\"_token\":\"The token to receive\",\"_tokens\":\"The tokens to remove liquidity for\"},\"returns\":{\"_amount\":\"The amount of token received\"}},\"removeLiquidityOneTokenETHWithPermit(uint8,address[],uint256,address,uint256,address,uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"Removes liquidity for a single token with a permit\",\"params\":{\"_approveMax\":\"Whether to approve the maximum amount\",\"_deadline\":\"The deadline for the transaction\",\"_liquidity\":\"The amount of liquidity to remove\",\"_minAmount\":\"The minimum amount of tokens to remove\",\"_pairType\":\"The type of pair\",\"_r\":\"The r value of the permit signature\",\"_s\":\"The s value of the permit signature\",\"_to\":\"The address to send the tokens to\",\"_token\":\"The token to remove liquidity for\",\"_tokens\":\"The tokens to remove liquidity for\",\"_v\":\"The v value of the permit signature\"},\"returns\":{\"_tokenAmount\":\"The amount of tokens removed\"}},\"removeLiquidityOneTokenWithPermit(uint8,address[],uint256,address,uint256,address,uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"Removes liquidity for a single token with a permit\",\"params\":{\"_approveMax\":\"Whether to approve the maximum amount\",\"_deadline\":\"The deadline for the transaction\",\"_liquidity\":\"The amount of liquidity to remove\",\"_minAmount\":\"The minimum amount of tokens to remove\",\"_pairType\":\"The type of pair\",\"_r\":\"The r value of the permit signature\",\"_s\":\"The s value of the permit signature\",\"_to\":\"The address to send the tokens to\",\"_token\":\"The token to remove liquidity for\",\"_tokens\":\"The tokens to remove liquidity for\",\"_v\":\"The v value of the permit signature\"},\"returns\":{\"_tokenAmount\":\"The amount of tokens removed\"}},\"removeLiquidityWithPermit(uint8,address[],uint256,uint256[],address,uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"Removes liquidity from a given pair with a permit\",\"params\":{\"_amountsMin\":\"The minimum amounts of each token to remove\",\"_approveMax\":\"Whether to approve the maximum amount\",\"_deadline\":\"The deadline for the transaction\",\"_liquidity\":\"The amount of liquidity to remove\",\"_pairType\":\"The pair type\",\"_r\":\"The r value of the permit signature\",\"_s\":\"The s value of the permit signature\",\"_to\":\"The address to send the tokens to\",\"_tokens\":\"The tokens to remove liquidity for\",\"_v\":\"The v value of the permit signature\"},\"returns\":{\"_amounts\":\"The amounts of tokens removed\"}},\"setPairTypes(address)\":{\"details\":\"Sets the pair types for the router contract\",\"params\":{\"_pairRouter\":\"The address of the pair router contract\"}},\"swap((address,address,address)[],uint256,uint256,address,uint256)\":{\"details\":\"Swaps tokens through multiple pairs\",\"params\":{\"_amountIn\":\"The amount of tokens to swap\",\"_amountOutMin\":\"The minimum amount of tokens to receive\",\"_deadline\":\"The deadline for the transaction\",\"_routes\":\"The routes to swap through\",\"_to\":\"The address to send the swapped tokens to\"},\"returns\":{\"_amountOut\":\"The amount of tokens received\"}},\"swapETH((address,address,address)[],uint256,uint256,address,uint256)\":{\"details\":\"Swaps ETH for tokens through multiple pairs\",\"params\":{\"_amountIn\":\"The amount of ETH to swap\",\"_amountOutMin\":\"The minimum amount of tokens to receive\",\"_deadline\":\"The deadline for the transaction\",\"_routes\":\"The routes to swap through\",\"_to\":\"The address to send the swapped tokens to\"},\"returns\":{\"_amountOut\":\"The amount of tokens received\"}},\"weth()\":{\"details\":\"Returns the address of the WETH contract\"}},\"stateVariables\":{\"factory\":{\"details\":\"Address of the factory contract\"},\"pairTypes_\":{\"details\":\"Mapping of pair types to their respective router contracts\"},\"weth_\":{\"details\":\"Address of the WETH contract\"}},\"title\":\"Router contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Router.sol\":\"Router\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"./utils/TransferHelper.sol\\\";\\r\\n\\r\\nimport \\\"./interface/IWETH.sol\\\";\\r\\nimport \\\"./interface/IPair.sol\\\";\\r\\nimport \\\"./interface/IPairRouter.sol\\\";\\r\\nimport \\\"./interface/IPairFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Router contract\\r\\n * @dev This contract handles the routing of tokens in the dForce AMM ecosystem\\r\\n */\\r\\ncontract Router is Initializable {\\r\\n    using Address for address;\\r\\n    using TransferHelper for address;\\r\\n\\r\\n    /**\\r\\n     * @dev Struct to represent a route between two tokens\\r\\n     */\\r\\n    struct Route {\\r\\n        address from; // Address of the token to convert from\\r\\n        address to; // Address of the token to convert to\\r\\n        address pair; // Address of the pair contract that connects the two tokens\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Address of the factory contract\\r\\n     */\\r\\n    address public factory;\\r\\n\\r\\n    /**\\r\\n     * @dev Address of the WETH contract\\r\\n     */\\r\\n    IWETH internal weth_;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of pair types to their respective router contracts\\r\\n     */\\r\\n    mapping(uint8 => address) internal pairTypes_;\\r\\n\\r\\n    /**\\r\\n     * @dev Event emitted when a pair type is set\\r\\n     */\\r\\n    event SetPairTypes(uint8 pairType, address router);\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor function for the Router contract\\r\\n     * @param _factory Address of the factory contract\\r\\n     * @param _weth Address of the WETH contract\\r\\n     */\\r\\n    constructor(address _factory, address _weth) public {\\r\\n        initialize(_factory, _weth);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the Router contract\\r\\n     * @param _factory Address of the factory contract\\r\\n     * @param _weth Address of the WETH contract\\r\\n     */\\r\\n    function initialize(address _factory, address _weth) public initializer {\\r\\n        factory = _factory;\\r\\n        weth_ = IWETH(_weth);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function to receive ETH from WETH contract\\r\\n     */\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == address(weth_)); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to restrict access to only the manager\\r\\n     */\\r\\n    modifier onlyManager() {\\r\\n        require(msg.sender == IPairFactory(factory).manager(), \\\"Router: not manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if the given pair type is valid\\r\\n     * @param _pairType The pair type to check\\r\\n     */\\r\\n    modifier checkPairType(uint8 _pairType) {\\r\\n        require(pairTypes_[_pairType] != address(0), \\\"Router: invalid pair type\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the WETH contract\\r\\n     */\\r\\n    function weth() external view returns (address) {\\r\\n        return address(weth_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the router contract for a given pair type\\r\\n     * @param _pairType The pair type\\r\\n     */\\r\\n    function pairTypes(uint8 _pairType) external view returns (address) {\\r\\n        return pairTypes_[_pairType];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens that will be received for a given input amount and route\\r\\n     * @param _amountIn The input amount\\r\\n     * @param _routes The route to take\\r\\n     * @return _amounts The amounts of tokens that will be received\\r\\n     */\\r\\n    function _getAmountsOut(uint256 _amountIn, Route[] memory _routes)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[] memory _amounts)\\r\\n    {\\r\\n        _amounts = new uint256[](_routes.length + 1);\\r\\n        _amounts[0] = _amountIn;\\r\\n\\r\\n        for (uint256 i = 0; i < _routes.length; i++)\\r\\n            _amounts[i + 1] = IPair(_routes[i].pair).getAmountOut(_routes[i].from, _routes[i].to, _amounts[i]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens that will be received for a given input amount and route\\r\\n     * @param _amountIn The input amount\\r\\n     * @param _routes The route to take\\r\\n     */\\r\\n    function getAmountsOutPath(uint256 _amountIn, Route[] memory _routes)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory _amounts)\\r\\n    {\\r\\n        _amounts = _getAmountsOut(_amountIn, _routes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens that will be received for a given input amount and route\\r\\n     * @param _amountIn The input amount\\r\\n     * @param _routes The route to take\\r\\n     */\\r\\n    function getAmountsOut(uint256 _amountIn, Route[] memory _routes) external view returns (uint256) {\\r\\n        require(_routes.length >= 1, \\\"Router: INVALID_PATH\\\");\\r\\n        uint256[] memory _amounts = _getAmountsOut(_amountIn, _routes);\\r\\n        return _amounts[_amounts.length - 1];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pair for the given tokens and pair type\\r\\n     * @param _tokens The tokens to get the pair address for\\r\\n     * @param _type The pair type\\r\\n     * @return _pair The address of the pair\\r\\n     * @return _has Whether or not the pair exists\\r\\n     */\\r\\n    function pairFor(address[] memory _tokens, uint8 _type) external view returns (address _pair, bool _has) {\\r\\n        _pair = IPairFactory(factory).getPairAddress(_tokens, _type);\\r\\n        _has = IPairFactory(factory).isPair(_pair);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the reserves of the volatile pair for the given tokens\\r\\n     * @param _tokens The tokens to get the reserves for\\r\\n     * @return _reserveA The reserve of token A\\r\\n     * @return _reserveB The reserve of token B\\r\\n     */\\r\\n    function getReserves(address[] memory _tokens) external view returns (uint256 _reserveA, uint256 _reserveB) {\\r\\n        address _pair = IPairFactory(factory).getPairAddress(_tokens, 1);\\r\\n        if (IPairFactory(factory).isPair(_pair))\\r\\n            (_reserveA, _reserveB) = IVolatileRouter(pairTypes_[1]).getReserves(_pair, _tokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens required to add liquidity to a given pair\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to add liquidity for\\r\\n     * @param _amountDesireds The desired amounts of each token to add liquidity for\\r\\n     */\\r\\n    function quoteAddLiquidity(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] memory _amountDesireds\\r\\n    ) external view returns (uint256[] memory _amountIn, uint256 liquidity) {\\r\\n        address _router = pairTypes_[_pairType];\\r\\n        bytes memory _returns = _router.functionStaticCall(\\r\\n            abi.encodeWithSelector(IPairRouter.quoteAddLiquidity.selector, _tokens, _amountDesireds)\\r\\n        );\\r\\n        (_amountIn, liquidity) = abi.decode(_returns, (uint256[], uint256));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens that will be received when removing liquidity from a given pair\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     */\\r\\n    function quoteRemoveLiquidity(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256 _liquidity\\r\\n    ) external view returns (uint256[] memory _amounts) {\\r\\n        address _router = pairTypes_[_pairType];\\r\\n        bytes memory _returns = _router.functionStaticCall(\\r\\n            abi.encodeWithSelector(IPairRouter.quoteRemoveLiquidity.selector, _tokens, _liquidity)\\r\\n        );\\r\\n        _amounts = abi.decode(_returns, (uint256[]));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of a specific token that will be received when removing liquidity from a given pair\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _token The token to receive\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     */\\r\\n    function quoteRemoveLiquidityOneToken(\\r\\n        uint8 _pairType,\\r\\n        address[] calldata _tokens,\\r\\n        address _token,\\r\\n        uint256 _liquidity\\r\\n    ) external view returns (uint256 _amount) {\\r\\n        address _router = pairTypes_[_pairType];\\r\\n        bytes memory _returns = _router.functionStaticCall(\\r\\n            abi.encodeWithSelector(IStablPairRouter.quoteRemoveLiquidityOneToken.selector, _tokens, _token, _liquidity)\\r\\n        );\\r\\n        _amount = abi.decode(_returns, (uint256));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens that will be removed when removing liquidity from a given pair\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _amounts The desired amounts of each token to remove liquidity for\\r\\n     */\\r\\n    function quoteRemoveLiquidityImbalance(\\r\\n        uint8 _pairType,\\r\\n        address[] calldata _tokens,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external view returns (uint256 _amount) {\\r\\n        address _router = pairTypes_[_pairType];\\r\\n        bytes memory _returns = _router.functionStaticCall(\\r\\n            abi.encodeWithSelector(IStablPairRouter.quoteRemoveLiquidityImbalance.selector, _tokens, _amounts)\\r\\n        );\\r\\n        _amount = abi.decode(_returns, (uint256));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds liquidity to a given pair\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to add liquidity for\\r\\n     * @param _amountDesireds The desired amounts of each token to add liquidity for\\r\\n     * @param _amountsMin The minimum amounts of each token to add liquidity for\\r\\n     * @param _minLiquidity The minimum liquidity to add\\r\\n     * @param _to The address to send the liquidity to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amounts The amounts of tokens added\\r\\n     * @return _liquidity The amount of liquidity added\\r\\n     */\\r\\n    function addLiquidity(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] memory _amountDesireds,\\r\\n        uint256[] memory _amountsMin,\\r\\n        uint256 _minLiquidity,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external checkPairType(_pairType) returns (uint256[] memory _amounts, uint256 _liquidity) {\\r\\n        (_amounts, _liquidity) = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IPairRouter.addLiquidity.selector,\\r\\n                    _tokens,\\r\\n                    _amountDesireds,\\r\\n                    _amountsMin,\\r\\n                    _minLiquidity,\\r\\n                    _to,\\r\\n                    _deadline\\r\\n                )\\r\\n            ),\\r\\n            (uint256[], uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds liquidity to a given pair with ETH\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to add liquidity for\\r\\n     * @param _amountDesireds The desired amounts of each token to add liquidity for\\r\\n     * @param _amountsMin The minimum amounts of each token to add liquidity for\\r\\n     * @param _minLiquidity The minimum liquidity to add\\r\\n     * @param _to The address to send the liquidity to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amounts The amounts of tokens added\\r\\n     * @return _liquidity The amount of liquidity added\\r\\n     */\\r\\n    function addLiquidityETH(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] memory _amountDesireds,\\r\\n        uint256[] memory _amountsMin,\\r\\n        uint256 _minLiquidity,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable checkPairType(_pairType) returns (uint256[] memory _amounts, uint256 _liquidity) {\\r\\n        (_amounts, _liquidity) = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IPairRouter.addLiquidityETH.selector,\\r\\n                    _tokens,\\r\\n                    _amountDesireds,\\r\\n                    _amountsMin,\\r\\n                    _minLiquidity,\\r\\n                    _to,\\r\\n                    _deadline\\r\\n                )\\r\\n            ),\\r\\n            (uint256[], uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity from a given pair\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     * @param _amountsMin The minimum amounts of each token to receive\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amounts The amounts of tokens received\\r\\n     */\\r\\n    function removeLiquidity(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256 _liquidity,\\r\\n        uint256[] memory _amountsMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external checkPairType(_pairType) returns (uint256[] memory _amounts) {\\r\\n        _amounts = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IPairRouter.removeLiquidity.selector,\\r\\n                    _tokens,\\r\\n                    _liquidity,\\r\\n                    _amountsMin,\\r\\n                    _to,\\r\\n                    _deadline\\r\\n                )\\r\\n            ),\\r\\n            (uint256[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity from a given pair with ETH\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     * @param _amountsMin The minimum amounts of each token to receive\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amounts The amounts of tokens received\\r\\n     */\\r\\n    function removeLiquidityETH(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256 _liquidity,\\r\\n        uint256[] memory _amountsMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external checkPairType(_pairType) returns (uint256[] memory _amounts) {\\r\\n        _amounts = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IPairRouter.removeLiquidityETH.selector,\\r\\n                    _tokens,\\r\\n                    _liquidity,\\r\\n                    _amountsMin,\\r\\n                    _to,\\r\\n                    _deadline\\r\\n                )\\r\\n            ),\\r\\n            (uint256[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity for a single token from a given pair\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     * @param _token The token to receive\\r\\n     * @param _minAmount The minimum amount of token to receive\\r\\n     * @param _to The address to send the token to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amount The amount of token received\\r\\n     */\\r\\n    function removeLiquidityOneToken(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256 _liquidity,\\r\\n        address _token,\\r\\n        uint256 _minAmount,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external checkPairType(_pairType) returns (uint256 _amount) {\\r\\n        _amount = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IStablPairRouter.removeLiquidityOneToken.selector,\\r\\n                    _tokens,\\r\\n                    _liquidity,\\r\\n                    _token,\\r\\n                    _minAmount,\\r\\n                    _to,\\r\\n                    _deadline\\r\\n                )\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity for a single token from a given pair with ETH\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     * @param _token The token to receive\\r\\n     * @param _minAmount The minimum amount of token to receive\\r\\n     * @param _to The address to send the token to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amount The amount of token received\\r\\n     */\\r\\n    function removeLiquidityOneTokenETH(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256 _liquidity,\\r\\n        address _token,\\r\\n        uint256 _minAmount,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external checkPairType(_pairType) returns (uint256 _amount) {\\r\\n        _amount = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IStablPairRouter.removeLiquidityOneTokenETH.selector,\\r\\n                    _tokens,\\r\\n                    _liquidity,\\r\\n                    _token,\\r\\n                    _minAmount,\\r\\n                    _to,\\r\\n                    _deadline\\r\\n                )\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity from a given pair with an imbalance of tokens\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _amounts The amounts of each token to remove\\r\\n     * @param _maxBurnAmount The maximum amount of liquidity to remove\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amount The amount of liquidity removed\\r\\n     */\\r\\n    function removeLiquidityImbalance(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] calldata _amounts,\\r\\n        uint256 _maxBurnAmount,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external checkPairType(_pairType) returns (uint256 _amount) {\\r\\n        _amount = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IStablPairRouter.removeLiquidityImbalance.selector,\\r\\n                    _tokens,\\r\\n                    _amounts,\\r\\n                    _maxBurnAmount,\\r\\n                    _to,\\r\\n                    _deadline\\r\\n                )\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity from a given pair with an imbalance of ETH and tokens\\r\\n     * @param _pairType The type of pair\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _amounts The amounts of each token to remove\\r\\n     * @param _maxBurnAmount The maximum amount of liquidity to remove\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amount The amount of liquidity removed\\r\\n     */\\r\\n    function removeLiquidityImbalanceETH(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] calldata _amounts,\\r\\n        uint256 _maxBurnAmount,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external checkPairType(_pairType) returns (uint256 _amount) {\\r\\n        _amount = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IStablPairRouter.removeLiquidityImbalanceETH.selector,\\r\\n                    _tokens,\\r\\n                    _amounts,\\r\\n                    _maxBurnAmount,\\r\\n                    _to,\\r\\n                    _deadline\\r\\n                )\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity from a given pair with a permit\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     * @param _amountsMin The minimum amounts of each token to remove\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @param _approveMax Whether to approve the maximum amount\\r\\n     * @param _v The v value of the permit signature\\r\\n     * @param _r The r value of the permit signature\\r\\n     * @param _s The s value of the permit signature\\r\\n     * @return _amounts The amounts of tokens removed\\r\\n     */\\r\\n    function removeLiquidityWithPermit(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256 _liquidity,\\r\\n        uint256[] memory _amountsMin,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external checkPairType(_pairType) returns (uint256[] memory _amounts) {\\r\\n        _amounts = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IPairRouter.removeLiquidityWithPermit.selector,\\r\\n                    _tokens,\\r\\n                    _liquidity,\\r\\n                    _amountsMin,\\r\\n                    _to,\\r\\n                    _deadline,\\r\\n                    _approveMax,\\r\\n                    _v,\\r\\n                    _r,\\r\\n                    _s\\r\\n                )\\r\\n            ),\\r\\n            (uint256[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity from a given pair with a permit\\r\\n     * @param _pairType The pair type\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     * @param _amountsMin The minimum amounts of each token to remove\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @param _approveMax Whether to approve the maximum amount\\r\\n     * @param _v The v value of the permit signature\\r\\n     * @param _r The r value of the permit signature\\r\\n     * @param _s The s value of the permit signature\\r\\n     * @return _amounts The amounts of tokens removed\\r\\n     */\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256 _liquidity,\\r\\n        uint256[] memory _amountsMin,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external checkPairType(_pairType) returns (uint256[] memory _amounts) {\\r\\n        _amounts = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IPairRouter.removeLiquidityETHWithPermit.selector,\\r\\n                    _tokens,\\r\\n                    _liquidity,\\r\\n                    _amountsMin,\\r\\n                    _to,\\r\\n                    _deadline,\\r\\n                    _approveMax,\\r\\n                    _v,\\r\\n                    _r,\\r\\n                    _s\\r\\n                )\\r\\n            ),\\r\\n            (uint256[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity for a single token with a permit\\r\\n     * @param _pairType The type of pair\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     * @param _token The token to remove liquidity for\\r\\n     * @param _minAmount The minimum amount of tokens to remove\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @param _approveMax Whether to approve the maximum amount\\r\\n     * @param _v The v value of the permit signature\\r\\n     * @param _r The r value of the permit signature\\r\\n     * @param _s The s value of the permit signature\\r\\n     * @return _tokenAmount The amount of tokens removed\\r\\n     */\\r\\n    function removeLiquidityOneTokenWithPermit(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256 _liquidity,\\r\\n        address _token,\\r\\n        uint256 _minAmount,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external returns (uint256 _tokenAmount) {\\r\\n        require(pairTypes_[_pairType] != address(0), \\\"Router: invalid pair type\\\");\\r\\n        _tokenAmount = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IStablPairRouter.removeLiquidityOneTokenWithPermit.selector,\\r\\n                    _tokens,\\r\\n                    _liquidity,\\r\\n                    _token,\\r\\n                    _minAmount,\\r\\n                    _to,\\r\\n                    _deadline,\\r\\n                    _approveMax,\\r\\n                    _v,\\r\\n                    _r,\\r\\n                    _s\\r\\n                )\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity for a single token with a permit\\r\\n     * @param _pairType The type of pair\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _liquidity The amount of liquidity to remove\\r\\n     * @param _token The token to remove liquidity for\\r\\n     * @param _minAmount The minimum amount of tokens to remove\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @param _approveMax Whether to approve the maximum amount\\r\\n     * @param _v The v value of the permit signature\\r\\n     * @param _r The r value of the permit signature\\r\\n     * @param _s The s value of the permit signature\\r\\n     * @return _tokenAmount The amount of tokens removed\\r\\n     */\\r\\n    function removeLiquidityOneTokenETHWithPermit(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256 _liquidity,\\r\\n        address _token,\\r\\n        uint256 _minAmount,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external returns (uint256 _tokenAmount) {\\r\\n        require(pairTypes_[_pairType] != address(0), \\\"Router: invalid pair type\\\");\\r\\n        _tokenAmount = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IStablPairRouter.removeLiquidityOneTokenETHWithPermit.selector,\\r\\n                    _tokens,\\r\\n                    _liquidity,\\r\\n                    _token,\\r\\n                    _minAmount,\\r\\n                    _to,\\r\\n                    _deadline,\\r\\n                    _approveMax,\\r\\n                    _v,\\r\\n                    _r,\\r\\n                    _s\\r\\n                )\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity imbalance for multiple tokens with a permit\\r\\n     * @param _pairType The type of pair\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _amounts The amounts of tokens to remove\\r\\n     * @param _maxBurnAmount The maximum amount of liquidity to remove\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @param _approveMax Whether to approve the maximum amount\\r\\n     * @param _v The v value of the permit signature\\r\\n     * @param _r The r value of the permit signature\\r\\n     * @param _s The s value of the permit signature\\r\\n     * @return _actualBurnAmount The actual amount of liquidity removed\\r\\n     */\\r\\n    function removeLiquidityImbalanceWithPermit(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] memory _amounts,\\r\\n        uint256 _maxBurnAmount,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external checkPairType(_pairType) returns (uint256 _actualBurnAmount) {\\r\\n        _actualBurnAmount = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IStablPairRouter.removeLiquidityImbalanceWithPermit.selector,\\r\\n                    _tokens,\\r\\n                    _amounts,\\r\\n                    _maxBurnAmount,\\r\\n                    _to,\\r\\n                    _deadline,\\r\\n                    _approveMax,\\r\\n                    _v,\\r\\n                    _r,\\r\\n                    _s\\r\\n                )\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes liquidity imbalance for multiple tokens with a permit\\r\\n     * @param _pairType The type of pair\\r\\n     * @param _tokens The tokens to remove liquidity for\\r\\n     * @param _amounts The amounts of tokens to remove\\r\\n     * @param _maxBurnAmount The maximum amount of liquidity to remove\\r\\n     * @param _to The address to send the tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @param _approveMax Whether to approve the maximum amount\\r\\n     * @param _v The v value of the permit signature\\r\\n     * @param _r The r value of the permit signature\\r\\n     * @param _s The s value of the permit signature\\r\\n     * @return _actualBurnAmount The actual amount of liquidity removed\\r\\n     */\\r\\n    function removeLiquidityImbalanceETHWithPermit(\\r\\n        uint8 _pairType,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] memory _amounts,\\r\\n        uint256 _maxBurnAmount,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external checkPairType(_pairType) returns (uint256 _actualBurnAmount) {\\r\\n        _actualBurnAmount = abi.decode(\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IStablPairRouter.removeLiquidityImbalanceETHWithPermit.selector,\\r\\n                    _tokens,\\r\\n                    _amounts,\\r\\n                    _maxBurnAmount,\\r\\n                    _to,\\r\\n                    _deadline,\\r\\n                    _approveMax,\\r\\n                    _v,\\r\\n                    _r,\\r\\n                    _s\\r\\n                )\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swaps tokens through multiple pairs\\r\\n     * @param _routes The routes to swap through\\r\\n     * @param _amountIn The amount of tokens to swap\\r\\n     * @param _amountOutMin The minimum amount of tokens to receive\\r\\n     * @param _to The address to send the swapped tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amountOut The amount of tokens received\\r\\n     */\\r\\n    function swap(\\r\\n        Route[] memory _routes,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _amountOutMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 _amountOut) {\\r\\n        // Get the amounts of tokens to receive for each pair in the route\\r\\n        uint256[] memory _amounts = _getAmountsOut(_amountIn, _routes);\\r\\n        // Ensure that the amount of tokens received is greater than or equal to the minimum amount specified\\r\\n        require(_amounts[_amounts.length - 1] >= _amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n        // Transfer the input tokens from the sender to this contract\\r\\n        _routes[0].from.safeTransferFrom(msg.sender, address(this), _amountIn);\\r\\n        // Swap the tokens through each pair in the route\\r\\n        for (uint256 i = 0; i < _routes.length; i++) {\\r\\n            // Get the pair type for the current pair in the route\\r\\n            uint8 _pairType = IPair(_routes[i].pair).PAIR_TYPE();\\r\\n            // Set the receiver address for the current pair in the route\\r\\n            address _receiver = address(this);\\r\\n            if (i == _routes.length - 1) _receiver = _to;\\r\\n\\r\\n            // Call the swap function on the router contract for the current pair in the route\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IPairRouter.swap.selector,\\r\\n                    _routes[i],\\r\\n                    _amounts[i],\\r\\n                    _amounts[i + 1],\\r\\n                    _receiver,\\r\\n                    _deadline\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        // Set the amount of tokens received to the output amount\\r\\n        _amountOut = _amounts[_amounts.length - 1];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swaps ETH for tokens through multiple pairs\\r\\n     * @param _routes The routes to swap through\\r\\n     * @param _amountIn The amount of ETH to swap\\r\\n     * @param _amountOutMin The minimum amount of tokens to receive\\r\\n     * @param _to The address to send the swapped tokens to\\r\\n     * @param _deadline The deadline for the transaction\\r\\n     * @return _amountOut The amount of tokens received\\r\\n     */\\r\\n    function swapETH(\\r\\n        Route[] memory _routes,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _amountOutMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable returns (uint256 _amountOut) {\\r\\n        // Get the amounts of tokens to receive for each pair in the route\\r\\n        uint256[] memory _amounts = _getAmountsOut(_amountIn, _routes);\\r\\n        // Ensure that the amount of tokens received is greater than or equal to the minimum amount specified\\r\\n        require(_amounts[_amounts.length - 1] >= _amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n\\r\\n        // If the input token is WETH, ensure that the amount of ETH sent is equal to the amount to swap\\r\\n        if (_routes[0].from == address(weth_)) {\\r\\n            require(msg.value == _amountIn, \\\"Router: msg.value is not equal to _amountIn\\\");\\r\\n            // Deposit the ETH into WETH\\r\\n            weth_.deposit{ value: msg.value }();\\r\\n        } else {\\r\\n            require(msg.value == 0, \\\"Router: msg.value is not equal to 0\\\");\\r\\n            // Transfer the input tokens from the sender to this contract\\r\\n            _routes[0].from.safeTransferFrom(msg.sender, address(this), _amountIn);\\r\\n        }\\r\\n\\r\\n        // Swap the tokens through each pair in the route\\r\\n        for (uint256 i = 0; i < _routes.length; i++) {\\r\\n            // Get the pair type for the current pair in the route\\r\\n            uint8 _pairType = IPair(_routes[i].pair).PAIR_TYPE();\\r\\n            // Set the receiver address for the current pair in the route\\r\\n            address _receiver = address(this);\\r\\n            if (i == _routes.length - 1 && _routes[i].to != address(weth_)) _receiver = _to;\\r\\n\\r\\n            // Call the swap function on the router contract for the current pair in the route\\r\\n            pairTypes_[_pairType].functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    IPairRouter.swap.selector,\\r\\n                    _routes[i],\\r\\n                    _amounts[i],\\r\\n                    _amounts[i + 1],\\r\\n                    _receiver,\\r\\n                    _deadline\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        // Set the amount of tokens received to the output amount\\r\\n        _amountOut = _amounts[_amounts.length - 1];\\r\\n\\r\\n        // If the output token is WETH, withdraw the WETH and transfer the ETH to the recipient\\r\\n        if (_routes[_routes.length - 1].to == address(weth_)) {\\r\\n            weth_.withdraw(_amountOut);\\r\\n            _to.safeTransferETH(_amountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the pair types for the router contract\\r\\n     * @param _pairRouter The address of the pair router contract\\r\\n     */\\r\\n    function setPairTypes(address _pairRouter) external onlyManager {\\r\\n        // Get the pair type for the pair router contract\\r\\n        uint8 _pairType = IPairRouter(_pairRouter).PAIR_TYPE();\\r\\n        // Set the pair type for the router contract\\r\\n        pairTypes_[_pairType] = _pairRouter;\\r\\n        // Emit an event indicating that the pair types have been set\\r\\n        emit SetPairTypes(_pairType, _pairRouter);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3ef3b6f0715ad2b942653ae99d50264a19e54277246385c948a42aea4355bf38\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IPair {\\r\\n    function initialize(address[] memory _tokens, bytes memory _data) external;\\r\\n\\r\\n    function PAIR_TYPE() external view returns (uint8);\\r\\n\\r\\n    function AUTH() external view returns (bool);\\r\\n\\r\\n    function tokens() external view returns (address[] memory);\\r\\n\\r\\n    function getAmountOut(address _from, address _to, uint256 _amount) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IVolatilePair is IPair {\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n\\r\\n    function mint(address _to) external returns (uint256 _liquidity);\\r\\n\\r\\n    function burn(address _to) external returns (uint256 _amount0, uint256 _amount1);\\r\\n\\r\\n    function swap(uint256 _amount0Out, uint256 _amount1Out, address _to, bytes calldata _data) external;\\r\\n\\r\\n    function getRealBalanceOf() external view returns (uint256, uint256);\\r\\n\\r\\n    function skim(address _to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function claimFees() external returns (uint256[] memory _adminFees);\\r\\n}\\r\\n\\r\\ninterface IStablePair is IPair {\\r\\n    function lpToken() external view returns (address);\\r\\n\\r\\n    function calculateTokenAmount(\\r\\n        address[] calldata _tokens,\\r\\n        uint256[] calldata _amounts,\\r\\n        bool _deposit\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function calculateRemoveLiquidityOneToken(address _token, uint256 _liquidity) external view returns (uint256);\\r\\n\\r\\n    function calculateRemoveLiquidity(\\r\\n        address[] calldata _tokens,\\r\\n        uint256 _amount\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address[] calldata _tokens,\\r\\n        uint256[] calldata _amounts,\\r\\n        uint256 _minToMint,\\r\\n        address _receiver,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        uint256 _amount,\\r\\n        address[] calldata _tokens,\\r\\n        uint256[] calldata _minAmounts,\\r\\n        address _receiver,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256[] memory);\\r\\n\\r\\n    function removeLiquidityOneToken(\\r\\n        uint256 _tokenAmount,\\r\\n        address _token,\\r\\n        uint256 _minAmount,\\r\\n        address _receiver,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidityImbalance(\\r\\n        address[] calldata _tokens,\\r\\n        uint256[] calldata _amounts,\\r\\n        uint256 _maxBurnAmount,\\r\\n        address _receiver,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function swap(\\r\\n        address _tokenFrom,\\r\\n        address _tokenTo,\\r\\n        uint256 _dx,\\r\\n        uint256 _minDy,\\r\\n        address _receiver,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8796707a5736c209980b09520f4c8008d2fe905054047dde5fee477da1148bb4\",\"license\":\"MIT\"},\"contracts/interface/IPairFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IPairFactory {\\n    function allPairsLength() external view returns (uint256);\\n\\n    function isPair(address _pair) external view returns (bool);\\n\\n    function manager() external view returns (address);\\n\\n    function getPairAddress(address[] memory _tokens, uint8 _type) external view returns (address);\\n\\n    function pairTypeValues() external view returns (address[] memory);\\n\\n    function atPairType(uint256 _index) external view returns (address);\\n\\n    function createPair(address[] memory _tokens, uint8 _pairType, bytes memory _data) external returns (address _pair);\\n}\\n\",\"keccak256\":\"0x475b64a893424766e3e54d1fb938a12d63403e6d597939dbc830a97dd49936b3\",\"license\":\"MIT\"},\"contracts/interface/IPairRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPairRouter {\\n    /**\\n     * @dev Struct representing a route between two tokens through a pair contract\\n     */\\n    struct Route {\\n        address from; // Address of the token to swap from\\n        address to; // Address of the token to swap to\\n        address pair; // Address of the pair contract to use for the swap\\n    }\\n\\n    function PAIR_TYPE() external view returns (uint8);\\n\\n    function quoteAddLiquidity(\\n        address[] calldata _tokens,\\n        uint256[] calldata _amountDesireds\\n    ) external view returns (uint256[] memory _amountIn, uint256 _liquidity);\\n\\n    function quoteRemoveLiquidity(\\n        address[] calldata _tokens,\\n        uint256 _liquidity\\n    ) external view returns (uint256[] memory _amounts);\\n\\n    function addLiquidity(\\n        address[] memory _tokens,\\n        uint256[] memory _amountDesireds,\\n        uint256[] memory _amountsMin,\\n        uint256 _minLiquidity,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory _amounts, uint256 _liquidity);\\n\\n    function addLiquidityETH(\\n        address[] memory _tokens,\\n        uint256[] memory _amountDesireds,\\n        uint256[] memory _amountMins,\\n        uint256 _minLiquidity,\\n        address _to,\\n        uint256 _deadline\\n    ) external payable returns (uint256[] memory _amounts, uint256 _liquidity);\\n\\n    function removeLiquidity(\\n        address[] memory _tokens,\\n        uint256 _liquidity,\\n        uint256[] memory _amountsMin,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory _amounts);\\n\\n    function removeLiquidityETH(\\n        address[] memory _tokens,\\n        uint256 _liquidity,\\n        uint256[] memory _amountsMin,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory _returns);\\n\\n    function removeLiquidityWithPermit(\\n        address[] memory _tokens,\\n        uint256 _liquidity,\\n        uint256[] memory _amountMin,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256[] memory _amounts);\\n\\n    function removeLiquidityETHWithPermit(\\n        address[] memory _tokens,\\n        uint256 _liquidity,\\n        uint256[] memory _amountsMin,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256[] memory);\\n\\n    function swap(\\n        Route memory _route,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _to,\\n        uint256 _deadline\\n    ) external payable returns (uint256 _amountOut);\\n}\\n\\ninterface IVolatileRouter is IPairRouter {\\n    function getReserves(\\n        address _pair,\\n        address[] calldata _tokens\\n    ) external view returns (uint256 _reserveA, uint256 _reserveB);\\n}\\n\\ninterface IStablPairRouter is IPairRouter {\\n    function quoteRemoveLiquidityOneToken(\\n        address[] calldata _tokens,\\n        address _token,\\n        uint256 _liquidity\\n    ) external view returns (uint256 _amount);\\n\\n    function quoteRemoveLiquidityImbalance(\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256 _liquidity);\\n\\n    function removeLiquidityOneToken(\\n        address[] memory _tokens,\\n        uint256 _liquidity,\\n        address _token,\\n        uint256 _minAmount,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 _tokenAmount);\\n\\n    function removeLiquidityOneTokenETH(\\n        address[] memory _tokens,\\n        uint256 _liquidity,\\n        address _token,\\n        uint256 _minAmount,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 _tokenAmount);\\n\\n    function removeLiquidityImbalance(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        uint256 _maxBurnAmount,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 _amount);\\n\\n    function removeLiquidityImbalanceETH(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        uint256 _maxBurnAmount,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 _amount);\\n\\n    function removeLiquidityOneTokenWithPermit(\\n        address[] memory _tokens,\\n        uint256 _liquidity,\\n        address _token,\\n        uint256 _minAmount,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256 _tokenAmount);\\n\\n    function removeLiquidityOneTokenETHWithPermit(\\n        address[] memory _tokens,\\n        uint256 _liquidity,\\n        address _token,\\n        uint256 _minAmount,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256 _tokenAmount);\\n\\n    function removeLiquidityImbalanceWithPermit(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        uint256 _maxBurnAmount,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256 _actualBurnAmount);\\n\\n    function removeLiquidityImbalanceETHWithPermit(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        uint256 _maxBurnAmount,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256 _actualBurnAmount);\\n}\\n\",\"keccak256\":\"0x056e495a19b2f62e2ea32c8681ef3a99a38b2b56438b82b6130ee1b872df0875\",\"license\":\"MIT\"},\"contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/// @title Interface for WETH9\\ninterface IWETH {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf5ebf9a6820f7431f92b97c9b2707ecba3e575b037a8b0ba1f8cbe5aa15e1d90\",\"license\":\"MIT\"},\"contracts/utils/TransferHelper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Library for safely executing transfers and approvals of ERC20 tokens and ETH.\\r\\n */\\r\\nlibrary TransferHelper {\\r\\n    /**\\r\\n     * @dev Safely approves `value` tokens for `to` by calling the `approve` function on `token`.\\r\\n     * @param token The address of the ERC20 token.\\r\\n     * @param to The address to approve tokens for.\\r\\n     * @param value The number of tokens to approve.\\r\\n     */\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `value` tokens to `to` by calling the `transfer` function on `token`.\\r\\n     * @param token The address of the ERC20 token.\\r\\n     * @param to The address to transfer tokens to.\\r\\n     * @param value The number of tokens to transfer.\\r\\n     */\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `value` tokens from `from` to `to` by calling the `transferFrom` function on `token`.\\r\\n     * @param token The address of the ERC20 token.\\r\\n     * @param from The address to transfer tokens from.\\r\\n     * @param to The address to transfer tokens to.\\r\\n     * @param value The number of tokens to transfer.\\r\\n     */\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `value` ETH to `to`.\\r\\n     * @param to The address to transfer ETH to.\\r\\n     * @param value The amount of ETH to transfer.\\r\\n     */\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\r\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf0ba8a7a5949d2719eaa9b2781021688825e7457e3e24bc6f9ee2e54f03f6393\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200355938038062003559833981016040819052620000349162000144565b62000040828262000048565b5050620001e9565b600054610100900460ff16806200006457506200006462000120565b8062000073575060005460ff16155b6200009b5760405162461bcd60e51b8152600401620000929062000182565b60405180910390fd5b600054610100900460ff16158015620000c7576000805460ff1961ff0019909116610100171660011790555b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b03191691841691909117905580156200011b576000805461ff00191690555b505050565b600062000138306200013e60201b620019ff1760201c565b15905090565b3b151590565b6000806040838503121562000157578182fd5b82516200016481620001d0565b60208401519092506200017781620001d0565b809150509250929050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6001600160a01b0381168114620001e657600080fd5b50565b61336080620001f96000396000f3fe6080604052600436106101c65760003560e01c806366282419116100f7578063bcec50a511610095578063e1c9664711610064578063e1c9664714610530578063f064343014610550578063f2898b1c14610570578063faf4bf8514610590576101e1565b8063bcec50a5146104bb578063bd4c9463146104db578063bf51c272146104fb578063c45a01551461051b576101e1565b806378f9a600116100d157806378f9a6001461043b5780639796b2c71461045b5780639f1e9fc51461047b578063ab71033d1461049b576101e1565b806366282419146103e857806366e56f6d146103fb578063738abdf41461041b576101e1565b80633e73064e11610164578063407a4b081161013e578063407a4b081461035a57806341048e9214610388578063485cc955146103a85780634baeb500146103c8576101e1565b80633e73064e146102f75780633fc8cef314610317578063401a77e214610339576101e1565b806321822df9116101a057806321822df914610269578063237c65f9146102895780633a519141146102b75780633bf9e788146102d7576101e1565b806305373e55146101e65780631420ad071461021c57806315351d5314610249576101e1565b366101e1576001546001600160a01b031633146101df57fe5b005b600080fd5b3480156101f257600080fd5b506102066102013660046128a7565b6105b0565b6040516102139190612e97565b60405180910390f35b34801561022857600080fd5b5061023c610237366004612470565b61068d565b6040516102139190613201565b34801561025557600080fd5b5061023c6102643660046127df565b610761565b34801561027557600080fd5b50610206610284366004612940565b610861565b34801561029557600080fd5b506102a96102a436600461218f565b6108dd565b604051610213929190612b24565b3480156102c357600080fd5b5061023c6102d23660046123f1565b6109f6565b3480156102e357600080fd5b5061023c6102f2366004612470565b610a94565b34801561030357600080fd5b506101df6103123660046120e5565b610af4565b34801561032357600080fd5b5061032c610c89565b6040516102139190612ac8565b61034c610347366004612582565b610c98565b604051610213929190612eaa565b34801561036657600080fd5b5061037a610375366004612155565b610d74565b60405161021392919061320a565b34801561039457600080fd5b506102066103a3366004612940565b610f43565b3480156103b457600080fd5b506101df6103c336600461211d565b610fac565b3480156103d457600080fd5b506102066103e33660046122e5565b611072565b61023c6103f63660046121d3565b611085565b34801561040757600080fd5b5061023c6104163660046122e5565b611465565b34801561042757600080fd5b5061034c610436366004612510565b6114b9565b34801561044757600080fd5b5061034c610456366004612582565b611520565b34801561046757600080fd5b5061023c610476366004612640565b611584565b34801561048757600080fd5b5061032c61049636600461234c565b6115ea565b3480156104a757600080fd5b5061023c6104b6366004612640565b611608565b3480156104c757600080fd5b5061023c6104d6366004612765565b61166e565b3480156104e757600080fd5b506102066104f63660046128a7565b6116ce565b34801561050757600080fd5b5061023c6105163660046121d3565b61172f565b34801561052757600080fd5b5061032c61187b565b34801561053c57600080fd5b5061023c61054b366004612765565b611890565b34801561055c57600080fd5b5061020661056b36600461270f565b6118f0565b34801561057c57600080fd5b5061023c61058b366004612384565b611953565b34801561059c57600080fd5b5061023c6105ab3660046127df565b611999565b60ff861660009081526002602052604090205460609087906001600160a01b03166105f65760405162461bcd60e51b81526004016105ed90612f4b565b60405180910390fd5b61066e63064c887460e01b888888888860405160240161061a959493929190612ddf565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260ff8c1660009081526002909352909120546001600160a01b031690611a05565b806020019051810190610681919061223b565b98975050505050505050565b60ff871660009081526002602052604081205488906001600160a01b03166106c75760405162461bcd60e51b81526004016105ed90612f4b565b610741632bd8281b60e01b8989898989896040516024016106ed96959493929190612ba1565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260ff8d1660009081526002909352909120546001600160a01b031690611a05565b80602001905181019061075491906122cd565b9998505050505050505050565b60ff8b166000908152600260205260408120546001600160a01b03166107995760405162461bcd60e51b81526004016105ed90612f4b565b61083e63577fe41860e01b8c8c8c8c8c8c8c8c8c8c6040516024016107c79a99989796959493929190612d76565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600260008f60ff1660ff16815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b0316611a0590919063ffffffff16565b80602001905181019061085191906122cd565b9c9b505050505050505050505050565b60ff8a166000908152600260205260409020546060908b906001600160a01b031661089e5760405162461bcd60e51b81526004016105ed90612f4b565b6108ca63cb4c6dea60e01b8c8c8c8c8c8c8c8c8c6040516024016107c799989796959493929190612e28565b806020019051810190610851919061223b565b60008054604051637ec6b1e160e11b815282916201000090046001600160a01b03169063fd8d63c2906109169087908790600401612ceb565b60206040518083038186803b15801561092e57600080fd5b505afa158015610942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109669190612101565b60005460405163e5e31b1360e01b81529193506201000090046001600160a01b03169063e5e31b139061099d908590600401612ac8565b60206040518083038186803b1580156109b557600080fd5b505afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed91906122b1565b90509250929050565b60ff85166000908152600260205260408082205490516001600160a01b0390911690606090610a7e9063048241a960e31b90610a3c908a908a908a908a90602401612b6f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b03841690611a2a565b90508080602001905181019061068191906122cd565b60ff871660009081526002602052604081205488906001600160a01b0316610ace5760405162461bcd60e51b81526004016105ed90612f4b565b610741636fa99f3d60e01b8989898989896040516024016106ed96959493929190612ba1565b600060029054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a9190612101565b6001600160a01b0316336001600160a01b031614610baa5760405162461bcd60e51b81526004016105ed90612ef0565b6000816001600160a01b031663508d1e6b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190612368565b60ff81166000908152600260205260409081902080546001600160a01b0319166001600160a01b038616179055519091507fa96932fdd7d627843f64506b722b21f0611a80e606fe738f2800519566ebd9bd90610c7d9083908590613218565b60405180910390a15050565b6001546001600160a01b031690565b60ff87166000908152600260205260408120546060919089906001600160a01b0316610cd65760405162461bcd60e51b81526004016105ed90612f4b565b610d50634011b1f860e01b8a8a8a8a8a8a604051602401610cfc96959493929190612c1d565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260ff8e1660009081526002909352909120546001600160a01b031690611a05565b806020019051810190610d63919061226d565b909b909a5098505050505050505050565b60008054604051637ec6b1e160e11b815282918291620100009091046001600160a01b03169063fd8d63c290610db1908790600190600401612ceb565b60206040518083038186803b158015610dc957600080fd5b505afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190612101565b60005460405163e5e31b1360e01b81529192506201000090046001600160a01b03169063e5e31b1390610e38908490600401612ac8565b60206040518083038186803b158015610e5057600080fd5b505afa158015610e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8891906122b1565b15610f3d57600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0546040516313afa9cb60e11b81526001600160a01b039091169063275f539690610ee89084908890600401612b00565b604080518083038186803b158015610eff57600080fd5b505afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190612329565b90935091505b50915091565b60ff8a166000908152600260205260409020546060908b906001600160a01b0316610f805760405162461bcd60e51b81526004016105ed90612f4b565b6108ca63ce2da95560e01b8c8c8c8c8c8c8c8c8c6040516024016107c799989796959493929190612e28565b600054610100900460ff1680610fc55750610fc5611a4f565b80610fd3575060005460ff16155b610fef5760405162461bcd60e51b81526004016105ed90612fcd565b600054610100900460ff1615801561101a576000805460ff1961ff0019909116610100171660011790555b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b031916918416919091179055801561106d576000805461ff00191690555b505050565b606061107e8383611a60565b9392505050565b600060606110938688611a60565b905084816001835103815181106110a657fe5b602002602001015110156110cc5760405162461bcd60e51b81526004016105ed906130a4565b60015487516001600160a01b039091169088906000906110e857fe5b6020026020010151600001516001600160a01b03161415611190578534146111225760405162461bcd60e51b81526004016105ed90612f82565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561117257600080fd5b505af1158015611186573d6000803e3d6000fd5b50505050506111e6565b34156111ae5760405162461bcd60e51b81526004016105ed9061301b565b6111e63330888a6000815181106111c157fe5b6020026020010151600001516001600160a01b0316611bd0909392919063ffffffff16565b60005b875181101561138c57600088828151811061120057fe5b6020026020010151604001516001600160a01b031663508d1e6b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561124457600080fd5b505afa158015611258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127c9190612368565b8951909150309060001901831480156112c557506001548a516001600160a01b03909116908b90859081106112ad57fe5b6020026020010151602001516001600160a01b031614155b156112cd5750855b611381630d005d1e60e01b8b85815181106112e457fe5b60200260200101518686815181106112f857fe5b602002602001015187876001018151811061130f57fe5b6020026020010151858b60405160240161132d9594939291906131b1565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260ff861660009081526002909352909120546001600160a01b031690611a05565b5050506001016111e9565b508060018251038151811061139d57fe5b602090810291909101015160015488519193506001600160a01b031690889060001981019081106113ca57fe5b6020026020010151602001516001600160a01b0316141561145b57600154604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90611415908590600401613201565b600060405180830381600087803b15801561142f57600080fd5b505af1158015611443573d6000803e3d6000fd5b5061145b925050506001600160a01b03851683611cc1565b5095945050505050565b60006001825110156114895760405162461bcd60e51b81526004016105ed90612f1d565b60606114958484611a60565b9050806001825103815181106114a757fe5b60200260200101519150505b92915050565b60ff8316600090815260026020526040808220549051606092916001600160a01b03169083906114fc906327954bfd60e11b90610a3c9089908990602401612bef565b905080806020019051810190611512919061226d565b909890975095505050505050565b60ff87166000908152600260205260408120546060919089906001600160a01b031661155e5760405162461bcd60e51b81526004016105ed90612f4b565b610d5063601e0ae860e01b8a8a8a8a8a8a604051602401610cfc96959493929190612c1d565b60ff8a166000908152600260205260408120548b906001600160a01b03166115be5760405162461bcd60e51b81526004016105ed90612f4b565b61083e638935322960e01b8c8c8c8c8c8c8c8c8c6040516024016107c799989796959493929190612c7e565b60ff166000908152600260205260409020546001600160a01b031690565b60ff8a166000908152600260205260408120548b906001600160a01b03166116425760405162461bcd60e51b81526004016105ed90612f4b565b61083e63740e383060e01b8c8c8c8c8c8c8c8c8c6040516024016107c799989796959493929190612c7e565b60ff871660009081526002602052604081205488906001600160a01b03166116a85760405162461bcd60e51b81526004016105ed90612f4b565b6107416329c1331b60e01b8989898989896040516024016106ed96959493929190612d32565b60ff861660009081526002602052604090205460609087906001600160a01b031661170b5760405162461bcd60e51b81526004016105ed90612f4b565b61066e6382b22fad60e01b888888888860405160240161061a959493929190612ddf565b6000606061173d8688611a60565b9050848160018351038151811061175057fe5b602002602001015110156117765760405162461bcd60e51b81526004016105ed906130a4565b6117893330888a6000815181106111c157fe5b60005b87518110156118565760008882815181106117a357fe5b6020026020010151604001516001600160a01b031663508d1e6b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e757600080fd5b505afa1580156117fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181f9190612368565b89519091503090600019018314156118345750855b61184b630d005d1e60e01b8b85815181106112e457fe5b50505060010161178c565b508060018251038151811061186757fe5b602002602001015191505095945050505050565b6000546201000090046001600160a01b031681565b60ff871660009081526002602052604081205488906001600160a01b03166118ca5760405162461bcd60e51b81526004016105ed90612f4b565b61074163f792351660e01b8989898989896040516024016106ed96959493929190612d32565b60ff8316600090815260026020526040908190205490516060916001600160a01b031690829061193390630596cda360e21b90610a3c9088908890602401612d10565b905080806020019051810190611949919061223b565b9695505050505050565b60ff85166000908152600260205260408082205490516001600160a01b0390911690606090610a7e90631bc0504760e21b90610a3c908a908a908a908a90602401612b3f565b60ff8b166000908152600260205260408120546001600160a01b03166119d15760405162461bcd60e51b81526004016105ed90612f4b565b61083e63a3df3dc960e01b8c8c8c8c8c8c8c8c8c8c6040516024016107c79a99989796959493929190612d76565b3b151590565b606061107e838360405180606001604052806027815260200161330460279139611d4e565b606061107e83836040518060600160405280602581526020016132df60259139611de1565b6000611a5a306119ff565b15905090565b606081516001016001600160401b0381118015611a7c57600080fd5b50604051908082528060200260200182016040528015611aa6578160200160208202803683370190505b5090508281600081518110611ab757fe5b60200260200101818152505060005b8251811015611bc957828181518110611adb57fe5b6020026020010151604001516001600160a01b0316634aa06652848381518110611b0157fe5b602002602001015160000151858481518110611b1957fe5b602002602001015160200151858581518110611b3157fe5b60200260200101516040518463ffffffff1660e01b8152600401611b5793929190612adc565b60206040518083038186803b158015611b6f57600080fd5b505afa158015611b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba791906122cd565b828260010181518110611bb657fe5b6020908102919091010152600101611ac6565b5092915050565b60006060856001600160a01b03166323b872dd868686604051602401611bf893929190612adc565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611c319190612aac565b6000604051808303816000865af19150503d8060008114611c6e576040519150601f19603f3d011682016040523d82523d6000602084013e611c73565b606091505b5091509150818015611c9d575080511580611c9d575080806020019051810190611c9d91906122b1565b611cb95760405162461bcd60e51b81526004016105ed9061316d565b505050505050565b604080516000808252602082019092526001600160a01b038416908390604051611ceb9190612aac565b60006040518083038185875af1925050503d8060008114611d28576040519150601f19603f3d011682016040523d82523d6000602084013e611d2d565b606091505b505090508061106d5760405162461bcd60e51b81526004016105ed9061312a565b6060611d59846119ff565b611d755760405162461bcd60e51b81526004016105ed9061305e565b60006060856001600160a01b031685604051611d919190612aac565b600060405180830381855af49150503d8060008114611dcc576040519150601f19603f3d011682016040523d82523d6000602084013e611dd1565b606091505b5091509150611949828286611e5f565b6060611dec846119ff565b611e085760405162461bcd60e51b81526004016105ed906130e6565b60006060856001600160a01b031685604051611e249190612aac565b600060405180830381855afa9150503d8060008114611dcc576040519150601f19603f3d011682016040523d82523d6000602084013e611dd1565b60608315611e6e57508161107e565b825115611e7e5782518084602001fd5b8160405162461bcd60e51b81526004016105ed9190612ebd565b80356114b3816132a9565b60008083601f840112611eb4578182fd5b5081356001600160401b03811115611eca578182fd5b6020830191508360208083028501011115611ee457600080fd5b9250929050565b600082601f830112611efb578081fd5b8135611f0e611f098261325a565b613234565b818152915060208083019084810181840286018201871015611f2f57600080fd5b60005b84811015611f57578135611f45816132a9565b84529282019290820190600101611f32565b505050505092915050565b600082601f830112611f72578081fd5b8135611f80611f098261325a565b8181529150602080830190848101606080850287018301881015611fa357600080fd5b6000805b868110156120065782848b031215611fbd578182fd5b611fc683613234565b611fd08b86611e98565b8152611fde8b878701611e98565b868201526040611ff08c828801611e98565b9082015286529484019492820192600101611fa7565b5050505050505092915050565b600082601f830112612023578081fd5b8135612031611f098261325a565b81815291506020808301908481018184028601820187101561205257600080fd5b60005b84811015611f5757813584529282019290820190600101612055565b600082601f830112612081578081fd5b815161208f611f098261325a565b8181529150602080830190848101818402860182018710156120b057600080fd5b60005b84811015611f57578151845292820192908201906001016120b3565b80356114b3816132c1565b80356114b3816132cf565b6000602082840312156120f6578081fd5b813561107e816132a9565b600060208284031215612112578081fd5b815161107e816132a9565b6000806040838503121561212f578081fd5b823561213a816132a9565b9150602083013561214a816132a9565b809150509250929050565b600060208284031215612166578081fd5b81356001600160401b0381111561217b578182fd5b61218784828501611eeb565b949350505050565b600080604083850312156121a1578182fd5b82356001600160401b038111156121b6578283fd5b6121c285828601611eeb565b925050602083013561214a816132cf565b600080600080600060a086880312156121ea578081fd5b85356001600160401b038111156121ff578182fd5b61220b88828901611f62565b9550506020860135935060408601359250606086013561222a816132a9565b949793965091946080013592915050565b60006020828403121561224c578081fd5b81516001600160401b03811115612261578182fd5b61218784828501612071565b6000806040838503121561227f578081fd5b82516001600160401b03811115612294578182fd5b6122a085828601612071565b925050602083015190509250929050565b6000602082840312156122c2578081fd5b815161107e816132c1565b6000602082840312156122de578081fd5b5051919050565b600080604083850312156122f7578182fd5b8235915060208301356001600160401b03811115612313578182fd5b61231f85828601611f62565b9150509250929050565b6000806040838503121561233b578182fd5b505080516020909101519092909150565b60006020828403121561235d578081fd5b813561107e816132cf565b600060208284031215612379578081fd5b815161107e816132cf565b60008060008060006080868803121561239b578283fd5b85356123a6816132cf565b945060208601356001600160401b038111156123c0578384fd5b6123cc88828901611ea3565b90955093505060408601356123e0816132a9565b949793965091946060013592915050565b600080600080600060608688031215612408578283fd5b8535612413816132cf565b945060208601356001600160401b038082111561242e578485fd5b61243a89838a01611ea3565b90965094506040880135915080821115612452578283fd5b5061245f88828901611ea3565b969995985093965092949392505050565b600080600080600080600060c0888a03121561248a578485fd5b8735612495816132cf565b965060208801356001600160401b03808211156124b0578687fd5b6124bc8b838c01611eeb565b975060408a01359150808211156124d1578687fd5b506124de8a828b01611ea3565b9096509450506060880135925060808801356124f9816132a9565b8092505060a0880135905092959891949750929550565b600080600060608486031215612524578081fd5b833561252f816132cf565b925060208401356001600160401b038082111561254a578283fd5b61255687838801611eeb565b9350604086013591508082111561256b578283fd5b5061257886828701612013565b9150509250925092565b600080600080600080600060e0888a03121561259c578081fd5b87356125a7816132cf565b965060208801356001600160401b03808211156125c2578283fd5b6125ce8b838c01611eeb565b975060408a01359150808211156125e3578283fd5b6125ef8b838c01612013565b965060608a0135915080821115612604578283fd5b506126118a828b01612013565b9450506080880135925060a0880135612629816132a9565b8092505060c0880135905092959891949750929550565b6000806000806000806000806000806101408b8d03121561265f578384fd5b6126698c8c6120da565b995060208b01356001600160401b0380821115612684578586fd5b6126908e838f01611eeb565b9a5060408d01359150808211156126a5578586fd5b506126b28d828e01612013565b98505060608b013596506126c98c60808d01611e98565b955060a08b013594506126df8c60c08d016120cf565b93506126ee8c60e08d016120da565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600060608486031215612723578081fd5b833561272e816132cf565b925060208401356001600160401b03811115612748578182fd5b61275486828701611eeb565b925050604084013590509250925092565b600080600080600080600060e0888a03121561277f578081fd5b873561278a816132cf565b965060208801356001600160401b038111156127a4578182fd5b6127b08a828b01611eeb565b9650506040880135945060608801356127c8816132a9565b93506080880135925060a0880135612629816132a9565b60008060008060008060008060008060006101608c8e031215612800578485fd5b8b3561280b816132cf565b9a5060208c01356001600160401b03811115612825578586fd5b6128318e828f01611eeb565b9a505060408c0135985060608c0135612849816132a9565b975060808c0135965061285f8d60a08e01611e98565b955060c08c013594506128758d60e08e016120cf565b93506128858d6101008e016120da565b92506101208c013591506101408c013590509295989b509295989b9093969950565b60008060008060008060c087890312156128bf578384fd5b86356128ca816132cf565b955060208701356001600160401b03808211156128e5578586fd5b6128f18a838b01611eeb565b965060408901359550606089013591508082111561290d578384fd5b5061291a89828a01612013565b935050608087013561292b816132a9565b8092505060a087013590509295509295509295565b6000806000806000806000806000806101408b8d03121561295f578384fd5b6129698c8c6120da565b995060208b01356001600160401b0380821115612984578586fd5b6129908e838f01611eeb565b9a5060408d0135995060608d01359150808211156129ac578586fd5b506129b98d828e01612013565b9750506126c98c60808d01611e98565b60008284526020808501945082825b85811015612a065781356129eb816132a9565b6001600160a01b0316875295820195908201906001016129d8565b509495945050505050565b6000815180845260208085019450808401835b83811015612a065781516001600160a01b031687529582019590820190600101612a24565b81835260006001600160fb1b03831115612a61578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015612a0657815187529582019590820190600101612a90565b60008251612abe818460208701613279565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038316815260406020820181905260009061218790830184612a11565b6001600160a01b039290921682521515602082015260400190565b600060608252612b536060830186886129c9565b6001600160a01b03949094166020830152506040015292915050565b600060408252612b836040830186886129c9565b8281036020840152612b96818587612a49565b979650505050505050565b600060a08252612bb460a0830189612a11565b8281036020840152612bc781888a612a49565b604084019690965250506001600160a01b039290921660608301526080909101529392505050565b600060408252612c026040830185612a11565b8281036020840152612c148185612a7d565b95945050505050565b600060c08252612c3060c0830189612a11565b8281036020840152612c428189612a7d565b90508281036040840152612c568188612a7d565b606084019690965250506001600160a01b0392909216608083015260a0909101529392505050565b6000610120808352612c928184018d612a11565b90508281036020840152612ca6818c612a7d565b604084019a909a5250506001600160a01b03969096166060870152608086019490945291151560a085015260ff1660c084015260e08301526101009091015292915050565b600060408252612cfe6040830185612a11565b905060ff831660208301529392505050565b600060408252612d236040830185612a11565b90508260208301529392505050565b600060c08252612d4560c0830189612a11565b6020830197909752506001600160a01b03948516604082015260608101939093529216608082015260a00152919050565b6000610140808352612d8a8184018e612a11565b602084019c909c5250506001600160a01b039889166040820152606081019790975294909616608086015260a0850192909252151560c084015260ff1660e08301526101008201929092526101200152919050565b600060a08252612df260a0830188612a11565b8660208401528281036040840152612e0a8187612a7d565b6001600160a01b039590951660608401525050608001529392505050565b6000610120808352612e3c8184018d612a11565b90508a60208401528281036040840152612e56818b612a7d565b6001600160a01b039990991660608401525050608081019590955292151560a085015260ff9190911660c084015260e0830152610100909101529392505050565b60006020825261107e6020830184612a7d565b600060408252612d236040830185612a7d565b6000602082528251806020840152612edc816040850160208701613279565b601f01601f19169190910160400192915050565b6020808252601390820152722937baba32b91d103737ba1036b0b730b3b2b960691b604082015260600190565b6020808252601490820152730a4deeae8cae47440929cac82989288bea082a8960631b604082015260600190565b60208082526019908201527f526f757465723a20696e76616c69642070616972207479706500000000000000604082015260600190565b6020808252602b908201527f526f757465723a206d73672e76616c7565206973206e6f7420657175616c207460408201526a37902fb0b6b7bab73a24b760a91b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526023908201527f526f757465723a206d73672e76616c7565206973206e6f7420657175616c207460408201526206f20360ec1b606082015260800190565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f55604082015261139560f21b606082015260800190565b60208082526024908201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e746040820152631c9858dd60e21b606082015260800190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201526213115160ea1b606082015260800190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b85516001600160a01b0390811682526020808801518216908301526040968701518116968201969096526060810194909452608084019290925290921660a082015260c081019190915260e00190565b90815260200190565b918252602082015260400190565b60ff9290921682526001600160a01b0316602082015260400190565b6040518181016001600160401b038111828210171561325257600080fd5b604052919050565b60006001600160401b0382111561326f578081fd5b5060209081020190565b60005b8381101561329457818101518382015260200161327c565b838111156132a3576000848401525b50505050565b6001600160a01b03811681146132be57600080fd5b50565b80151581146132be57600080fd5b60ff811681146132be57600080fdfe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208d6fe14a0bc53e071d25ec601130a4ce3cf0b94686909e36737d322306bce66564736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c806366282419116100f7578063bcec50a511610095578063e1c9664711610064578063e1c9664714610530578063f064343014610550578063f2898b1c14610570578063faf4bf8514610590576101e1565b8063bcec50a5146104bb578063bd4c9463146104db578063bf51c272146104fb578063c45a01551461051b576101e1565b806378f9a600116100d157806378f9a6001461043b5780639796b2c71461045b5780639f1e9fc51461047b578063ab71033d1461049b576101e1565b806366282419146103e857806366e56f6d146103fb578063738abdf41461041b576101e1565b80633e73064e11610164578063407a4b081161013e578063407a4b081461035a57806341048e9214610388578063485cc955146103a85780634baeb500146103c8576101e1565b80633e73064e146102f75780633fc8cef314610317578063401a77e214610339576101e1565b806321822df9116101a057806321822df914610269578063237c65f9146102895780633a519141146102b75780633bf9e788146102d7576101e1565b806305373e55146101e65780631420ad071461021c57806315351d5314610249576101e1565b366101e1576001546001600160a01b031633146101df57fe5b005b600080fd5b3480156101f257600080fd5b506102066102013660046128a7565b6105b0565b6040516102139190612e97565b60405180910390f35b34801561022857600080fd5b5061023c610237366004612470565b61068d565b6040516102139190613201565b34801561025557600080fd5b5061023c6102643660046127df565b610761565b34801561027557600080fd5b50610206610284366004612940565b610861565b34801561029557600080fd5b506102a96102a436600461218f565b6108dd565b604051610213929190612b24565b3480156102c357600080fd5b5061023c6102d23660046123f1565b6109f6565b3480156102e357600080fd5b5061023c6102f2366004612470565b610a94565b34801561030357600080fd5b506101df6103123660046120e5565b610af4565b34801561032357600080fd5b5061032c610c89565b6040516102139190612ac8565b61034c610347366004612582565b610c98565b604051610213929190612eaa565b34801561036657600080fd5b5061037a610375366004612155565b610d74565b60405161021392919061320a565b34801561039457600080fd5b506102066103a3366004612940565b610f43565b3480156103b457600080fd5b506101df6103c336600461211d565b610fac565b3480156103d457600080fd5b506102066103e33660046122e5565b611072565b61023c6103f63660046121d3565b611085565b34801561040757600080fd5b5061023c6104163660046122e5565b611465565b34801561042757600080fd5b5061034c610436366004612510565b6114b9565b34801561044757600080fd5b5061034c610456366004612582565b611520565b34801561046757600080fd5b5061023c610476366004612640565b611584565b34801561048757600080fd5b5061032c61049636600461234c565b6115ea565b3480156104a757600080fd5b5061023c6104b6366004612640565b611608565b3480156104c757600080fd5b5061023c6104d6366004612765565b61166e565b3480156104e757600080fd5b506102066104f63660046128a7565b6116ce565b34801561050757600080fd5b5061023c6105163660046121d3565b61172f565b34801561052757600080fd5b5061032c61187b565b34801561053c57600080fd5b5061023c61054b366004612765565b611890565b34801561055c57600080fd5b5061020661056b36600461270f565b6118f0565b34801561057c57600080fd5b5061023c61058b366004612384565b611953565b34801561059c57600080fd5b5061023c6105ab3660046127df565b611999565b60ff861660009081526002602052604090205460609087906001600160a01b03166105f65760405162461bcd60e51b81526004016105ed90612f4b565b60405180910390fd5b61066e63064c887460e01b888888888860405160240161061a959493929190612ddf565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260ff8c1660009081526002909352909120546001600160a01b031690611a05565b806020019051810190610681919061223b565b98975050505050505050565b60ff871660009081526002602052604081205488906001600160a01b03166106c75760405162461bcd60e51b81526004016105ed90612f4b565b610741632bd8281b60e01b8989898989896040516024016106ed96959493929190612ba1565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260ff8d1660009081526002909352909120546001600160a01b031690611a05565b80602001905181019061075491906122cd565b9998505050505050505050565b60ff8b166000908152600260205260408120546001600160a01b03166107995760405162461bcd60e51b81526004016105ed90612f4b565b61083e63577fe41860e01b8c8c8c8c8c8c8c8c8c8c6040516024016107c79a99989796959493929190612d76565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600260008f60ff1660ff16815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b0316611a0590919063ffffffff16565b80602001905181019061085191906122cd565b9c9b505050505050505050505050565b60ff8a166000908152600260205260409020546060908b906001600160a01b031661089e5760405162461bcd60e51b81526004016105ed90612f4b565b6108ca63cb4c6dea60e01b8c8c8c8c8c8c8c8c8c6040516024016107c799989796959493929190612e28565b806020019051810190610851919061223b565b60008054604051637ec6b1e160e11b815282916201000090046001600160a01b03169063fd8d63c2906109169087908790600401612ceb565b60206040518083038186803b15801561092e57600080fd5b505afa158015610942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109669190612101565b60005460405163e5e31b1360e01b81529193506201000090046001600160a01b03169063e5e31b139061099d908590600401612ac8565b60206040518083038186803b1580156109b557600080fd5b505afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed91906122b1565b90509250929050565b60ff85166000908152600260205260408082205490516001600160a01b0390911690606090610a7e9063048241a960e31b90610a3c908a908a908a908a90602401612b6f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b03841690611a2a565b90508080602001905181019061068191906122cd565b60ff871660009081526002602052604081205488906001600160a01b0316610ace5760405162461bcd60e51b81526004016105ed90612f4b565b610741636fa99f3d60e01b8989898989896040516024016106ed96959493929190612ba1565b600060029054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a9190612101565b6001600160a01b0316336001600160a01b031614610baa5760405162461bcd60e51b81526004016105ed90612ef0565b6000816001600160a01b031663508d1e6b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190612368565b60ff81166000908152600260205260409081902080546001600160a01b0319166001600160a01b038616179055519091507fa96932fdd7d627843f64506b722b21f0611a80e606fe738f2800519566ebd9bd90610c7d9083908590613218565b60405180910390a15050565b6001546001600160a01b031690565b60ff87166000908152600260205260408120546060919089906001600160a01b0316610cd65760405162461bcd60e51b81526004016105ed90612f4b565b610d50634011b1f860e01b8a8a8a8a8a8a604051602401610cfc96959493929190612c1d565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260ff8e1660009081526002909352909120546001600160a01b031690611a05565b806020019051810190610d63919061226d565b909b909a5098505050505050505050565b60008054604051637ec6b1e160e11b815282918291620100009091046001600160a01b03169063fd8d63c290610db1908790600190600401612ceb565b60206040518083038186803b158015610dc957600080fd5b505afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190612101565b60005460405163e5e31b1360e01b81529192506201000090046001600160a01b03169063e5e31b1390610e38908490600401612ac8565b60206040518083038186803b158015610e5057600080fd5b505afa158015610e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8891906122b1565b15610f3d57600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0546040516313afa9cb60e11b81526001600160a01b039091169063275f539690610ee89084908890600401612b00565b604080518083038186803b158015610eff57600080fd5b505afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190612329565b90935091505b50915091565b60ff8a166000908152600260205260409020546060908b906001600160a01b0316610f805760405162461bcd60e51b81526004016105ed90612f4b565b6108ca63ce2da95560e01b8c8c8c8c8c8c8c8c8c6040516024016107c799989796959493929190612e28565b600054610100900460ff1680610fc55750610fc5611a4f565b80610fd3575060005460ff16155b610fef5760405162461bcd60e51b81526004016105ed90612fcd565b600054610100900460ff1615801561101a576000805460ff1961ff0019909116610100171660011790555b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b031916918416919091179055801561106d576000805461ff00191690555b505050565b606061107e8383611a60565b9392505050565b600060606110938688611a60565b905084816001835103815181106110a657fe5b602002602001015110156110cc5760405162461bcd60e51b81526004016105ed906130a4565b60015487516001600160a01b039091169088906000906110e857fe5b6020026020010151600001516001600160a01b03161415611190578534146111225760405162461bcd60e51b81526004016105ed90612f82565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561117257600080fd5b505af1158015611186573d6000803e3d6000fd5b50505050506111e6565b34156111ae5760405162461bcd60e51b81526004016105ed9061301b565b6111e63330888a6000815181106111c157fe5b6020026020010151600001516001600160a01b0316611bd0909392919063ffffffff16565b60005b875181101561138c57600088828151811061120057fe5b6020026020010151604001516001600160a01b031663508d1e6b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561124457600080fd5b505afa158015611258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127c9190612368565b8951909150309060001901831480156112c557506001548a516001600160a01b03909116908b90859081106112ad57fe5b6020026020010151602001516001600160a01b031614155b156112cd5750855b611381630d005d1e60e01b8b85815181106112e457fe5b60200260200101518686815181106112f857fe5b602002602001015187876001018151811061130f57fe5b6020026020010151858b60405160240161132d9594939291906131b1565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260ff861660009081526002909352909120546001600160a01b031690611a05565b5050506001016111e9565b508060018251038151811061139d57fe5b602090810291909101015160015488519193506001600160a01b031690889060001981019081106113ca57fe5b6020026020010151602001516001600160a01b0316141561145b57600154604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90611415908590600401613201565b600060405180830381600087803b15801561142f57600080fd5b505af1158015611443573d6000803e3d6000fd5b5061145b925050506001600160a01b03851683611cc1565b5095945050505050565b60006001825110156114895760405162461bcd60e51b81526004016105ed90612f1d565b60606114958484611a60565b9050806001825103815181106114a757fe5b60200260200101519150505b92915050565b60ff8316600090815260026020526040808220549051606092916001600160a01b03169083906114fc906327954bfd60e11b90610a3c9089908990602401612bef565b905080806020019051810190611512919061226d565b909890975095505050505050565b60ff87166000908152600260205260408120546060919089906001600160a01b031661155e5760405162461bcd60e51b81526004016105ed90612f4b565b610d5063601e0ae860e01b8a8a8a8a8a8a604051602401610cfc96959493929190612c1d565b60ff8a166000908152600260205260408120548b906001600160a01b03166115be5760405162461bcd60e51b81526004016105ed90612f4b565b61083e638935322960e01b8c8c8c8c8c8c8c8c8c6040516024016107c799989796959493929190612c7e565b60ff166000908152600260205260409020546001600160a01b031690565b60ff8a166000908152600260205260408120548b906001600160a01b03166116425760405162461bcd60e51b81526004016105ed90612f4b565b61083e63740e383060e01b8c8c8c8c8c8c8c8c8c6040516024016107c799989796959493929190612c7e565b60ff871660009081526002602052604081205488906001600160a01b03166116a85760405162461bcd60e51b81526004016105ed90612f4b565b6107416329c1331b60e01b8989898989896040516024016106ed96959493929190612d32565b60ff861660009081526002602052604090205460609087906001600160a01b031661170b5760405162461bcd60e51b81526004016105ed90612f4b565b61066e6382b22fad60e01b888888888860405160240161061a959493929190612ddf565b6000606061173d8688611a60565b9050848160018351038151811061175057fe5b602002602001015110156117765760405162461bcd60e51b81526004016105ed906130a4565b6117893330888a6000815181106111c157fe5b60005b87518110156118565760008882815181106117a357fe5b6020026020010151604001516001600160a01b031663508d1e6b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e757600080fd5b505afa1580156117fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181f9190612368565b89519091503090600019018314156118345750855b61184b630d005d1e60e01b8b85815181106112e457fe5b50505060010161178c565b508060018251038151811061186757fe5b602002602001015191505095945050505050565b6000546201000090046001600160a01b031681565b60ff871660009081526002602052604081205488906001600160a01b03166118ca5760405162461bcd60e51b81526004016105ed90612f4b565b61074163f792351660e01b8989898989896040516024016106ed96959493929190612d32565b60ff8316600090815260026020526040908190205490516060916001600160a01b031690829061193390630596cda360e21b90610a3c9088908890602401612d10565b905080806020019051810190611949919061223b565b9695505050505050565b60ff85166000908152600260205260408082205490516001600160a01b0390911690606090610a7e90631bc0504760e21b90610a3c908a908a908a908a90602401612b3f565b60ff8b166000908152600260205260408120546001600160a01b03166119d15760405162461bcd60e51b81526004016105ed90612f4b565b61083e63a3df3dc960e01b8c8c8c8c8c8c8c8c8c8c6040516024016107c79a99989796959493929190612d76565b3b151590565b606061107e838360405180606001604052806027815260200161330460279139611d4e565b606061107e83836040518060600160405280602581526020016132df60259139611de1565b6000611a5a306119ff565b15905090565b606081516001016001600160401b0381118015611a7c57600080fd5b50604051908082528060200260200182016040528015611aa6578160200160208202803683370190505b5090508281600081518110611ab757fe5b60200260200101818152505060005b8251811015611bc957828181518110611adb57fe5b6020026020010151604001516001600160a01b0316634aa06652848381518110611b0157fe5b602002602001015160000151858481518110611b1957fe5b602002602001015160200151858581518110611b3157fe5b60200260200101516040518463ffffffff1660e01b8152600401611b5793929190612adc565b60206040518083038186803b158015611b6f57600080fd5b505afa158015611b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba791906122cd565b828260010181518110611bb657fe5b6020908102919091010152600101611ac6565b5092915050565b60006060856001600160a01b03166323b872dd868686604051602401611bf893929190612adc565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611c319190612aac565b6000604051808303816000865af19150503d8060008114611c6e576040519150601f19603f3d011682016040523d82523d6000602084013e611c73565b606091505b5091509150818015611c9d575080511580611c9d575080806020019051810190611c9d91906122b1565b611cb95760405162461bcd60e51b81526004016105ed9061316d565b505050505050565b604080516000808252602082019092526001600160a01b038416908390604051611ceb9190612aac565b60006040518083038185875af1925050503d8060008114611d28576040519150601f19603f3d011682016040523d82523d6000602084013e611d2d565b606091505b505090508061106d5760405162461bcd60e51b81526004016105ed9061312a565b6060611d59846119ff565b611d755760405162461bcd60e51b81526004016105ed9061305e565b60006060856001600160a01b031685604051611d919190612aac565b600060405180830381855af49150503d8060008114611dcc576040519150601f19603f3d011682016040523d82523d6000602084013e611dd1565b606091505b5091509150611949828286611e5f565b6060611dec846119ff565b611e085760405162461bcd60e51b81526004016105ed906130e6565b60006060856001600160a01b031685604051611e249190612aac565b600060405180830381855afa9150503d8060008114611dcc576040519150601f19603f3d011682016040523d82523d6000602084013e611dd1565b60608315611e6e57508161107e565b825115611e7e5782518084602001fd5b8160405162461bcd60e51b81526004016105ed9190612ebd565b80356114b3816132a9565b60008083601f840112611eb4578182fd5b5081356001600160401b03811115611eca578182fd5b6020830191508360208083028501011115611ee457600080fd5b9250929050565b600082601f830112611efb578081fd5b8135611f0e611f098261325a565b613234565b818152915060208083019084810181840286018201871015611f2f57600080fd5b60005b84811015611f57578135611f45816132a9565b84529282019290820190600101611f32565b505050505092915050565b600082601f830112611f72578081fd5b8135611f80611f098261325a565b8181529150602080830190848101606080850287018301881015611fa357600080fd5b6000805b868110156120065782848b031215611fbd578182fd5b611fc683613234565b611fd08b86611e98565b8152611fde8b878701611e98565b868201526040611ff08c828801611e98565b9082015286529484019492820192600101611fa7565b5050505050505092915050565b600082601f830112612023578081fd5b8135612031611f098261325a565b81815291506020808301908481018184028601820187101561205257600080fd5b60005b84811015611f5757813584529282019290820190600101612055565b600082601f830112612081578081fd5b815161208f611f098261325a565b8181529150602080830190848101818402860182018710156120b057600080fd5b60005b84811015611f57578151845292820192908201906001016120b3565b80356114b3816132c1565b80356114b3816132cf565b6000602082840312156120f6578081fd5b813561107e816132a9565b600060208284031215612112578081fd5b815161107e816132a9565b6000806040838503121561212f578081fd5b823561213a816132a9565b9150602083013561214a816132a9565b809150509250929050565b600060208284031215612166578081fd5b81356001600160401b0381111561217b578182fd5b61218784828501611eeb565b949350505050565b600080604083850312156121a1578182fd5b82356001600160401b038111156121b6578283fd5b6121c285828601611eeb565b925050602083013561214a816132cf565b600080600080600060a086880312156121ea578081fd5b85356001600160401b038111156121ff578182fd5b61220b88828901611f62565b9550506020860135935060408601359250606086013561222a816132a9565b949793965091946080013592915050565b60006020828403121561224c578081fd5b81516001600160401b03811115612261578182fd5b61218784828501612071565b6000806040838503121561227f578081fd5b82516001600160401b03811115612294578182fd5b6122a085828601612071565b925050602083015190509250929050565b6000602082840312156122c2578081fd5b815161107e816132c1565b6000602082840312156122de578081fd5b5051919050565b600080604083850312156122f7578182fd5b8235915060208301356001600160401b03811115612313578182fd5b61231f85828601611f62565b9150509250929050565b6000806040838503121561233b578182fd5b505080516020909101519092909150565b60006020828403121561235d578081fd5b813561107e816132cf565b600060208284031215612379578081fd5b815161107e816132cf565b60008060008060006080868803121561239b578283fd5b85356123a6816132cf565b945060208601356001600160401b038111156123c0578384fd5b6123cc88828901611ea3565b90955093505060408601356123e0816132a9565b949793965091946060013592915050565b600080600080600060608688031215612408578283fd5b8535612413816132cf565b945060208601356001600160401b038082111561242e578485fd5b61243a89838a01611ea3565b90965094506040880135915080821115612452578283fd5b5061245f88828901611ea3565b969995985093965092949392505050565b600080600080600080600060c0888a03121561248a578485fd5b8735612495816132cf565b965060208801356001600160401b03808211156124b0578687fd5b6124bc8b838c01611eeb565b975060408a01359150808211156124d1578687fd5b506124de8a828b01611ea3565b9096509450506060880135925060808801356124f9816132a9565b8092505060a0880135905092959891949750929550565b600080600060608486031215612524578081fd5b833561252f816132cf565b925060208401356001600160401b038082111561254a578283fd5b61255687838801611eeb565b9350604086013591508082111561256b578283fd5b5061257886828701612013565b9150509250925092565b600080600080600080600060e0888a03121561259c578081fd5b87356125a7816132cf565b965060208801356001600160401b03808211156125c2578283fd5b6125ce8b838c01611eeb565b975060408a01359150808211156125e3578283fd5b6125ef8b838c01612013565b965060608a0135915080821115612604578283fd5b506126118a828b01612013565b9450506080880135925060a0880135612629816132a9565b8092505060c0880135905092959891949750929550565b6000806000806000806000806000806101408b8d03121561265f578384fd5b6126698c8c6120da565b995060208b01356001600160401b0380821115612684578586fd5b6126908e838f01611eeb565b9a5060408d01359150808211156126a5578586fd5b506126b28d828e01612013565b98505060608b013596506126c98c60808d01611e98565b955060a08b013594506126df8c60c08d016120cf565b93506126ee8c60e08d016120da565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600060608486031215612723578081fd5b833561272e816132cf565b925060208401356001600160401b03811115612748578182fd5b61275486828701611eeb565b925050604084013590509250925092565b600080600080600080600060e0888a03121561277f578081fd5b873561278a816132cf565b965060208801356001600160401b038111156127a4578182fd5b6127b08a828b01611eeb565b9650506040880135945060608801356127c8816132a9565b93506080880135925060a0880135612629816132a9565b60008060008060008060008060008060006101608c8e031215612800578485fd5b8b3561280b816132cf565b9a5060208c01356001600160401b03811115612825578586fd5b6128318e828f01611eeb565b9a505060408c0135985060608c0135612849816132a9565b975060808c0135965061285f8d60a08e01611e98565b955060c08c013594506128758d60e08e016120cf565b93506128858d6101008e016120da565b92506101208c013591506101408c013590509295989b509295989b9093969950565b60008060008060008060c087890312156128bf578384fd5b86356128ca816132cf565b955060208701356001600160401b03808211156128e5578586fd5b6128f18a838b01611eeb565b965060408901359550606089013591508082111561290d578384fd5b5061291a89828a01612013565b935050608087013561292b816132a9565b8092505060a087013590509295509295509295565b6000806000806000806000806000806101408b8d03121561295f578384fd5b6129698c8c6120da565b995060208b01356001600160401b0380821115612984578586fd5b6129908e838f01611eeb565b9a5060408d0135995060608d01359150808211156129ac578586fd5b506129b98d828e01612013565b9750506126c98c60808d01611e98565b60008284526020808501945082825b85811015612a065781356129eb816132a9565b6001600160a01b0316875295820195908201906001016129d8565b509495945050505050565b6000815180845260208085019450808401835b83811015612a065781516001600160a01b031687529582019590820190600101612a24565b81835260006001600160fb1b03831115612a61578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015612a0657815187529582019590820190600101612a90565b60008251612abe818460208701613279565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038316815260406020820181905260009061218790830184612a11565b6001600160a01b039290921682521515602082015260400190565b600060608252612b536060830186886129c9565b6001600160a01b03949094166020830152506040015292915050565b600060408252612b836040830186886129c9565b8281036020840152612b96818587612a49565b979650505050505050565b600060a08252612bb460a0830189612a11565b8281036020840152612bc781888a612a49565b604084019690965250506001600160a01b039290921660608301526080909101529392505050565b600060408252612c026040830185612a11565b8281036020840152612c148185612a7d565b95945050505050565b600060c08252612c3060c0830189612a11565b8281036020840152612c428189612a7d565b90508281036040840152612c568188612a7d565b606084019690965250506001600160a01b0392909216608083015260a0909101529392505050565b6000610120808352612c928184018d612a11565b90508281036020840152612ca6818c612a7d565b604084019a909a5250506001600160a01b03969096166060870152608086019490945291151560a085015260ff1660c084015260e08301526101009091015292915050565b600060408252612cfe6040830185612a11565b905060ff831660208301529392505050565b600060408252612d236040830185612a11565b90508260208301529392505050565b600060c08252612d4560c0830189612a11565b6020830197909752506001600160a01b03948516604082015260608101939093529216608082015260a00152919050565b6000610140808352612d8a8184018e612a11565b602084019c909c5250506001600160a01b039889166040820152606081019790975294909616608086015260a0850192909252151560c084015260ff1660e08301526101008201929092526101200152919050565b600060a08252612df260a0830188612a11565b8660208401528281036040840152612e0a8187612a7d565b6001600160a01b039590951660608401525050608001529392505050565b6000610120808352612e3c8184018d612a11565b90508a60208401528281036040840152612e56818b612a7d565b6001600160a01b039990991660608401525050608081019590955292151560a085015260ff9190911660c084015260e0830152610100909101529392505050565b60006020825261107e6020830184612a7d565b600060408252612d236040830185612a7d565b6000602082528251806020840152612edc816040850160208701613279565b601f01601f19169190910160400192915050565b6020808252601390820152722937baba32b91d103737ba1036b0b730b3b2b960691b604082015260600190565b6020808252601490820152730a4deeae8cae47440929cac82989288bea082a8960631b604082015260600190565b60208082526019908201527f526f757465723a20696e76616c69642070616972207479706500000000000000604082015260600190565b6020808252602b908201527f526f757465723a206d73672e76616c7565206973206e6f7420657175616c207460408201526a37902fb0b6b7bab73a24b760a91b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526023908201527f526f757465723a206d73672e76616c7565206973206e6f7420657175616c207460408201526206f20360ec1b606082015260800190565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f55604082015261139560f21b606082015260800190565b60208082526024908201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e746040820152631c9858dd60e21b606082015260800190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201526213115160ea1b606082015260800190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b85516001600160a01b0390811682526020808801518216908301526040968701518116968201969096526060810194909452608084019290925290921660a082015260c081019190915260e00190565b90815260200190565b918252602082015260400190565b60ff9290921682526001600160a01b0316602082015260400190565b6040518181016001600160401b038111828210171561325257600080fd5b604052919050565b60006001600160401b0382111561326f578081fd5b5060209081020190565b60005b8381101561329457818101518382015260200161327c565b838111156132a3576000848401525b50505050565b6001600160a01b03811681146132be57600080fd5b50565b80151581146132be57600080fd5b60ff811681146132be57600080fdfe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208d6fe14a0bc53e071d25ec601130a4ce3cf0b94686909e36737d322306bce66564736f6c634300060c0033",
  "devdoc": {
    "details": "This contract handles the routing of tokens in the dForce AMM ecosystem",
    "events": {
      "SetPairTypes(uint8,address)": {
        "details": "Event emitted when a pair type is set"
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(uint8,address[],uint256[],uint256[],uint256,address,uint256)": {
        "details": "Adds liquidity to a given pair",
        "params": {
          "_amountDesireds": "The desired amounts of each token to add liquidity for",
          "_amountsMin": "The minimum amounts of each token to add liquidity for",
          "_deadline": "The deadline for the transaction",
          "_minLiquidity": "The minimum liquidity to add",
          "_pairType": "The pair type",
          "_to": "The address to send the liquidity to",
          "_tokens": "The tokens to add liquidity for"
        },
        "returns": {
          "_amounts": "The amounts of tokens added",
          "_liquidity": "The amount of liquidity added"
        }
      },
      "addLiquidityETH(uint8,address[],uint256[],uint256[],uint256,address,uint256)": {
        "details": "Adds liquidity to a given pair with ETH",
        "params": {
          "_amountDesireds": "The desired amounts of each token to add liquidity for",
          "_amountsMin": "The minimum amounts of each token to add liquidity for",
          "_deadline": "The deadline for the transaction",
          "_minLiquidity": "The minimum liquidity to add",
          "_pairType": "The pair type",
          "_to": "The address to send the liquidity to",
          "_tokens": "The tokens to add liquidity for"
        },
        "returns": {
          "_amounts": "The amounts of tokens added",
          "_liquidity": "The amount of liquidity added"
        }
      },
      "constructor": {
        "details": "Constructor function for the Router contract",
        "params": {
          "_factory": "Address of the factory contract",
          "_weth": "Address of the WETH contract"
        }
      },
      "getAmountsOut(uint256,(address,address,address)[])": {
        "details": "Returns the amount of tokens that will be received for a given input amount and route",
        "params": {
          "_amountIn": "The input amount",
          "_routes": "The route to take"
        }
      },
      "getAmountsOutPath(uint256,(address,address,address)[])": {
        "details": "Returns the amount of tokens that will be received for a given input amount and route",
        "params": {
          "_amountIn": "The input amount",
          "_routes": "The route to take"
        }
      },
      "getReserves(address[])": {
        "details": "Returns the reserves of the volatile pair for the given tokens",
        "params": {
          "_tokens": "The tokens to get the reserves for"
        },
        "returns": {
          "_reserveA": "The reserve of token A",
          "_reserveB": "The reserve of token B"
        }
      },
      "initialize(address,address)": {
        "details": "Initializes the Router contract",
        "params": {
          "_factory": "Address of the factory contract",
          "_weth": "Address of the WETH contract"
        }
      },
      "pairFor(address[],uint8)": {
        "details": "Returns the address of the pair for the given tokens and pair type",
        "params": {
          "_tokens": "The tokens to get the pair address for",
          "_type": "The pair type"
        },
        "returns": {
          "_has": "Whether or not the pair exists",
          "_pair": "The address of the pair"
        }
      },
      "pairTypes(uint8)": {
        "details": "Returns the address of the router contract for a given pair type",
        "params": {
          "_pairType": "The pair type"
        }
      },
      "quoteAddLiquidity(uint8,address[],uint256[])": {
        "details": "Returns the amount of tokens required to add liquidity to a given pair",
        "params": {
          "_amountDesireds": "The desired amounts of each token to add liquidity for",
          "_pairType": "The pair type",
          "_tokens": "The tokens to add liquidity for"
        }
      },
      "quoteRemoveLiquidity(uint8,address[],uint256)": {
        "details": "Returns the amount of tokens that will be received when removing liquidity from a given pair",
        "params": {
          "_liquidity": "The amount of liquidity to remove",
          "_pairType": "The pair type",
          "_tokens": "The tokens to remove liquidity for"
        }
      },
      "quoteRemoveLiquidityImbalance(uint8,address[],uint256[])": {
        "details": "Returns the amount of tokens that will be removed when removing liquidity from a given pair",
        "params": {
          "_amounts": "The desired amounts of each token to remove liquidity for",
          "_pairType": "The pair type",
          "_tokens": "The tokens to remove liquidity for"
        }
      },
      "quoteRemoveLiquidityOneToken(uint8,address[],address,uint256)": {
        "details": "Returns the amount of a specific token that will be received when removing liquidity from a given pair",
        "params": {
          "_liquidity": "The amount of liquidity to remove",
          "_pairType": "The pair type",
          "_token": "The token to receive",
          "_tokens": "The tokens to remove liquidity for"
        }
      },
      "removeLiquidity(uint8,address[],uint256,uint256[],address,uint256)": {
        "details": "Removes liquidity from a given pair",
        "params": {
          "_amountsMin": "The minimum amounts of each token to receive",
          "_deadline": "The deadline for the transaction",
          "_liquidity": "The amount of liquidity to remove",
          "_pairType": "The pair type",
          "_to": "The address to send the tokens to",
          "_tokens": "The tokens to remove liquidity for"
        },
        "returns": {
          "_amounts": "The amounts of tokens received"
        }
      },
      "removeLiquidityETH(uint8,address[],uint256,uint256[],address,uint256)": {
        "details": "Removes liquidity from a given pair with ETH",
        "params": {
          "_amountsMin": "The minimum amounts of each token to receive",
          "_deadline": "The deadline for the transaction",
          "_liquidity": "The amount of liquidity to remove",
          "_pairType": "The pair type",
          "_to": "The address to send the tokens to",
          "_tokens": "The tokens to remove liquidity for"
        },
        "returns": {
          "_amounts": "The amounts of tokens received"
        }
      },
      "removeLiquidityETHWithPermit(uint8,address[],uint256,uint256[],address,uint256,bool,uint8,bytes32,bytes32)": {
        "details": "Removes liquidity from a given pair with a permit",
        "params": {
          "_amountsMin": "The minimum amounts of each token to remove",
          "_approveMax": "Whether to approve the maximum amount",
          "_deadline": "The deadline for the transaction",
          "_liquidity": "The amount of liquidity to remove",
          "_pairType": "The pair type",
          "_r": "The r value of the permit signature",
          "_s": "The s value of the permit signature",
          "_to": "The address to send the tokens to",
          "_tokens": "The tokens to remove liquidity for",
          "_v": "The v value of the permit signature"
        },
        "returns": {
          "_amounts": "The amounts of tokens removed"
        }
      },
      "removeLiquidityImbalance(uint8,address[],uint256[],uint256,address,uint256)": {
        "details": "Removes liquidity from a given pair with an imbalance of tokens",
        "params": {
          "_amounts": "The amounts of each token to remove",
          "_deadline": "The deadline for the transaction",
          "_maxBurnAmount": "The maximum amount of liquidity to remove",
          "_pairType": "The pair type",
          "_to": "The address to send the tokens to",
          "_tokens": "The tokens to remove liquidity for"
        },
        "returns": {
          "_amount": "The amount of liquidity removed"
        }
      },
      "removeLiquidityImbalanceETH(uint8,address[],uint256[],uint256,address,uint256)": {
        "details": "Removes liquidity from a given pair with an imbalance of ETH and tokens",
        "params": {
          "_amounts": "The amounts of each token to remove",
          "_deadline": "The deadline for the transaction",
          "_maxBurnAmount": "The maximum amount of liquidity to remove",
          "_pairType": "The type of pair",
          "_to": "The address to send the tokens to",
          "_tokens": "The tokens to remove liquidity for"
        },
        "returns": {
          "_amount": "The amount of liquidity removed"
        }
      },
      "removeLiquidityImbalanceETHWithPermit(uint8,address[],uint256[],uint256,address,uint256,bool,uint8,bytes32,bytes32)": {
        "details": "Removes liquidity imbalance for multiple tokens with a permit",
        "params": {
          "_amounts": "The amounts of tokens to remove",
          "_approveMax": "Whether to approve the maximum amount",
          "_deadline": "The deadline for the transaction",
          "_maxBurnAmount": "The maximum amount of liquidity to remove",
          "_pairType": "The type of pair",
          "_r": "The r value of the permit signature",
          "_s": "The s value of the permit signature",
          "_to": "The address to send the tokens to",
          "_tokens": "The tokens to remove liquidity for",
          "_v": "The v value of the permit signature"
        },
        "returns": {
          "_actualBurnAmount": "The actual amount of liquidity removed"
        }
      },
      "removeLiquidityImbalanceWithPermit(uint8,address[],uint256[],uint256,address,uint256,bool,uint8,bytes32,bytes32)": {
        "details": "Removes liquidity imbalance for multiple tokens with a permit",
        "params": {
          "_amounts": "The amounts of tokens to remove",
          "_approveMax": "Whether to approve the maximum amount",
          "_deadline": "The deadline for the transaction",
          "_maxBurnAmount": "The maximum amount of liquidity to remove",
          "_pairType": "The type of pair",
          "_r": "The r value of the permit signature",
          "_s": "The s value of the permit signature",
          "_to": "The address to send the tokens to",
          "_tokens": "The tokens to remove liquidity for",
          "_v": "The v value of the permit signature"
        },
        "returns": {
          "_actualBurnAmount": "The actual amount of liquidity removed"
        }
      },
      "removeLiquidityOneToken(uint8,address[],uint256,address,uint256,address,uint256)": {
        "details": "Removes liquidity for a single token from a given pair",
        "params": {
          "_deadline": "The deadline for the transaction",
          "_liquidity": "The amount of liquidity to remove",
          "_minAmount": "The minimum amount of token to receive",
          "_pairType": "The pair type",
          "_to": "The address to send the token to",
          "_token": "The token to receive",
          "_tokens": "The tokens to remove liquidity for"
        },
        "returns": {
          "_amount": "The amount of token received"
        }
      },
      "removeLiquidityOneTokenETH(uint8,address[],uint256,address,uint256,address,uint256)": {
        "details": "Removes liquidity for a single token from a given pair with ETH",
        "params": {
          "_deadline": "The deadline for the transaction",
          "_liquidity": "The amount of liquidity to remove",
          "_minAmount": "The minimum amount of token to receive",
          "_pairType": "The pair type",
          "_to": "The address to send the token to",
          "_token": "The token to receive",
          "_tokens": "The tokens to remove liquidity for"
        },
        "returns": {
          "_amount": "The amount of token received"
        }
      },
      "removeLiquidityOneTokenETHWithPermit(uint8,address[],uint256,address,uint256,address,uint256,bool,uint8,bytes32,bytes32)": {
        "details": "Removes liquidity for a single token with a permit",
        "params": {
          "_approveMax": "Whether to approve the maximum amount",
          "_deadline": "The deadline for the transaction",
          "_liquidity": "The amount of liquidity to remove",
          "_minAmount": "The minimum amount of tokens to remove",
          "_pairType": "The type of pair",
          "_r": "The r value of the permit signature",
          "_s": "The s value of the permit signature",
          "_to": "The address to send the tokens to",
          "_token": "The token to remove liquidity for",
          "_tokens": "The tokens to remove liquidity for",
          "_v": "The v value of the permit signature"
        },
        "returns": {
          "_tokenAmount": "The amount of tokens removed"
        }
      },
      "removeLiquidityOneTokenWithPermit(uint8,address[],uint256,address,uint256,address,uint256,bool,uint8,bytes32,bytes32)": {
        "details": "Removes liquidity for a single token with a permit",
        "params": {
          "_approveMax": "Whether to approve the maximum amount",
          "_deadline": "The deadline for the transaction",
          "_liquidity": "The amount of liquidity to remove",
          "_minAmount": "The minimum amount of tokens to remove",
          "_pairType": "The type of pair",
          "_r": "The r value of the permit signature",
          "_s": "The s value of the permit signature",
          "_to": "The address to send the tokens to",
          "_token": "The token to remove liquidity for",
          "_tokens": "The tokens to remove liquidity for",
          "_v": "The v value of the permit signature"
        },
        "returns": {
          "_tokenAmount": "The amount of tokens removed"
        }
      },
      "removeLiquidityWithPermit(uint8,address[],uint256,uint256[],address,uint256,bool,uint8,bytes32,bytes32)": {
        "details": "Removes liquidity from a given pair with a permit",
        "params": {
          "_amountsMin": "The minimum amounts of each token to remove",
          "_approveMax": "Whether to approve the maximum amount",
          "_deadline": "The deadline for the transaction",
          "_liquidity": "The amount of liquidity to remove",
          "_pairType": "The pair type",
          "_r": "The r value of the permit signature",
          "_s": "The s value of the permit signature",
          "_to": "The address to send the tokens to",
          "_tokens": "The tokens to remove liquidity for",
          "_v": "The v value of the permit signature"
        },
        "returns": {
          "_amounts": "The amounts of tokens removed"
        }
      },
      "setPairTypes(address)": {
        "details": "Sets the pair types for the router contract",
        "params": {
          "_pairRouter": "The address of the pair router contract"
        }
      },
      "swap((address,address,address)[],uint256,uint256,address,uint256)": {
        "details": "Swaps tokens through multiple pairs",
        "params": {
          "_amountIn": "The amount of tokens to swap",
          "_amountOutMin": "The minimum amount of tokens to receive",
          "_deadline": "The deadline for the transaction",
          "_routes": "The routes to swap through",
          "_to": "The address to send the swapped tokens to"
        },
        "returns": {
          "_amountOut": "The amount of tokens received"
        }
      },
      "swapETH((address,address,address)[],uint256,uint256,address,uint256)": {
        "details": "Swaps ETH for tokens through multiple pairs",
        "params": {
          "_amountIn": "The amount of ETH to swap",
          "_amountOutMin": "The minimum amount of tokens to receive",
          "_deadline": "The deadline for the transaction",
          "_routes": "The routes to swap through",
          "_to": "The address to send the swapped tokens to"
        },
        "returns": {
          "_amountOut": "The amount of tokens received"
        }
      },
      "weth()": {
        "details": "Returns the address of the WETH contract"
      }
    },
    "stateVariables": {
      "factory": {
        "details": "Address of the factory contract"
      },
      "pairTypes_": {
        "details": "Mapping of pair types to their respective router contracts"
      },
      "weth_": {
        "details": "Address of the WETH contract"
      }
    },
    "title": "Router contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/Router.sol:Router",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/Router.sol:Router",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4548,
        "contract": "contracts/Router.sol:Router",
        "label": "factory",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4551,
        "contract": "contracts/Router.sol:Router",
        "label": "weth_",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IWETH)11147"
      },
      {
        "astId": 4556,
        "contract": "contracts/Router.sol:Router",
        "label": "pairTypes_",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWETH)11147": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}